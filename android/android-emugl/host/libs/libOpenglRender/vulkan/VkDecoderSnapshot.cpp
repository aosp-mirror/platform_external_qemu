// Copyright (C) 2018 The Android Open Source Project
// Copyright (C) 2018 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Autogenerated module VkDecoderSnapshot
// (impl) generated by android/android-emugl/host/libs/libOpenglRender/vulkan-registry/xml/genvk.py -registry android/android-emugl/host/libs/libOpenglRender/vulkan-registry/xml/vk.xml cereal -o android/android-emugl/host/libs/libOpenglRender/vulkan/cereal
// Please do not modify directly;
// re-run android/scripts/generate-vulkan-sources.sh,
// or directly from Python by defining:
// VULKAN_REGISTRY_XML_DIR : Directory containing genvk.py and vk.xml
// CEREAL_OUTPUT_DIR: Where to put the generated sources.
// python3 $VULKAN_REGISTRY_XML_DIR/genvk.py -registry $VULKAN_REGISTRY_XML_DIR/vk.xml cereal -o $CEREAL_OUTPUT_DIR

#include "VkDecoderSnapshot.h"


#include "VulkanHandleMapping.h"
#include "VkDecoderGlobalState.h"
#include "VkReconstruction.h"

#include "android/base/synchronization/Lock.h"






using namespace goldfish_vk;

class VkDecoderSnapshot::Impl {
public:
    Impl() { }

    void save(android::base::Stream* stream) {
        mReconstruction.save(stream);
    }

    void load(android::base::Stream* stream) {
        mReconstruction.load(stream);
    }

#ifdef VK_VERSION_1_0
void vkCreateInstance(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    const VkInstanceCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkInstance* pInstance)
{
    // TODO: Implement
    android::base::AutoLock lock(mLock);
    // pInstance create
    mReconstruction.addHandles((const uint64_t*)pInstance, 1);
    if (!pInstance) return;
    auto apiHandle = mReconstruction.createApiInfo();
    auto apiInfo = mReconstruction.getApiInfo(apiHandle);
    mReconstruction.setApiTrace(apiInfo, OP_vkCreateInstance, snapshotTraceBegin, snapshotTraceBytes);
    mReconstruction.forEachHandleAddApi((const uint64_t*)pInstance, 1, apiHandle);
    mReconstruction.setCreatedHandlesForApi(apiHandle, (const uint64_t*)pInstance, 1);
}
void vkDestroyInstance(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkInstance instance,
    const VkAllocationCallbacks* pAllocator)
{
    // TODO: Implement
    android::base::AutoLock lock(mLock);
    // instance destroy
    mReconstruction.removeHandles((const uint64_t*)(&instance), 1);
}
void vkEnumeratePhysicalDevices(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkInstance instance,
    uint32_t* pPhysicalDeviceCount,
    VkPhysicalDevice* pPhysicalDevices)
{
    // TODO: Implement
    android::base::AutoLock lock(mLock);
    // pPhysicalDevices create
    mReconstruction.addHandles((const uint64_t*)pPhysicalDevices, (*(pPhysicalDeviceCount)));
    mReconstruction.addHandleDependency((const uint64_t*)pPhysicalDevices, (*(pPhysicalDeviceCount)), (uint64_t)(uintptr_t)instance);
    if (!pPhysicalDevices) return;
    auto apiHandle = mReconstruction.createApiInfo();
    auto apiInfo = mReconstruction.getApiInfo(apiHandle);
    mReconstruction.setApiTrace(apiInfo, OP_vkEnumeratePhysicalDevices, snapshotTraceBegin, snapshotTraceBytes);
    if (pPhysicalDeviceCount)
    {
        mReconstruction.forEachHandleAddApi((const uint64_t*)pPhysicalDevices, (*(pPhysicalDeviceCount)), apiHandle);
        mReconstruction.setCreatedHandlesForApi(apiHandle, (const uint64_t*)pPhysicalDevices, (*(pPhysicalDeviceCount)));
    }
}
void vkGetPhysicalDeviceFeatures(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkPhysicalDevice physicalDevice,
    VkPhysicalDeviceFeatures* pFeatures)
{
    // TODO: Implement
}
void vkGetPhysicalDeviceFormatProperties(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkPhysicalDevice physicalDevice,
    VkFormat format,
    VkFormatProperties* pFormatProperties)
{
    // TODO: Implement
}
void vkGetPhysicalDeviceImageFormatProperties(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    VkFormat format,
    VkImageType type,
    VkImageTiling tiling,
    VkImageUsageFlags usage,
    VkImageCreateFlags flags,
    VkImageFormatProperties* pImageFormatProperties)
{
    // TODO: Implement
}
void vkGetPhysicalDeviceProperties(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkPhysicalDevice physicalDevice,
    VkPhysicalDeviceProperties* pProperties)
{
    // TODO: Implement
}
void vkGetPhysicalDeviceQueueFamilyProperties(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkPhysicalDevice physicalDevice,
    uint32_t* pQueueFamilyPropertyCount,
    VkQueueFamilyProperties* pQueueFamilyProperties)
{
    // TODO: Implement
}
void vkGetPhysicalDeviceMemoryProperties(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkPhysicalDevice physicalDevice,
    VkPhysicalDeviceMemoryProperties* pMemoryProperties)
{
    // TODO: Implement
}
void vkGetInstanceProcAddr(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    PFN_vkVoidFunction input_result,
    VkInstance instance,
    const char* pName)
{
    // TODO: Implement
}
void vkGetDeviceProcAddr(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    PFN_vkVoidFunction input_result,
    VkDevice device,
    const char* pName)
{
    // TODO: Implement
}
void vkCreateDevice(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    const VkDeviceCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkDevice* pDevice)
{
    // TODO: Implement
    android::base::AutoLock lock(mLock);
    // pDevice create
    mReconstruction.addHandles((const uint64_t*)pDevice, 1);
    mReconstruction.addHandleDependency((const uint64_t*)pDevice, 1, (uint64_t)(uintptr_t)physicalDevice);
    if (!pDevice) return;
    auto apiHandle = mReconstruction.createApiInfo();
    auto apiInfo = mReconstruction.getApiInfo(apiHandle);
    mReconstruction.setApiTrace(apiInfo, OP_vkCreateDevice, snapshotTraceBegin, snapshotTraceBytes);
    mReconstruction.forEachHandleAddApi((const uint64_t*)pDevice, 1, apiHandle);
    mReconstruction.setCreatedHandlesForApi(apiHandle, (const uint64_t*)pDevice, 1);
}
void vkDestroyDevice(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    const VkAllocationCallbacks* pAllocator)
{
    // TODO: Implement
    android::base::AutoLock lock(mLock);
    // device destroy
    mReconstruction.removeHandles((const uint64_t*)(&device), 1);
}
void vkEnumerateInstanceExtensionProperties(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    const char* pLayerName,
    uint32_t* pPropertyCount,
    VkExtensionProperties* pProperties)
{
    // TODO: Implement
}
void vkEnumerateDeviceExtensionProperties(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    const char* pLayerName,
    uint32_t* pPropertyCount,
    VkExtensionProperties* pProperties)
{
    // TODO: Implement
}
void vkEnumerateInstanceLayerProperties(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    uint32_t* pPropertyCount,
    VkLayerProperties* pProperties)
{
    // TODO: Implement
}
void vkEnumerateDeviceLayerProperties(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    uint32_t* pPropertyCount,
    VkLayerProperties* pProperties)
{
    // TODO: Implement
}
void vkGetDeviceQueue(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    uint32_t queueFamilyIndex,
    uint32_t queueIndex,
    VkQueue* pQueue)
{
    // TODO: Implement
    android::base::AutoLock lock(mLock);
    // pQueue create
    mReconstruction.addHandles((const uint64_t*)pQueue, 1);
    mReconstruction.addHandleDependency((const uint64_t*)pQueue, 1, (uint64_t)(uintptr_t)device);
    if (!pQueue) return;
    auto apiHandle = mReconstruction.createApiInfo();
    auto apiInfo = mReconstruction.getApiInfo(apiHandle);
    mReconstruction.setApiTrace(apiInfo, OP_vkGetDeviceQueue, snapshotTraceBegin, snapshotTraceBytes);
    mReconstruction.forEachHandleAddApi((const uint64_t*)pQueue, 1, apiHandle);
    mReconstruction.setCreatedHandlesForApi(apiHandle, (const uint64_t*)pQueue, 1);
}
void vkQueueSubmit(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkQueue queue,
    uint32_t submitCount,
    const VkSubmitInfo* pSubmits,
    VkFence fence)
{
    // TODO: Implement
}
void vkQueueWaitIdle(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkQueue queue)
{
    // TODO: Implement
}
void vkDeviceWaitIdle(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device)
{
    // TODO: Implement
}
void vkAllocateMemory(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkMemoryAllocateInfo* pAllocateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkDeviceMemory* pMemory)
{
    // TODO: Implement
    android::base::AutoLock lock(mLock);
    // pMemory create
    mReconstruction.addHandles((const uint64_t*)pMemory, 1);
    mReconstruction.addHandleDependency((const uint64_t*)pMemory, 1, (uint64_t)(uintptr_t)device);
    if (!pMemory) return;
    auto apiHandle = mReconstruction.createApiInfo();
    auto apiInfo = mReconstruction.getApiInfo(apiHandle);
    mReconstruction.setApiTrace(apiInfo, OP_vkAllocateMemory, snapshotTraceBegin, snapshotTraceBytes);
    mReconstruction.forEachHandleAddApi((const uint64_t*)pMemory, 1, apiHandle);
    mReconstruction.setCreatedHandlesForApi(apiHandle, (const uint64_t*)pMemory, 1);
}
void vkFreeMemory(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkDeviceMemory memory,
    const VkAllocationCallbacks* pAllocator)
{
    // TODO: Implement
    android::base::AutoLock lock(mLock);
    // memory destroy
    mReconstruction.removeHandles((const uint64_t*)(&memory), 1);
}
void vkMapMemory(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkDeviceMemory memory,
    VkDeviceSize offset,
    VkDeviceSize size,
    VkMemoryMapFlags flags,
    void** ppData)
{
    // TODO: Implement
}
void vkUnmapMemory(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkDeviceMemory memory)
{
    // TODO: Implement
}
void vkFlushMappedMemoryRanges(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    uint32_t memoryRangeCount,
    const VkMappedMemoryRange* pMemoryRanges)
{
    // TODO: Implement
}
void vkInvalidateMappedMemoryRanges(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    uint32_t memoryRangeCount,
    const VkMappedMemoryRange* pMemoryRanges)
{
    // TODO: Implement
}
void vkGetDeviceMemoryCommitment(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkDeviceMemory memory,
    VkDeviceSize* pCommittedMemoryInBytes)
{
    // TODO: Implement
}
void vkBindBufferMemory(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkBuffer buffer,
    VkDeviceMemory memory,
    VkDeviceSize memoryOffset)
{
    // TODO: Implement
}
void vkBindImageMemory(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkImage image,
    VkDeviceMemory memory,
    VkDeviceSize memoryOffset)
{
    // TODO: Implement
}
void vkGetBufferMemoryRequirements(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkBuffer buffer,
    VkMemoryRequirements* pMemoryRequirements)
{
    // TODO: Implement
}
void vkGetImageMemoryRequirements(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkImage image,
    VkMemoryRequirements* pMemoryRequirements)
{
    // TODO: Implement
}
void vkGetImageSparseMemoryRequirements(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkImage image,
    uint32_t* pSparseMemoryRequirementCount,
    VkSparseImageMemoryRequirements* pSparseMemoryRequirements)
{
    // TODO: Implement
}
void vkGetPhysicalDeviceSparseImageFormatProperties(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkPhysicalDevice physicalDevice,
    VkFormat format,
    VkImageType type,
    VkSampleCountFlagBits samples,
    VkImageUsageFlags usage,
    VkImageTiling tiling,
    uint32_t* pPropertyCount,
    VkSparseImageFormatProperties* pProperties)
{
    // TODO: Implement
}
void vkQueueBindSparse(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkQueue queue,
    uint32_t bindInfoCount,
    const VkBindSparseInfo* pBindInfo,
    VkFence fence)
{
    // TODO: Implement
}
void vkCreateFence(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkFenceCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkFence* pFence)
{
    // TODO: Implement
    android::base::AutoLock lock(mLock);
    // pFence create
    mReconstruction.addHandles((const uint64_t*)pFence, 1);
    mReconstruction.addHandleDependency((const uint64_t*)pFence, 1, (uint64_t)(uintptr_t)device);
    if (!pFence) return;
    auto apiHandle = mReconstruction.createApiInfo();
    auto apiInfo = mReconstruction.getApiInfo(apiHandle);
    mReconstruction.setApiTrace(apiInfo, OP_vkCreateFence, snapshotTraceBegin, snapshotTraceBytes);
    mReconstruction.forEachHandleAddApi((const uint64_t*)pFence, 1, apiHandle);
    mReconstruction.setCreatedHandlesForApi(apiHandle, (const uint64_t*)pFence, 1);
}
void vkDestroyFence(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkFence fence,
    const VkAllocationCallbacks* pAllocator)
{
    // TODO: Implement
    android::base::AutoLock lock(mLock);
    // fence destroy
    mReconstruction.removeHandles((const uint64_t*)(&fence), 1);
}
void vkResetFences(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    uint32_t fenceCount,
    const VkFence* pFences)
{
    // TODO: Implement
}
void vkGetFenceStatus(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkFence fence)
{
    // TODO: Implement
}
void vkWaitForFences(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    uint32_t fenceCount,
    const VkFence* pFences,
    VkBool32 waitAll,
    uint64_t timeout)
{
    // TODO: Implement
}
void vkCreateSemaphore(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkSemaphoreCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSemaphore* pSemaphore)
{
    // TODO: Implement
    android::base::AutoLock lock(mLock);
    // pSemaphore create
    mReconstruction.addHandles((const uint64_t*)pSemaphore, 1);
    mReconstruction.addHandleDependency((const uint64_t*)pSemaphore, 1, (uint64_t)(uintptr_t)device);
    if (!pSemaphore) return;
    auto apiHandle = mReconstruction.createApiInfo();
    auto apiInfo = mReconstruction.getApiInfo(apiHandle);
    mReconstruction.setApiTrace(apiInfo, OP_vkCreateSemaphore, snapshotTraceBegin, snapshotTraceBytes);
    mReconstruction.forEachHandleAddApi((const uint64_t*)pSemaphore, 1, apiHandle);
    mReconstruction.setCreatedHandlesForApi(apiHandle, (const uint64_t*)pSemaphore, 1);
}
void vkDestroySemaphore(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkSemaphore semaphore,
    const VkAllocationCallbacks* pAllocator)
{
    // TODO: Implement
    android::base::AutoLock lock(mLock);
    // semaphore destroy
    mReconstruction.removeHandles((const uint64_t*)(&semaphore), 1);
}
void vkCreateEvent(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkEventCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkEvent* pEvent)
{
    // TODO: Implement
    android::base::AutoLock lock(mLock);
    // pEvent create
    mReconstruction.addHandles((const uint64_t*)pEvent, 1);
    mReconstruction.addHandleDependency((const uint64_t*)pEvent, 1, (uint64_t)(uintptr_t)device);
    if (!pEvent) return;
    auto apiHandle = mReconstruction.createApiInfo();
    auto apiInfo = mReconstruction.getApiInfo(apiHandle);
    mReconstruction.setApiTrace(apiInfo, OP_vkCreateEvent, snapshotTraceBegin, snapshotTraceBytes);
    mReconstruction.forEachHandleAddApi((const uint64_t*)pEvent, 1, apiHandle);
    mReconstruction.setCreatedHandlesForApi(apiHandle, (const uint64_t*)pEvent, 1);
}
void vkDestroyEvent(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkEvent event,
    const VkAllocationCallbacks* pAllocator)
{
    // TODO: Implement
    android::base::AutoLock lock(mLock);
    // event destroy
    mReconstruction.removeHandles((const uint64_t*)(&event), 1);
}
void vkGetEventStatus(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkEvent event)
{
    // TODO: Implement
}
void vkSetEvent(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkEvent event)
{
    // TODO: Implement
}
void vkResetEvent(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkEvent event)
{
    // TODO: Implement
}
void vkCreateQueryPool(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkQueryPoolCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkQueryPool* pQueryPool)
{
    // TODO: Implement
    android::base::AutoLock lock(mLock);
    // pQueryPool create
    mReconstruction.addHandles((const uint64_t*)pQueryPool, 1);
    mReconstruction.addHandleDependency((const uint64_t*)pQueryPool, 1, (uint64_t)(uintptr_t)device);
    if (!pQueryPool) return;
    auto apiHandle = mReconstruction.createApiInfo();
    auto apiInfo = mReconstruction.getApiInfo(apiHandle);
    mReconstruction.setApiTrace(apiInfo, OP_vkCreateQueryPool, snapshotTraceBegin, snapshotTraceBytes);
    mReconstruction.forEachHandleAddApi((const uint64_t*)pQueryPool, 1, apiHandle);
    mReconstruction.setCreatedHandlesForApi(apiHandle, (const uint64_t*)pQueryPool, 1);
}
void vkDestroyQueryPool(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkQueryPool queryPool,
    const VkAllocationCallbacks* pAllocator)
{
    // TODO: Implement
    android::base::AutoLock lock(mLock);
    // queryPool destroy
    mReconstruction.removeHandles((const uint64_t*)(&queryPool), 1);
}
void vkGetQueryPoolResults(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkQueryPool queryPool,
    uint32_t firstQuery,
    uint32_t queryCount,
    size_t dataSize,
    void* pData,
    VkDeviceSize stride,
    VkQueryResultFlags flags)
{
    // TODO: Implement
}
void vkCreateBuffer(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkBufferCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkBuffer* pBuffer)
{
    // TODO: Implement
    android::base::AutoLock lock(mLock);
    // pBuffer create
    mReconstruction.addHandles((const uint64_t*)pBuffer, 1);
    mReconstruction.addHandleDependency((const uint64_t*)pBuffer, 1, (uint64_t)(uintptr_t)device);
    if (!pBuffer) return;
    auto apiHandle = mReconstruction.createApiInfo();
    auto apiInfo = mReconstruction.getApiInfo(apiHandle);
    mReconstruction.setApiTrace(apiInfo, OP_vkCreateBuffer, snapshotTraceBegin, snapshotTraceBytes);
    mReconstruction.forEachHandleAddApi((const uint64_t*)pBuffer, 1, apiHandle);
    mReconstruction.setCreatedHandlesForApi(apiHandle, (const uint64_t*)pBuffer, 1);
}
void vkDestroyBuffer(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkBuffer buffer,
    const VkAllocationCallbacks* pAllocator)
{
    // TODO: Implement
    android::base::AutoLock lock(mLock);
    // buffer destroy
    mReconstruction.removeHandles((const uint64_t*)(&buffer), 1);
}
void vkCreateBufferView(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkBufferViewCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkBufferView* pView)
{
    // TODO: Implement
    android::base::AutoLock lock(mLock);
    // pView create
    mReconstruction.addHandles((const uint64_t*)pView, 1);
    mReconstruction.addHandleDependency((const uint64_t*)pView, 1, (uint64_t)(uintptr_t)device);
    if (!pView) return;
    auto apiHandle = mReconstruction.createApiInfo();
    auto apiInfo = mReconstruction.getApiInfo(apiHandle);
    mReconstruction.setApiTrace(apiInfo, OP_vkCreateBufferView, snapshotTraceBegin, snapshotTraceBytes);
    mReconstruction.forEachHandleAddApi((const uint64_t*)pView, 1, apiHandle);
    mReconstruction.setCreatedHandlesForApi(apiHandle, (const uint64_t*)pView, 1);
}
void vkDestroyBufferView(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkBufferView bufferView,
    const VkAllocationCallbacks* pAllocator)
{
    // TODO: Implement
    android::base::AutoLock lock(mLock);
    // bufferView destroy
    mReconstruction.removeHandles((const uint64_t*)(&bufferView), 1);
}
void vkCreateImage(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkImageCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkImage* pImage)
{
    // TODO: Implement
    android::base::AutoLock lock(mLock);
    // pImage create
    mReconstruction.addHandles((const uint64_t*)pImage, 1);
    mReconstruction.addHandleDependency((const uint64_t*)pImage, 1, (uint64_t)(uintptr_t)device);
    if (!pImage) return;
    auto apiHandle = mReconstruction.createApiInfo();
    auto apiInfo = mReconstruction.getApiInfo(apiHandle);
    mReconstruction.setApiTrace(apiInfo, OP_vkCreateImage, snapshotTraceBegin, snapshotTraceBytes);
    mReconstruction.forEachHandleAddApi((const uint64_t*)pImage, 1, apiHandle);
    mReconstruction.setCreatedHandlesForApi(apiHandle, (const uint64_t*)pImage, 1);
}
void vkDestroyImage(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkImage image,
    const VkAllocationCallbacks* pAllocator)
{
    // TODO: Implement
    android::base::AutoLock lock(mLock);
    // image destroy
    mReconstruction.removeHandles((const uint64_t*)(&image), 1);
}
void vkGetImageSubresourceLayout(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkImage image,
    const VkImageSubresource* pSubresource,
    VkSubresourceLayout* pLayout)
{
    // TODO: Implement
}
void vkCreateImageView(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkImageViewCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkImageView* pView)
{
    // TODO: Implement
    android::base::AutoLock lock(mLock);
    // pView create
    mReconstruction.addHandles((const uint64_t*)pView, 1);
    mReconstruction.addHandleDependency((const uint64_t*)pView, 1, (uint64_t)(uintptr_t)device);
    if (!pView) return;
    auto apiHandle = mReconstruction.createApiInfo();
    auto apiInfo = mReconstruction.getApiInfo(apiHandle);
    mReconstruction.setApiTrace(apiInfo, OP_vkCreateImageView, snapshotTraceBegin, snapshotTraceBytes);
    mReconstruction.forEachHandleAddApi((const uint64_t*)pView, 1, apiHandle);
    mReconstruction.setCreatedHandlesForApi(apiHandle, (const uint64_t*)pView, 1);
}
void vkDestroyImageView(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkImageView imageView,
    const VkAllocationCallbacks* pAllocator)
{
    // TODO: Implement
    android::base::AutoLock lock(mLock);
    // imageView destroy
    mReconstruction.removeHandles((const uint64_t*)(&imageView), 1);
}
void vkCreateShaderModule(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkShaderModuleCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkShaderModule* pShaderModule)
{
    // TODO: Implement
    android::base::AutoLock lock(mLock);
    // pShaderModule create
    mReconstruction.addHandles((const uint64_t*)pShaderModule, 1);
    mReconstruction.addHandleDependency((const uint64_t*)pShaderModule, 1, (uint64_t)(uintptr_t)device);
    if (!pShaderModule) return;
    auto apiHandle = mReconstruction.createApiInfo();
    auto apiInfo = mReconstruction.getApiInfo(apiHandle);
    mReconstruction.setApiTrace(apiInfo, OP_vkCreateShaderModule, snapshotTraceBegin, snapshotTraceBytes);
    mReconstruction.forEachHandleAddApi((const uint64_t*)pShaderModule, 1, apiHandle);
    mReconstruction.setCreatedHandlesForApi(apiHandle, (const uint64_t*)pShaderModule, 1);
}
void vkDestroyShaderModule(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkShaderModule shaderModule,
    const VkAllocationCallbacks* pAllocator)
{
    // TODO: Implement
    android::base::AutoLock lock(mLock);
    // shaderModule destroy
    mReconstruction.removeHandles((const uint64_t*)(&shaderModule), 1);
}
void vkCreatePipelineCache(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkPipelineCacheCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkPipelineCache* pPipelineCache)
{
    // TODO: Implement
    android::base::AutoLock lock(mLock);
    // pPipelineCache create
    mReconstruction.addHandles((const uint64_t*)pPipelineCache, 1);
    mReconstruction.addHandleDependency((const uint64_t*)pPipelineCache, 1, (uint64_t)(uintptr_t)device);
    if (!pPipelineCache) return;
    auto apiHandle = mReconstruction.createApiInfo();
    auto apiInfo = mReconstruction.getApiInfo(apiHandle);
    mReconstruction.setApiTrace(apiInfo, OP_vkCreatePipelineCache, snapshotTraceBegin, snapshotTraceBytes);
    mReconstruction.forEachHandleAddApi((const uint64_t*)pPipelineCache, 1, apiHandle);
    mReconstruction.setCreatedHandlesForApi(apiHandle, (const uint64_t*)pPipelineCache, 1);
}
void vkDestroyPipelineCache(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkPipelineCache pipelineCache,
    const VkAllocationCallbacks* pAllocator)
{
    // TODO: Implement
    android::base::AutoLock lock(mLock);
    // pipelineCache destroy
    mReconstruction.removeHandles((const uint64_t*)(&pipelineCache), 1);
}
void vkGetPipelineCacheData(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkPipelineCache pipelineCache,
    size_t* pDataSize,
    void* pData)
{
    // TODO: Implement
}
void vkMergePipelineCaches(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkPipelineCache dstCache,
    uint32_t srcCacheCount,
    const VkPipelineCache* pSrcCaches)
{
    // TODO: Implement
}
void vkCreateGraphicsPipelines(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkPipelineCache pipelineCache,
    uint32_t createInfoCount,
    const VkGraphicsPipelineCreateInfo* pCreateInfos,
    const VkAllocationCallbacks* pAllocator,
    VkPipeline* pPipelines)
{
    // TODO: Implement
    android::base::AutoLock lock(mLock);
    // pPipelines create
    mReconstruction.addHandles((const uint64_t*)pPipelines, ((createInfoCount)));
    mReconstruction.addHandleDependency((const uint64_t*)pPipelines, ((createInfoCount)), (uint64_t)(uintptr_t)device);
    if (!pPipelines) return;
    auto apiHandle = mReconstruction.createApiInfo();
    auto apiInfo = mReconstruction.getApiInfo(apiHandle);
    mReconstruction.setApiTrace(apiInfo, OP_vkCreateGraphicsPipelines, snapshotTraceBegin, snapshotTraceBytes);
    mReconstruction.forEachHandleAddApi((const uint64_t*)pPipelines, ((createInfoCount)), apiHandle);
    mReconstruction.setCreatedHandlesForApi(apiHandle, (const uint64_t*)pPipelines, ((createInfoCount)));
}
void vkCreateComputePipelines(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkPipelineCache pipelineCache,
    uint32_t createInfoCount,
    const VkComputePipelineCreateInfo* pCreateInfos,
    const VkAllocationCallbacks* pAllocator,
    VkPipeline* pPipelines)
{
    // TODO: Implement
    android::base::AutoLock lock(mLock);
    // pPipelines create
    mReconstruction.addHandles((const uint64_t*)pPipelines, ((createInfoCount)));
    mReconstruction.addHandleDependency((const uint64_t*)pPipelines, ((createInfoCount)), (uint64_t)(uintptr_t)device);
    if (!pPipelines) return;
    auto apiHandle = mReconstruction.createApiInfo();
    auto apiInfo = mReconstruction.getApiInfo(apiHandle);
    mReconstruction.setApiTrace(apiInfo, OP_vkCreateComputePipelines, snapshotTraceBegin, snapshotTraceBytes);
    mReconstruction.forEachHandleAddApi((const uint64_t*)pPipelines, ((createInfoCount)), apiHandle);
    mReconstruction.setCreatedHandlesForApi(apiHandle, (const uint64_t*)pPipelines, ((createInfoCount)));
}
void vkDestroyPipeline(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkPipeline pipeline,
    const VkAllocationCallbacks* pAllocator)
{
    // TODO: Implement
    android::base::AutoLock lock(mLock);
    // pipeline destroy
    mReconstruction.removeHandles((const uint64_t*)(&pipeline), 1);
}
void vkCreatePipelineLayout(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkPipelineLayoutCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkPipelineLayout* pPipelineLayout)
{
    // TODO: Implement
    android::base::AutoLock lock(mLock);
    // pPipelineLayout create
    mReconstruction.addHandles((const uint64_t*)pPipelineLayout, 1);
    mReconstruction.addHandleDependency((const uint64_t*)pPipelineLayout, 1, (uint64_t)(uintptr_t)device);
    if (!pPipelineLayout) return;
    auto apiHandle = mReconstruction.createApiInfo();
    auto apiInfo = mReconstruction.getApiInfo(apiHandle);
    mReconstruction.setApiTrace(apiInfo, OP_vkCreatePipelineLayout, snapshotTraceBegin, snapshotTraceBytes);
    mReconstruction.forEachHandleAddApi((const uint64_t*)pPipelineLayout, 1, apiHandle);
    mReconstruction.setCreatedHandlesForApi(apiHandle, (const uint64_t*)pPipelineLayout, 1);
}
void vkDestroyPipelineLayout(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkPipelineLayout pipelineLayout,
    const VkAllocationCallbacks* pAllocator)
{
    // TODO: Implement
    android::base::AutoLock lock(mLock);
    // pipelineLayout destroy
    mReconstruction.removeHandles((const uint64_t*)(&pipelineLayout), 1);
}
void vkCreateSampler(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkSamplerCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSampler* pSampler)
{
    // TODO: Implement
    android::base::AutoLock lock(mLock);
    // pSampler create
    mReconstruction.addHandles((const uint64_t*)pSampler, 1);
    mReconstruction.addHandleDependency((const uint64_t*)pSampler, 1, (uint64_t)(uintptr_t)device);
    if (!pSampler) return;
    auto apiHandle = mReconstruction.createApiInfo();
    auto apiInfo = mReconstruction.getApiInfo(apiHandle);
    mReconstruction.setApiTrace(apiInfo, OP_vkCreateSampler, snapshotTraceBegin, snapshotTraceBytes);
    mReconstruction.forEachHandleAddApi((const uint64_t*)pSampler, 1, apiHandle);
    mReconstruction.setCreatedHandlesForApi(apiHandle, (const uint64_t*)pSampler, 1);
}
void vkDestroySampler(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkSampler sampler,
    const VkAllocationCallbacks* pAllocator)
{
    // TODO: Implement
    android::base::AutoLock lock(mLock);
    // sampler destroy
    mReconstruction.removeHandles((const uint64_t*)(&sampler), 1);
}
void vkCreateDescriptorSetLayout(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkDescriptorSetLayoutCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkDescriptorSetLayout* pSetLayout)
{
    // TODO: Implement
    android::base::AutoLock lock(mLock);
    // pSetLayout create
    mReconstruction.addHandles((const uint64_t*)pSetLayout, 1);
    mReconstruction.addHandleDependency((const uint64_t*)pSetLayout, 1, (uint64_t)(uintptr_t)device);
    if (!pSetLayout) return;
    auto apiHandle = mReconstruction.createApiInfo();
    auto apiInfo = mReconstruction.getApiInfo(apiHandle);
    mReconstruction.setApiTrace(apiInfo, OP_vkCreateDescriptorSetLayout, snapshotTraceBegin, snapshotTraceBytes);
    mReconstruction.forEachHandleAddApi((const uint64_t*)pSetLayout, 1, apiHandle);
    mReconstruction.setCreatedHandlesForApi(apiHandle, (const uint64_t*)pSetLayout, 1);
}
void vkDestroyDescriptorSetLayout(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkDescriptorSetLayout descriptorSetLayout,
    const VkAllocationCallbacks* pAllocator)
{
    // TODO: Implement
    android::base::AutoLock lock(mLock);
    // descriptorSetLayout destroy
    mReconstruction.removeHandles((const uint64_t*)(&descriptorSetLayout), 1);
}
void vkCreateDescriptorPool(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkDescriptorPoolCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkDescriptorPool* pDescriptorPool)
{
    // TODO: Implement
    android::base::AutoLock lock(mLock);
    // pDescriptorPool create
    mReconstruction.addHandles((const uint64_t*)pDescriptorPool, 1);
    mReconstruction.addHandleDependency((const uint64_t*)pDescriptorPool, 1, (uint64_t)(uintptr_t)device);
    if (!pDescriptorPool) return;
    auto apiHandle = mReconstruction.createApiInfo();
    auto apiInfo = mReconstruction.getApiInfo(apiHandle);
    mReconstruction.setApiTrace(apiInfo, OP_vkCreateDescriptorPool, snapshotTraceBegin, snapshotTraceBytes);
    mReconstruction.forEachHandleAddApi((const uint64_t*)pDescriptorPool, 1, apiHandle);
    mReconstruction.setCreatedHandlesForApi(apiHandle, (const uint64_t*)pDescriptorPool, 1);
}
void vkDestroyDescriptorPool(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkDescriptorPool descriptorPool,
    const VkAllocationCallbacks* pAllocator)
{
    // TODO: Implement
    android::base::AutoLock lock(mLock);
    // descriptorPool destroy
    mReconstruction.removeHandles((const uint64_t*)(&descriptorPool), 1);
}
void vkResetDescriptorPool(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkDescriptorPool descriptorPool,
    VkDescriptorPoolResetFlags flags)
{
    // TODO: Implement
}
void vkAllocateDescriptorSets(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkDescriptorSetAllocateInfo* pAllocateInfo,
    VkDescriptorSet* pDescriptorSets)
{
    // TODO: Implement
    android::base::AutoLock lock(mLock);
    // pDescriptorSets create
    mReconstruction.addHandles((const uint64_t*)pDescriptorSets, pAllocateInfo->descriptorSetCount);
    mReconstruction.addHandleDependency((const uint64_t*)pDescriptorSets, pAllocateInfo->descriptorSetCount, (uint64_t)(uintptr_t)device);
    if (!pDescriptorSets) return;
    auto apiHandle = mReconstruction.createApiInfo();
    auto apiInfo = mReconstruction.getApiInfo(apiHandle);
    mReconstruction.setApiTrace(apiInfo, OP_vkAllocateDescriptorSets, snapshotTraceBegin, snapshotTraceBytes);
    mReconstruction.forEachHandleAddApi((const uint64_t*)pDescriptorSets, pAllocateInfo->descriptorSetCount, apiHandle);
    mReconstruction.setCreatedHandlesForApi(apiHandle, (const uint64_t*)pDescriptorSets, pAllocateInfo->descriptorSetCount);
}
void vkFreeDescriptorSets(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkDescriptorPool descriptorPool,
    uint32_t descriptorSetCount,
    const VkDescriptorSet* pDescriptorSets)
{
    // TODO: Implement
    android::base::AutoLock lock(mLock);
    // pDescriptorSets destroy
    mReconstruction.removeHandles((const uint64_t*)pDescriptorSets, ((descriptorSetCount)));
}
void vkUpdateDescriptorSets(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    uint32_t descriptorWriteCount,
    const VkWriteDescriptorSet* pDescriptorWrites,
    uint32_t descriptorCopyCount,
    const VkCopyDescriptorSet* pDescriptorCopies)
{
    // TODO: Implement
}
void vkCreateFramebuffer(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkFramebufferCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkFramebuffer* pFramebuffer)
{
    // TODO: Implement
    android::base::AutoLock lock(mLock);
    // pFramebuffer create
    mReconstruction.addHandles((const uint64_t*)pFramebuffer, 1);
    mReconstruction.addHandleDependency((const uint64_t*)pFramebuffer, 1, (uint64_t)(uintptr_t)device);
    if (!pFramebuffer) return;
    auto apiHandle = mReconstruction.createApiInfo();
    auto apiInfo = mReconstruction.getApiInfo(apiHandle);
    mReconstruction.setApiTrace(apiInfo, OP_vkCreateFramebuffer, snapshotTraceBegin, snapshotTraceBytes);
    mReconstruction.forEachHandleAddApi((const uint64_t*)pFramebuffer, 1, apiHandle);
    mReconstruction.setCreatedHandlesForApi(apiHandle, (const uint64_t*)pFramebuffer, 1);
}
void vkDestroyFramebuffer(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkFramebuffer framebuffer,
    const VkAllocationCallbacks* pAllocator)
{
    // TODO: Implement
    android::base::AutoLock lock(mLock);
    // framebuffer destroy
    mReconstruction.removeHandles((const uint64_t*)(&framebuffer), 1);
}
void vkCreateRenderPass(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkRenderPassCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkRenderPass* pRenderPass)
{
    // TODO: Implement
    android::base::AutoLock lock(mLock);
    // pRenderPass create
    mReconstruction.addHandles((const uint64_t*)pRenderPass, 1);
    mReconstruction.addHandleDependency((const uint64_t*)pRenderPass, 1, (uint64_t)(uintptr_t)device);
    if (!pRenderPass) return;
    auto apiHandle = mReconstruction.createApiInfo();
    auto apiInfo = mReconstruction.getApiInfo(apiHandle);
    mReconstruction.setApiTrace(apiInfo, OP_vkCreateRenderPass, snapshotTraceBegin, snapshotTraceBytes);
    mReconstruction.forEachHandleAddApi((const uint64_t*)pRenderPass, 1, apiHandle);
    mReconstruction.setCreatedHandlesForApi(apiHandle, (const uint64_t*)pRenderPass, 1);
}
void vkDestroyRenderPass(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkRenderPass renderPass,
    const VkAllocationCallbacks* pAllocator)
{
    // TODO: Implement
    android::base::AutoLock lock(mLock);
    // renderPass destroy
    mReconstruction.removeHandles((const uint64_t*)(&renderPass), 1);
}
void vkGetRenderAreaGranularity(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkRenderPass renderPass,
    VkExtent2D* pGranularity)
{
    // TODO: Implement
}
void vkCreateCommandPool(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkCommandPoolCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkCommandPool* pCommandPool)
{
    // TODO: Implement
    android::base::AutoLock lock(mLock);
    // pCommandPool create
    mReconstruction.addHandles((const uint64_t*)pCommandPool, 1);
    mReconstruction.addHandleDependency((const uint64_t*)pCommandPool, 1, (uint64_t)(uintptr_t)device);
    if (!pCommandPool) return;
    auto apiHandle = mReconstruction.createApiInfo();
    auto apiInfo = mReconstruction.getApiInfo(apiHandle);
    mReconstruction.setApiTrace(apiInfo, OP_vkCreateCommandPool, snapshotTraceBegin, snapshotTraceBytes);
    mReconstruction.forEachHandleAddApi((const uint64_t*)pCommandPool, 1, apiHandle);
    mReconstruction.setCreatedHandlesForApi(apiHandle, (const uint64_t*)pCommandPool, 1);
}
void vkDestroyCommandPool(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkCommandPool commandPool,
    const VkAllocationCallbacks* pAllocator)
{
    // TODO: Implement
    android::base::AutoLock lock(mLock);
    // commandPool destroy
    mReconstruction.removeHandles((const uint64_t*)(&commandPool), 1);
}
void vkResetCommandPool(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkCommandPool commandPool,
    VkCommandPoolResetFlags flags)
{
    // TODO: Implement
}
void vkAllocateCommandBuffers(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkCommandBufferAllocateInfo* pAllocateInfo,
    VkCommandBuffer* pCommandBuffers)
{
    // TODO: Implement
    android::base::AutoLock lock(mLock);
    // pCommandBuffers create
    mReconstruction.addHandles((const uint64_t*)pCommandBuffers, pAllocateInfo->commandBufferCount);
    mReconstruction.addHandleDependency((const uint64_t*)pCommandBuffers, pAllocateInfo->commandBufferCount, (uint64_t)(uintptr_t)unboxed_to_boxed_non_dispatchable_VkCommandPool(pAllocateInfo->commandPool));
    if (!pCommandBuffers) return;
    auto apiHandle = mReconstruction.createApiInfo();
    auto apiInfo = mReconstruction.getApiInfo(apiHandle);
    mReconstruction.setApiTrace(apiInfo, OP_vkAllocateCommandBuffers, snapshotTraceBegin, snapshotTraceBytes);
    mReconstruction.forEachHandleAddApi((const uint64_t*)pCommandBuffers, pAllocateInfo->commandBufferCount, apiHandle);
    mReconstruction.setCreatedHandlesForApi(apiHandle, (const uint64_t*)pCommandBuffers, pAllocateInfo->commandBufferCount);
}
void vkFreeCommandBuffers(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkCommandPool commandPool,
    uint32_t commandBufferCount,
    const VkCommandBuffer* pCommandBuffers)
{
    // TODO: Implement
    android::base::AutoLock lock(mLock);
    // pCommandBuffers destroy
    mReconstruction.removeHandles((const uint64_t*)pCommandBuffers, ((commandBufferCount)));
}
void vkBeginCommandBuffer(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkCommandBuffer commandBuffer,
    const VkCommandBufferBeginInfo* pBeginInfo)
{
    // TODO: Implement
}
void vkEndCommandBuffer(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkCommandBuffer commandBuffer)
{
    // TODO: Implement
}
void vkResetCommandBuffer(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkCommandBuffer commandBuffer,
    VkCommandBufferResetFlags flags)
{
    // TODO: Implement
}
void vkCmdBindPipeline(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkPipelineBindPoint pipelineBindPoint,
    VkPipeline pipeline)
{
    // TODO: Implement
}
void vkCmdSetViewport(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    uint32_t firstViewport,
    uint32_t viewportCount,
    const VkViewport* pViewports)
{
    // TODO: Implement
}
void vkCmdSetScissor(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    uint32_t firstScissor,
    uint32_t scissorCount,
    const VkRect2D* pScissors)
{
    // TODO: Implement
}
void vkCmdSetLineWidth(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    float lineWidth)
{
    // TODO: Implement
}
void vkCmdSetDepthBias(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    float depthBiasConstantFactor,
    float depthBiasClamp,
    float depthBiasSlopeFactor)
{
    // TODO: Implement
}
void vkCmdSetBlendConstants(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    const float blendConstants[4])
{
    // TODO: Implement
}
void vkCmdSetDepthBounds(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    float minDepthBounds,
    float maxDepthBounds)
{
    // TODO: Implement
}
void vkCmdSetStencilCompareMask(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkStencilFaceFlags faceMask,
    uint32_t compareMask)
{
    // TODO: Implement
}
void vkCmdSetStencilWriteMask(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkStencilFaceFlags faceMask,
    uint32_t writeMask)
{
    // TODO: Implement
}
void vkCmdSetStencilReference(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkStencilFaceFlags faceMask,
    uint32_t reference)
{
    // TODO: Implement
}
void vkCmdBindDescriptorSets(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkPipelineBindPoint pipelineBindPoint,
    VkPipelineLayout layout,
    uint32_t firstSet,
    uint32_t descriptorSetCount,
    const VkDescriptorSet* pDescriptorSets,
    uint32_t dynamicOffsetCount,
    const uint32_t* pDynamicOffsets)
{
    // TODO: Implement
}
void vkCmdBindIndexBuffer(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkBuffer buffer,
    VkDeviceSize offset,
    VkIndexType indexType)
{
    // TODO: Implement
}
void vkCmdBindVertexBuffers(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    uint32_t firstBinding,
    uint32_t bindingCount,
    const VkBuffer* pBuffers,
    const VkDeviceSize* pOffsets)
{
    // TODO: Implement
}
void vkCmdDraw(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    uint32_t vertexCount,
    uint32_t instanceCount,
    uint32_t firstVertex,
    uint32_t firstInstance)
{
    // TODO: Implement
}
void vkCmdDrawIndexed(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    uint32_t indexCount,
    uint32_t instanceCount,
    uint32_t firstIndex,
    int32_t vertexOffset,
    uint32_t firstInstance)
{
    // TODO: Implement
}
void vkCmdDrawIndirect(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkBuffer buffer,
    VkDeviceSize offset,
    uint32_t drawCount,
    uint32_t stride)
{
    // TODO: Implement
}
void vkCmdDrawIndexedIndirect(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkBuffer buffer,
    VkDeviceSize offset,
    uint32_t drawCount,
    uint32_t stride)
{
    // TODO: Implement
}
void vkCmdDispatch(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    uint32_t groupCountX,
    uint32_t groupCountY,
    uint32_t groupCountZ)
{
    // TODO: Implement
}
void vkCmdDispatchIndirect(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkBuffer buffer,
    VkDeviceSize offset)
{
    // TODO: Implement
}
void vkCmdCopyBuffer(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkBuffer srcBuffer,
    VkBuffer dstBuffer,
    uint32_t regionCount,
    const VkBufferCopy* pRegions)
{
    // TODO: Implement
}
void vkCmdCopyImage(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkImage srcImage,
    VkImageLayout srcImageLayout,
    VkImage dstImage,
    VkImageLayout dstImageLayout,
    uint32_t regionCount,
    const VkImageCopy* pRegions)
{
    // TODO: Implement
}
void vkCmdBlitImage(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkImage srcImage,
    VkImageLayout srcImageLayout,
    VkImage dstImage,
    VkImageLayout dstImageLayout,
    uint32_t regionCount,
    const VkImageBlit* pRegions,
    VkFilter filter)
{
    // TODO: Implement
}
void vkCmdCopyBufferToImage(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkBuffer srcBuffer,
    VkImage dstImage,
    VkImageLayout dstImageLayout,
    uint32_t regionCount,
    const VkBufferImageCopy* pRegions)
{
    // TODO: Implement
}
void vkCmdCopyImageToBuffer(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkImage srcImage,
    VkImageLayout srcImageLayout,
    VkBuffer dstBuffer,
    uint32_t regionCount,
    const VkBufferImageCopy* pRegions)
{
    // TODO: Implement
}
void vkCmdUpdateBuffer(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkBuffer dstBuffer,
    VkDeviceSize dstOffset,
    VkDeviceSize dataSize,
    const void* pData)
{
    // TODO: Implement
}
void vkCmdFillBuffer(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkBuffer dstBuffer,
    VkDeviceSize dstOffset,
    VkDeviceSize size,
    uint32_t data)
{
    // TODO: Implement
}
void vkCmdClearColorImage(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkImage image,
    VkImageLayout imageLayout,
    const VkClearColorValue* pColor,
    uint32_t rangeCount,
    const VkImageSubresourceRange* pRanges)
{
    // TODO: Implement
}
void vkCmdClearDepthStencilImage(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkImage image,
    VkImageLayout imageLayout,
    const VkClearDepthStencilValue* pDepthStencil,
    uint32_t rangeCount,
    const VkImageSubresourceRange* pRanges)
{
    // TODO: Implement
}
void vkCmdClearAttachments(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    uint32_t attachmentCount,
    const VkClearAttachment* pAttachments,
    uint32_t rectCount,
    const VkClearRect* pRects)
{
    // TODO: Implement
}
void vkCmdResolveImage(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkImage srcImage,
    VkImageLayout srcImageLayout,
    VkImage dstImage,
    VkImageLayout dstImageLayout,
    uint32_t regionCount,
    const VkImageResolve* pRegions)
{
    // TODO: Implement
}
void vkCmdSetEvent(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkEvent event,
    VkPipelineStageFlags stageMask)
{
    // TODO: Implement
}
void vkCmdResetEvent(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkEvent event,
    VkPipelineStageFlags stageMask)
{
    // TODO: Implement
}
void vkCmdWaitEvents(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    uint32_t eventCount,
    const VkEvent* pEvents,
    VkPipelineStageFlags srcStageMask,
    VkPipelineStageFlags dstStageMask,
    uint32_t memoryBarrierCount,
    const VkMemoryBarrier* pMemoryBarriers,
    uint32_t bufferMemoryBarrierCount,
    const VkBufferMemoryBarrier* pBufferMemoryBarriers,
    uint32_t imageMemoryBarrierCount,
    const VkImageMemoryBarrier* pImageMemoryBarriers)
{
    // TODO: Implement
}
void vkCmdPipelineBarrier(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkPipelineStageFlags srcStageMask,
    VkPipelineStageFlags dstStageMask,
    VkDependencyFlags dependencyFlags,
    uint32_t memoryBarrierCount,
    const VkMemoryBarrier* pMemoryBarriers,
    uint32_t bufferMemoryBarrierCount,
    const VkBufferMemoryBarrier* pBufferMemoryBarriers,
    uint32_t imageMemoryBarrierCount,
    const VkImageMemoryBarrier* pImageMemoryBarriers)
{
    // TODO: Implement
}
void vkCmdBeginQuery(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkQueryPool queryPool,
    uint32_t query,
    VkQueryControlFlags flags)
{
    // TODO: Implement
}
void vkCmdEndQuery(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkQueryPool queryPool,
    uint32_t query)
{
    // TODO: Implement
}
void vkCmdResetQueryPool(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkQueryPool queryPool,
    uint32_t firstQuery,
    uint32_t queryCount)
{
    // TODO: Implement
}
void vkCmdWriteTimestamp(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkPipelineStageFlagBits pipelineStage,
    VkQueryPool queryPool,
    uint32_t query)
{
    // TODO: Implement
}
void vkCmdCopyQueryPoolResults(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkQueryPool queryPool,
    uint32_t firstQuery,
    uint32_t queryCount,
    VkBuffer dstBuffer,
    VkDeviceSize dstOffset,
    VkDeviceSize stride,
    VkQueryResultFlags flags)
{
    // TODO: Implement
}
void vkCmdPushConstants(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkPipelineLayout layout,
    VkShaderStageFlags stageFlags,
    uint32_t offset,
    uint32_t size,
    const void* pValues)
{
    // TODO: Implement
}
void vkCmdBeginRenderPass(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    const VkRenderPassBeginInfo* pRenderPassBegin,
    VkSubpassContents contents)
{
    // TODO: Implement
}
void vkCmdNextSubpass(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkSubpassContents contents)
{
    // TODO: Implement
}
void vkCmdEndRenderPass(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer)
{
    // TODO: Implement
}
void vkCmdExecuteCommands(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    uint32_t commandBufferCount,
    const VkCommandBuffer* pCommandBuffers)
{
    // TODO: Implement
}
#endif
#ifdef VK_VERSION_1_1
void vkEnumerateInstanceVersion(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    uint32_t* pApiVersion)
{
    // TODO: Implement
}
void vkBindBufferMemory2(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    uint32_t bindInfoCount,
    const VkBindBufferMemoryInfo* pBindInfos)
{
    // TODO: Implement
}
void vkBindImageMemory2(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    uint32_t bindInfoCount,
    const VkBindImageMemoryInfo* pBindInfos)
{
    // TODO: Implement
}
void vkGetDeviceGroupPeerMemoryFeatures(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    uint32_t heapIndex,
    uint32_t localDeviceIndex,
    uint32_t remoteDeviceIndex,
    VkPeerMemoryFeatureFlags* pPeerMemoryFeatures)
{
    // TODO: Implement
}
void vkCmdSetDeviceMask(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    uint32_t deviceMask)
{
    // TODO: Implement
}
void vkCmdDispatchBase(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    uint32_t baseGroupX,
    uint32_t baseGroupY,
    uint32_t baseGroupZ,
    uint32_t groupCountX,
    uint32_t groupCountY,
    uint32_t groupCountZ)
{
    // TODO: Implement
}
void vkEnumeratePhysicalDeviceGroups(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkInstance instance,
    uint32_t* pPhysicalDeviceGroupCount,
    VkPhysicalDeviceGroupProperties* pPhysicalDeviceGroupProperties)
{
    // TODO: Implement
}
void vkGetImageMemoryRequirements2(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    const VkImageMemoryRequirementsInfo2* pInfo,
    VkMemoryRequirements2* pMemoryRequirements)
{
    // TODO: Implement
}
void vkGetBufferMemoryRequirements2(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    const VkBufferMemoryRequirementsInfo2* pInfo,
    VkMemoryRequirements2* pMemoryRequirements)
{
    // TODO: Implement
}
void vkGetImageSparseMemoryRequirements2(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    const VkImageSparseMemoryRequirementsInfo2* pInfo,
    uint32_t* pSparseMemoryRequirementCount,
    VkSparseImageMemoryRequirements2* pSparseMemoryRequirements)
{
    // TODO: Implement
}
void vkGetPhysicalDeviceFeatures2(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkPhysicalDevice physicalDevice,
    VkPhysicalDeviceFeatures2* pFeatures)
{
    // TODO: Implement
}
void vkGetPhysicalDeviceProperties2(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkPhysicalDevice physicalDevice,
    VkPhysicalDeviceProperties2* pProperties)
{
    // TODO: Implement
}
void vkGetPhysicalDeviceFormatProperties2(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkPhysicalDevice physicalDevice,
    VkFormat format,
    VkFormatProperties2* pFormatProperties)
{
    // TODO: Implement
}
void vkGetPhysicalDeviceImageFormatProperties2(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    const VkPhysicalDeviceImageFormatInfo2* pImageFormatInfo,
    VkImageFormatProperties2* pImageFormatProperties)
{
    // TODO: Implement
}
void vkGetPhysicalDeviceQueueFamilyProperties2(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkPhysicalDevice physicalDevice,
    uint32_t* pQueueFamilyPropertyCount,
    VkQueueFamilyProperties2* pQueueFamilyProperties)
{
    // TODO: Implement
}
void vkGetPhysicalDeviceMemoryProperties2(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkPhysicalDevice physicalDevice,
    VkPhysicalDeviceMemoryProperties2* pMemoryProperties)
{
    // TODO: Implement
}
void vkGetPhysicalDeviceSparseImageFormatProperties2(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkPhysicalDevice physicalDevice,
    const VkPhysicalDeviceSparseImageFormatInfo2* pFormatInfo,
    uint32_t* pPropertyCount,
    VkSparseImageFormatProperties2* pProperties)
{
    // TODO: Implement
}
void vkTrimCommandPool(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkCommandPool commandPool,
    VkCommandPoolTrimFlags flags)
{
    // TODO: Implement
}
void vkGetDeviceQueue2(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    const VkDeviceQueueInfo2* pQueueInfo,
    VkQueue* pQueue)
{
    // TODO: Implement
}
void vkCreateSamplerYcbcrConversion(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkSamplerYcbcrConversionCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSamplerYcbcrConversion* pYcbcrConversion)
{
    // TODO: Implement
    android::base::AutoLock lock(mLock);
    // pYcbcrConversion create
    mReconstruction.addHandles((const uint64_t*)pYcbcrConversion, 1);
    mReconstruction.addHandleDependency((const uint64_t*)pYcbcrConversion, 1, (uint64_t)(uintptr_t)device);
    if (!pYcbcrConversion) return;
    auto apiHandle = mReconstruction.createApiInfo();
    auto apiInfo = mReconstruction.getApiInfo(apiHandle);
    mReconstruction.setApiTrace(apiInfo, OP_vkCreateSamplerYcbcrConversion, snapshotTraceBegin, snapshotTraceBytes);
    mReconstruction.forEachHandleAddApi((const uint64_t*)pYcbcrConversion, 1, apiHandle);
    mReconstruction.setCreatedHandlesForApi(apiHandle, (const uint64_t*)pYcbcrConversion, 1);
}
void vkDestroySamplerYcbcrConversion(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkSamplerYcbcrConversion ycbcrConversion,
    const VkAllocationCallbacks* pAllocator)
{
    // TODO: Implement
    android::base::AutoLock lock(mLock);
    // ycbcrConversion destroy
    mReconstruction.removeHandles((const uint64_t*)(&ycbcrConversion), 1);
}
void vkCreateDescriptorUpdateTemplate(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkDescriptorUpdateTemplateCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkDescriptorUpdateTemplate* pDescriptorUpdateTemplate)
{
    // TODO: Implement
    android::base::AutoLock lock(mLock);
    // pDescriptorUpdateTemplate create
    mReconstruction.addHandles((const uint64_t*)pDescriptorUpdateTemplate, 1);
    mReconstruction.addHandleDependency((const uint64_t*)pDescriptorUpdateTemplate, 1, (uint64_t)(uintptr_t)device);
    if (!pDescriptorUpdateTemplate) return;
    auto apiHandle = mReconstruction.createApiInfo();
    auto apiInfo = mReconstruction.getApiInfo(apiHandle);
    mReconstruction.setApiTrace(apiInfo, OP_vkCreateDescriptorUpdateTemplate, snapshotTraceBegin, snapshotTraceBytes);
    mReconstruction.forEachHandleAddApi((const uint64_t*)pDescriptorUpdateTemplate, 1, apiHandle);
    mReconstruction.setCreatedHandlesForApi(apiHandle, (const uint64_t*)pDescriptorUpdateTemplate, 1);
}
void vkDestroyDescriptorUpdateTemplate(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkDescriptorUpdateTemplate descriptorUpdateTemplate,
    const VkAllocationCallbacks* pAllocator)
{
    // TODO: Implement
    android::base::AutoLock lock(mLock);
    // descriptorUpdateTemplate destroy
    mReconstruction.removeHandles((const uint64_t*)(&descriptorUpdateTemplate), 1);
}
void vkUpdateDescriptorSetWithTemplate(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkDescriptorSet descriptorSet,
    VkDescriptorUpdateTemplate descriptorUpdateTemplate,
    const void* pData)
{
    // TODO: Implement
}
void vkGetPhysicalDeviceExternalBufferProperties(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkPhysicalDevice physicalDevice,
    const VkPhysicalDeviceExternalBufferInfo* pExternalBufferInfo,
    VkExternalBufferProperties* pExternalBufferProperties)
{
    // TODO: Implement
}
void vkGetPhysicalDeviceExternalFenceProperties(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkPhysicalDevice physicalDevice,
    const VkPhysicalDeviceExternalFenceInfo* pExternalFenceInfo,
    VkExternalFenceProperties* pExternalFenceProperties)
{
    // TODO: Implement
}
void vkGetPhysicalDeviceExternalSemaphoreProperties(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkPhysicalDevice physicalDevice,
    const VkPhysicalDeviceExternalSemaphoreInfo* pExternalSemaphoreInfo,
    VkExternalSemaphoreProperties* pExternalSemaphoreProperties)
{
    // TODO: Implement
}
void vkGetDescriptorSetLayoutSupport(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    const VkDescriptorSetLayoutCreateInfo* pCreateInfo,
    VkDescriptorSetLayoutSupport* pSupport)
{
    // TODO: Implement
}
#endif
#ifdef VK_VERSION_1_2
void vkCmdDrawIndirectCount(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkBuffer buffer,
    VkDeviceSize offset,
    VkBuffer countBuffer,
    VkDeviceSize countBufferOffset,
    uint32_t maxDrawCount,
    uint32_t stride)
{
    // TODO: Implement
}
void vkCmdDrawIndexedIndirectCount(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkBuffer buffer,
    VkDeviceSize offset,
    VkBuffer countBuffer,
    VkDeviceSize countBufferOffset,
    uint32_t maxDrawCount,
    uint32_t stride)
{
    // TODO: Implement
}
void vkCreateRenderPass2(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkRenderPassCreateInfo2* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkRenderPass* pRenderPass)
{
    // TODO: Implement
}
void vkCmdBeginRenderPass2(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    const VkRenderPassBeginInfo* pRenderPassBegin,
    const VkSubpassBeginInfo* pSubpassBeginInfo)
{
    // TODO: Implement
}
void vkCmdNextSubpass2(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    const VkSubpassBeginInfo* pSubpassBeginInfo,
    const VkSubpassEndInfo* pSubpassEndInfo)
{
    // TODO: Implement
}
void vkCmdEndRenderPass2(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    const VkSubpassEndInfo* pSubpassEndInfo)
{
    // TODO: Implement
}
void vkResetQueryPool(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkQueryPool queryPool,
    uint32_t firstQuery,
    uint32_t queryCount)
{
    // TODO: Implement
}
void vkGetSemaphoreCounterValue(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkSemaphore semaphore,
    uint64_t* pValue)
{
    // TODO: Implement
}
void vkWaitSemaphores(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkSemaphoreWaitInfo* pWaitInfo,
    uint64_t timeout)
{
    // TODO: Implement
}
void vkSignalSemaphore(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkSemaphoreSignalInfo* pSignalInfo)
{
    // TODO: Implement
}
void vkGetBufferDeviceAddress(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDeviceAddress input_result,
    VkDevice device,
    const VkBufferDeviceAddressInfo* pInfo)
{
    // TODO: Implement
}
void vkGetBufferOpaqueCaptureAddress(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    uint64_t input_result,
    VkDevice device,
    const VkBufferDeviceAddressInfo* pInfo)
{
    // TODO: Implement
}
void vkGetDeviceMemoryOpaqueCaptureAddress(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    uint64_t input_result,
    VkDevice device,
    const VkDeviceMemoryOpaqueCaptureAddressInfo* pInfo)
{
    // TODO: Implement
}
#endif
#ifdef VK_KHR_surface
void vkDestroySurfaceKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkInstance instance,
    VkSurfaceKHR surface,
    const VkAllocationCallbacks* pAllocator)
{
    // TODO: Implement
    android::base::AutoLock lock(mLock);
    // surface destroy
    mReconstruction.removeHandles((const uint64_t*)(&surface), 1);
}
void vkGetPhysicalDeviceSurfaceSupportKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    uint32_t queueFamilyIndex,
    VkSurfaceKHR surface,
    VkBool32* pSupported)
{
    // TODO: Implement
}
void vkGetPhysicalDeviceSurfaceCapabilitiesKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    VkSurfaceKHR surface,
    VkSurfaceCapabilitiesKHR* pSurfaceCapabilities)
{
    // TODO: Implement
}
void vkGetPhysicalDeviceSurfaceFormatsKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    VkSurfaceKHR surface,
    uint32_t* pSurfaceFormatCount,
    VkSurfaceFormatKHR* pSurfaceFormats)
{
    // TODO: Implement
}
void vkGetPhysicalDeviceSurfacePresentModesKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    VkSurfaceKHR surface,
    uint32_t* pPresentModeCount,
    VkPresentModeKHR* pPresentModes)
{
    // TODO: Implement
}
#endif
#ifdef VK_KHR_swapchain
void vkCreateSwapchainKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkSwapchainCreateInfoKHR* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSwapchainKHR* pSwapchain)
{
    // TODO: Implement
    android::base::AutoLock lock(mLock);
    // pSwapchain create
    mReconstruction.addHandles((const uint64_t*)pSwapchain, 1);
    mReconstruction.addHandleDependency((const uint64_t*)pSwapchain, 1, (uint64_t)(uintptr_t)device);
    if (!pSwapchain) return;
    auto apiHandle = mReconstruction.createApiInfo();
    auto apiInfo = mReconstruction.getApiInfo(apiHandle);
    mReconstruction.setApiTrace(apiInfo, OP_vkCreateSwapchainKHR, snapshotTraceBegin, snapshotTraceBytes);
    mReconstruction.forEachHandleAddApi((const uint64_t*)pSwapchain, 1, apiHandle);
    mReconstruction.setCreatedHandlesForApi(apiHandle, (const uint64_t*)pSwapchain, 1);
}
void vkDestroySwapchainKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkSwapchainKHR swapchain,
    const VkAllocationCallbacks* pAllocator)
{
    // TODO: Implement
    android::base::AutoLock lock(mLock);
    // swapchain destroy
    mReconstruction.removeHandles((const uint64_t*)(&swapchain), 1);
}
void vkGetSwapchainImagesKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkSwapchainKHR swapchain,
    uint32_t* pSwapchainImageCount,
    VkImage* pSwapchainImages)
{
    // TODO: Implement
}
void vkAcquireNextImageKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkSwapchainKHR swapchain,
    uint64_t timeout,
    VkSemaphore semaphore,
    VkFence fence,
    uint32_t* pImageIndex)
{
    // TODO: Implement
}
void vkQueuePresentKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkQueue queue,
    const VkPresentInfoKHR* pPresentInfo)
{
    // TODO: Implement
}
void vkGetDeviceGroupPresentCapabilitiesKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkDeviceGroupPresentCapabilitiesKHR* pDeviceGroupPresentCapabilities)
{
    // TODO: Implement
}
void vkGetDeviceGroupSurfacePresentModesKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkSurfaceKHR surface,
    VkDeviceGroupPresentModeFlagsKHR* pModes)
{
    // TODO: Implement
}
void vkGetPhysicalDevicePresentRectanglesKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    VkSurfaceKHR surface,
    uint32_t* pRectCount,
    VkRect2D* pRects)
{
    // TODO: Implement
}
void vkAcquireNextImage2KHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkAcquireNextImageInfoKHR* pAcquireInfo,
    uint32_t* pImageIndex)
{
    // TODO: Implement
}
#endif
#ifdef VK_KHR_display
void vkGetPhysicalDeviceDisplayPropertiesKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    uint32_t* pPropertyCount,
    VkDisplayPropertiesKHR* pProperties)
{
    // TODO: Implement
}
void vkGetPhysicalDeviceDisplayPlanePropertiesKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    uint32_t* pPropertyCount,
    VkDisplayPlanePropertiesKHR* pProperties)
{
    // TODO: Implement
}
void vkGetDisplayPlaneSupportedDisplaysKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    uint32_t planeIndex,
    uint32_t* pDisplayCount,
    VkDisplayKHR* pDisplays)
{
    // TODO: Implement
}
void vkGetDisplayModePropertiesKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    VkDisplayKHR display,
    uint32_t* pPropertyCount,
    VkDisplayModePropertiesKHR* pProperties)
{
    // TODO: Implement
}
void vkCreateDisplayModeKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    VkDisplayKHR display,
    const VkDisplayModeCreateInfoKHR* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkDisplayModeKHR* pMode)
{
    // TODO: Implement
    android::base::AutoLock lock(mLock);
    // pMode create
    mReconstruction.addHandles((const uint64_t*)pMode, 1);
    if (!pMode) return;
    auto apiHandle = mReconstruction.createApiInfo();
    auto apiInfo = mReconstruction.getApiInfo(apiHandle);
    mReconstruction.setApiTrace(apiInfo, OP_vkCreateDisplayModeKHR, snapshotTraceBegin, snapshotTraceBytes);
    mReconstruction.forEachHandleAddApi((const uint64_t*)pMode, 1, apiHandle);
    mReconstruction.setCreatedHandlesForApi(apiHandle, (const uint64_t*)pMode, 1);
}
void vkGetDisplayPlaneCapabilitiesKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    VkDisplayModeKHR mode,
    uint32_t planeIndex,
    VkDisplayPlaneCapabilitiesKHR* pCapabilities)
{
    // TODO: Implement
}
void vkCreateDisplayPlaneSurfaceKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkInstance instance,
    const VkDisplaySurfaceCreateInfoKHR* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSurfaceKHR* pSurface)
{
    // TODO: Implement
}
#endif
#ifdef VK_KHR_display_swapchain
void vkCreateSharedSwapchainsKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    uint32_t swapchainCount,
    const VkSwapchainCreateInfoKHR* pCreateInfos,
    const VkAllocationCallbacks* pAllocator,
    VkSwapchainKHR* pSwapchains)
{
    // TODO: Implement
}
#endif
#ifdef VK_KHR_xlib_surface
void vkCreateXlibSurfaceKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkInstance instance,
    const VkXlibSurfaceCreateInfoKHR* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSurfaceKHR* pSurface)
{
    // TODO: Implement
}
void vkGetPhysicalDeviceXlibPresentationSupportKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkBool32 input_result,
    VkPhysicalDevice physicalDevice,
    uint32_t queueFamilyIndex,
    Display* dpy,
    VisualID visualID)
{
    // TODO: Implement
}
#endif
#ifdef VK_KHR_xcb_surface
void vkCreateXcbSurfaceKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkInstance instance,
    const VkXcbSurfaceCreateInfoKHR* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSurfaceKHR* pSurface)
{
    // TODO: Implement
}
void vkGetPhysicalDeviceXcbPresentationSupportKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkBool32 input_result,
    VkPhysicalDevice physicalDevice,
    uint32_t queueFamilyIndex,
    xcb_connection_t* connection,
    xcb_visualid_t visual_id)
{
    // TODO: Implement
}
#endif
#ifdef VK_KHR_wayland_surface
void vkCreateWaylandSurfaceKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkInstance instance,
    const VkWaylandSurfaceCreateInfoKHR* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSurfaceKHR* pSurface)
{
    // TODO: Implement
}
void vkGetPhysicalDeviceWaylandPresentationSupportKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkBool32 input_result,
    VkPhysicalDevice physicalDevice,
    uint32_t queueFamilyIndex,
    wl_display* display)
{
    // TODO: Implement
}
#endif
#ifdef VK_KHR_android_surface
void vkCreateAndroidSurfaceKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkInstance instance,
    const VkAndroidSurfaceCreateInfoKHR* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSurfaceKHR* pSurface)
{
    // TODO: Implement
}
#endif
#ifdef VK_KHR_win32_surface
void vkCreateWin32SurfaceKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkInstance instance,
    const VkWin32SurfaceCreateInfoKHR* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSurfaceKHR* pSurface)
{
    // TODO: Implement
}
void vkGetPhysicalDeviceWin32PresentationSupportKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkBool32 input_result,
    VkPhysicalDevice physicalDevice,
    uint32_t queueFamilyIndex)
{
    // TODO: Implement
}
#endif
#ifdef VK_KHR_sampler_mirror_clamp_to_edge
#endif
#ifdef VK_KHR_video_queue
void vkGetPhysicalDeviceVideoCapabilitiesKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    const VkVideoProfileKHR* pVideoProfile,
    VkVideoCapabilitiesKHR* pCapabilities)
{
    // TODO: Implement
}
void vkGetPhysicalDeviceVideoFormatPropertiesKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    const VkPhysicalDeviceVideoFormatInfoKHR* pVideoFormatInfo,
    uint32_t* pVideoFormatPropertyCount,
    VkVideoFormatPropertiesKHR* pVideoFormatProperties)
{
    // TODO: Implement
}
void vkCreateVideoSessionKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkVideoSessionCreateInfoKHR* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkVideoSessionKHR* pVideoSession)
{
    // TODO: Implement
}
void vkDestroyVideoSessionKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkVideoSessionKHR videoSession,
    const VkAllocationCallbacks* pAllocator)
{
    // TODO: Implement
}
void vkGetVideoSessionMemoryRequirementsKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkVideoSessionKHR videoSession,
    uint32_t* pVideoSessionMemoryRequirementsCount,
    VkVideoGetMemoryPropertiesKHR* pVideoSessionMemoryRequirements)
{
    // TODO: Implement
}
void vkBindVideoSessionMemoryKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkVideoSessionKHR videoSession,
    uint32_t videoSessionBindMemoryCount,
    const VkVideoBindMemoryKHR* pVideoSessionBindMemories)
{
    // TODO: Implement
}
void vkCreateVideoSessionParametersKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkVideoSessionParametersCreateInfoKHR* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkVideoSessionParametersKHR* pVideoSessionParameters)
{
    // TODO: Implement
}
void vkUpdateVideoSessionParametersKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkVideoSessionParametersKHR videoSessionParameters,
    const VkVideoSessionParametersUpdateInfoKHR* pUpdateInfo)
{
    // TODO: Implement
}
void vkDestroyVideoSessionParametersKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkVideoSessionParametersKHR videoSessionParameters,
    const VkAllocationCallbacks* pAllocator)
{
    // TODO: Implement
}
void vkCmdBeginVideoCodingKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    const VkVideoBeginCodingInfoKHR* pBeginInfo)
{
    // TODO: Implement
}
void vkCmdEndVideoCodingKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    const VkVideoEndCodingInfoKHR* pEndCodingInfo)
{
    // TODO: Implement
}
void vkCmdControlVideoCodingKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    const VkVideoCodingControlInfoKHR* pCodingControlInfo)
{
    // TODO: Implement
}
#endif
#ifdef VK_KHR_video_decode_queue
void vkCmdDecodeVideoKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    const VkVideoDecodeInfoKHR* pFrameInfo)
{
    // TODO: Implement
}
#endif
#ifdef VK_KHR_dynamic_rendering
void vkCmdBeginRenderingKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    const VkRenderingInfoKHR* pRenderingInfo)
{
    // TODO: Implement
}
void vkCmdEndRenderingKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer)
{
    // TODO: Implement
}
#endif
#ifdef VK_KHR_multiview
#endif
#ifdef VK_KHR_get_physical_device_properties2
void vkGetPhysicalDeviceFeatures2KHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkPhysicalDevice physicalDevice,
    VkPhysicalDeviceFeatures2* pFeatures)
{
    // TODO: Implement
}
void vkGetPhysicalDeviceProperties2KHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkPhysicalDevice physicalDevice,
    VkPhysicalDeviceProperties2* pProperties)
{
    // TODO: Implement
}
void vkGetPhysicalDeviceFormatProperties2KHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkPhysicalDevice physicalDevice,
    VkFormat format,
    VkFormatProperties2* pFormatProperties)
{
    // TODO: Implement
}
void vkGetPhysicalDeviceImageFormatProperties2KHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    const VkPhysicalDeviceImageFormatInfo2* pImageFormatInfo,
    VkImageFormatProperties2* pImageFormatProperties)
{
    // TODO: Implement
}
void vkGetPhysicalDeviceQueueFamilyProperties2KHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkPhysicalDevice physicalDevice,
    uint32_t* pQueueFamilyPropertyCount,
    VkQueueFamilyProperties2* pQueueFamilyProperties)
{
    // TODO: Implement
}
void vkGetPhysicalDeviceMemoryProperties2KHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkPhysicalDevice physicalDevice,
    VkPhysicalDeviceMemoryProperties2* pMemoryProperties)
{
    // TODO: Implement
}
void vkGetPhysicalDeviceSparseImageFormatProperties2KHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkPhysicalDevice physicalDevice,
    const VkPhysicalDeviceSparseImageFormatInfo2* pFormatInfo,
    uint32_t* pPropertyCount,
    VkSparseImageFormatProperties2* pProperties)
{
    // TODO: Implement
}
#endif
#ifdef VK_KHR_device_group
void vkGetDeviceGroupPeerMemoryFeaturesKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    uint32_t heapIndex,
    uint32_t localDeviceIndex,
    uint32_t remoteDeviceIndex,
    VkPeerMemoryFeatureFlags* pPeerMemoryFeatures)
{
    // TODO: Implement
}
void vkCmdSetDeviceMaskKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    uint32_t deviceMask)
{
    // TODO: Implement
}
void vkCmdDispatchBaseKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    uint32_t baseGroupX,
    uint32_t baseGroupY,
    uint32_t baseGroupZ,
    uint32_t groupCountX,
    uint32_t groupCountY,
    uint32_t groupCountZ)
{
    // TODO: Implement
}
#endif
#ifdef VK_KHR_shader_draw_parameters
#endif
#ifdef VK_KHR_maintenance1
void vkTrimCommandPoolKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkCommandPool commandPool,
    VkCommandPoolTrimFlags flags)
{
    // TODO: Implement
}
#endif
#ifdef VK_KHR_device_group_creation
void vkEnumeratePhysicalDeviceGroupsKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkInstance instance,
    uint32_t* pPhysicalDeviceGroupCount,
    VkPhysicalDeviceGroupProperties* pPhysicalDeviceGroupProperties)
{
    // TODO: Implement
}
#endif
#ifdef VK_KHR_external_memory_capabilities
void vkGetPhysicalDeviceExternalBufferPropertiesKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkPhysicalDevice physicalDevice,
    const VkPhysicalDeviceExternalBufferInfo* pExternalBufferInfo,
    VkExternalBufferProperties* pExternalBufferProperties)
{
    // TODO: Implement
}
#endif
#ifdef VK_KHR_external_memory
#endif
#ifdef VK_KHR_external_memory_win32
void vkGetMemoryWin32HandleKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkMemoryGetWin32HandleInfoKHR* pGetWin32HandleInfo,
    HANDLE* pHandle)
{
    // TODO: Implement
}
void vkGetMemoryWin32HandlePropertiesKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkExternalMemoryHandleTypeFlagBits handleType,
    HANDLE handle,
    VkMemoryWin32HandlePropertiesKHR* pMemoryWin32HandleProperties)
{
    // TODO: Implement
}
#endif
#ifdef VK_KHR_external_memory_fd
void vkGetMemoryFdKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkMemoryGetFdInfoKHR* pGetFdInfo,
    int* pFd)
{
    // TODO: Implement
}
void vkGetMemoryFdPropertiesKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkExternalMemoryHandleTypeFlagBits handleType,
    int fd,
    VkMemoryFdPropertiesKHR* pMemoryFdProperties)
{
    // TODO: Implement
}
#endif
#ifdef VK_KHR_win32_keyed_mutex
#endif
#ifdef VK_KHR_external_semaphore_capabilities
void vkGetPhysicalDeviceExternalSemaphorePropertiesKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkPhysicalDevice physicalDevice,
    const VkPhysicalDeviceExternalSemaphoreInfo* pExternalSemaphoreInfo,
    VkExternalSemaphoreProperties* pExternalSemaphoreProperties)
{
    // TODO: Implement
}
#endif
#ifdef VK_KHR_external_semaphore
#endif
#ifdef VK_KHR_external_semaphore_win32
void vkImportSemaphoreWin32HandleKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkImportSemaphoreWin32HandleInfoKHR* pImportSemaphoreWin32HandleInfo)
{
    // TODO: Implement
}
void vkGetSemaphoreWin32HandleKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkSemaphoreGetWin32HandleInfoKHR* pGetWin32HandleInfo,
    HANDLE* pHandle)
{
    // TODO: Implement
}
#endif
#ifdef VK_KHR_external_semaphore_fd
void vkImportSemaphoreFdKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkImportSemaphoreFdInfoKHR* pImportSemaphoreFdInfo)
{
    // TODO: Implement
}
void vkGetSemaphoreFdKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkSemaphoreGetFdInfoKHR* pGetFdInfo,
    int* pFd)
{
    // TODO: Implement
}
#endif
#ifdef VK_KHR_push_descriptor
void vkCmdPushDescriptorSetKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkPipelineBindPoint pipelineBindPoint,
    VkPipelineLayout layout,
    uint32_t set,
    uint32_t descriptorWriteCount,
    const VkWriteDescriptorSet* pDescriptorWrites)
{
    // TODO: Implement
}
void vkCmdPushDescriptorSetWithTemplateKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkDescriptorUpdateTemplate descriptorUpdateTemplate,
    VkPipelineLayout layout,
    uint32_t set,
    const void* pData)
{
    // TODO: Implement
}
#endif
#ifdef VK_KHR_shader_float16_int8
#endif
#ifdef VK_KHR_16bit_storage
#endif
#ifdef VK_KHR_incremental_present
#endif
#ifdef VK_KHR_descriptor_update_template
void vkCreateDescriptorUpdateTemplateKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkDescriptorUpdateTemplateCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkDescriptorUpdateTemplate* pDescriptorUpdateTemplate)
{
    // TODO: Implement
    android::base::AutoLock lock(mLock);
    // pDescriptorUpdateTemplate create
    mReconstruction.addHandles((const uint64_t*)pDescriptorUpdateTemplate, 1);
    mReconstruction.addHandleDependency((const uint64_t*)pDescriptorUpdateTemplate, 1, (uint64_t)(uintptr_t)device);
    if (!pDescriptorUpdateTemplate) return;
    auto apiHandle = mReconstruction.createApiInfo();
    auto apiInfo = mReconstruction.getApiInfo(apiHandle);
    mReconstruction.setApiTrace(apiInfo, OP_vkCreateDescriptorUpdateTemplateKHR, snapshotTraceBegin, snapshotTraceBytes);
    mReconstruction.forEachHandleAddApi((const uint64_t*)pDescriptorUpdateTemplate, 1, apiHandle);
    mReconstruction.setCreatedHandlesForApi(apiHandle, (const uint64_t*)pDescriptorUpdateTemplate, 1);
}
void vkDestroyDescriptorUpdateTemplateKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkDescriptorUpdateTemplate descriptorUpdateTemplate,
    const VkAllocationCallbacks* pAllocator)
{
    // TODO: Implement
    android::base::AutoLock lock(mLock);
    // descriptorUpdateTemplate destroy
    mReconstruction.removeHandles((const uint64_t*)(&descriptorUpdateTemplate), 1);
}
void vkUpdateDescriptorSetWithTemplateKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkDescriptorSet descriptorSet,
    VkDescriptorUpdateTemplate descriptorUpdateTemplate,
    const void* pData)
{
    // TODO: Implement
}
#endif
#ifdef VK_KHR_imageless_framebuffer
#endif
#ifdef VK_KHR_create_renderpass2
void vkCreateRenderPass2KHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkRenderPassCreateInfo2* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkRenderPass* pRenderPass)
{
    // TODO: Implement
}
void vkCmdBeginRenderPass2KHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    const VkRenderPassBeginInfo* pRenderPassBegin,
    const VkSubpassBeginInfo* pSubpassBeginInfo)
{
    // TODO: Implement
}
void vkCmdNextSubpass2KHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    const VkSubpassBeginInfo* pSubpassBeginInfo,
    const VkSubpassEndInfo* pSubpassEndInfo)
{
    // TODO: Implement
}
void vkCmdEndRenderPass2KHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    const VkSubpassEndInfo* pSubpassEndInfo)
{
    // TODO: Implement
}
#endif
#ifdef VK_KHR_shared_presentable_image
void vkGetSwapchainStatusKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkSwapchainKHR swapchain)
{
    // TODO: Implement
}
#endif
#ifdef VK_KHR_external_fence_capabilities
void vkGetPhysicalDeviceExternalFencePropertiesKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkPhysicalDevice physicalDevice,
    const VkPhysicalDeviceExternalFenceInfo* pExternalFenceInfo,
    VkExternalFenceProperties* pExternalFenceProperties)
{
    // TODO: Implement
}
#endif
#ifdef VK_KHR_external_fence
#endif
#ifdef VK_KHR_external_fence_win32
void vkImportFenceWin32HandleKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkImportFenceWin32HandleInfoKHR* pImportFenceWin32HandleInfo)
{
    // TODO: Implement
}
void vkGetFenceWin32HandleKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkFenceGetWin32HandleInfoKHR* pGetWin32HandleInfo,
    HANDLE* pHandle)
{
    // TODO: Implement
}
#endif
#ifdef VK_KHR_external_fence_fd
void vkImportFenceFdKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkImportFenceFdInfoKHR* pImportFenceFdInfo)
{
    // TODO: Implement
}
void vkGetFenceFdKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkFenceGetFdInfoKHR* pGetFdInfo,
    int* pFd)
{
    // TODO: Implement
}
#endif
#ifdef VK_KHR_performance_query
void vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    uint32_t queueFamilyIndex,
    uint32_t* pCounterCount,
    VkPerformanceCounterKHR* pCounters,
    VkPerformanceCounterDescriptionKHR* pCounterDescriptions)
{
    // TODO: Implement
}
void vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkPhysicalDevice physicalDevice,
    const VkQueryPoolPerformanceCreateInfoKHR* pPerformanceQueryCreateInfo,
    uint32_t* pNumPasses)
{
    // TODO: Implement
}
void vkAcquireProfilingLockKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkAcquireProfilingLockInfoKHR* pInfo)
{
    // TODO: Implement
}
void vkReleaseProfilingLockKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device)
{
    // TODO: Implement
}
#endif
#ifdef VK_KHR_maintenance2
#endif
#ifdef VK_KHR_get_surface_capabilities2
void vkGetPhysicalDeviceSurfaceCapabilities2KHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    const VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo,
    VkSurfaceCapabilities2KHR* pSurfaceCapabilities)
{
    // TODO: Implement
}
void vkGetPhysicalDeviceSurfaceFormats2KHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    const VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo,
    uint32_t* pSurfaceFormatCount,
    VkSurfaceFormat2KHR* pSurfaceFormats)
{
    // TODO: Implement
}
#endif
#ifdef VK_KHR_variable_pointers
#endif
#ifdef VK_KHR_get_display_properties2
void vkGetPhysicalDeviceDisplayProperties2KHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    uint32_t* pPropertyCount,
    VkDisplayProperties2KHR* pProperties)
{
    // TODO: Implement
}
void vkGetPhysicalDeviceDisplayPlaneProperties2KHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    uint32_t* pPropertyCount,
    VkDisplayPlaneProperties2KHR* pProperties)
{
    // TODO: Implement
}
void vkGetDisplayModeProperties2KHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    VkDisplayKHR display,
    uint32_t* pPropertyCount,
    VkDisplayModeProperties2KHR* pProperties)
{
    // TODO: Implement
}
void vkGetDisplayPlaneCapabilities2KHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    const VkDisplayPlaneInfo2KHR* pDisplayPlaneInfo,
    VkDisplayPlaneCapabilities2KHR* pCapabilities)
{
    // TODO: Implement
}
#endif
#ifdef VK_KHR_dedicated_allocation
#endif
#ifdef VK_KHR_storage_buffer_storage_class
#endif
#ifdef VK_KHR_relaxed_block_layout
#endif
#ifdef VK_KHR_get_memory_requirements2
void vkGetImageMemoryRequirements2KHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    const VkImageMemoryRequirementsInfo2* pInfo,
    VkMemoryRequirements2* pMemoryRequirements)
{
    // TODO: Implement
}
void vkGetBufferMemoryRequirements2KHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    const VkBufferMemoryRequirementsInfo2* pInfo,
    VkMemoryRequirements2* pMemoryRequirements)
{
    // TODO: Implement
}
void vkGetImageSparseMemoryRequirements2KHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    const VkImageSparseMemoryRequirementsInfo2* pInfo,
    uint32_t* pSparseMemoryRequirementCount,
    VkSparseImageMemoryRequirements2* pSparseMemoryRequirements)
{
    // TODO: Implement
}
#endif
#ifdef VK_KHR_image_format_list
#endif
#ifdef VK_KHR_sampler_ycbcr_conversion
void vkCreateSamplerYcbcrConversionKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkSamplerYcbcrConversionCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSamplerYcbcrConversion* pYcbcrConversion)
{
    // TODO: Implement
    android::base::AutoLock lock(mLock);
    // pYcbcrConversion create
    mReconstruction.addHandles((const uint64_t*)pYcbcrConversion, 1);
    mReconstruction.addHandleDependency((const uint64_t*)pYcbcrConversion, 1, (uint64_t)(uintptr_t)device);
    if (!pYcbcrConversion) return;
    auto apiHandle = mReconstruction.createApiInfo();
    auto apiInfo = mReconstruction.getApiInfo(apiHandle);
    mReconstruction.setApiTrace(apiInfo, OP_vkCreateSamplerYcbcrConversionKHR, snapshotTraceBegin, snapshotTraceBytes);
    mReconstruction.forEachHandleAddApi((const uint64_t*)pYcbcrConversion, 1, apiHandle);
    mReconstruction.setCreatedHandlesForApi(apiHandle, (const uint64_t*)pYcbcrConversion, 1);
}
void vkDestroySamplerYcbcrConversionKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkSamplerYcbcrConversion ycbcrConversion,
    const VkAllocationCallbacks* pAllocator)
{
    // TODO: Implement
    android::base::AutoLock lock(mLock);
    // ycbcrConversion destroy
    mReconstruction.removeHandles((const uint64_t*)(&ycbcrConversion), 1);
}
#endif
#ifdef VK_KHR_bind_memory2
void vkBindBufferMemory2KHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    uint32_t bindInfoCount,
    const VkBindBufferMemoryInfo* pBindInfos)
{
    // TODO: Implement
}
void vkBindImageMemory2KHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    uint32_t bindInfoCount,
    const VkBindImageMemoryInfo* pBindInfos)
{
    // TODO: Implement
}
#endif
#ifdef VK_KHR_portability_subset
#endif
#ifdef VK_KHR_maintenance3
void vkGetDescriptorSetLayoutSupportKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    const VkDescriptorSetLayoutCreateInfo* pCreateInfo,
    VkDescriptorSetLayoutSupport* pSupport)
{
    // TODO: Implement
}
#endif
#ifdef VK_KHR_draw_indirect_count
void vkCmdDrawIndirectCountKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkBuffer buffer,
    VkDeviceSize offset,
    VkBuffer countBuffer,
    VkDeviceSize countBufferOffset,
    uint32_t maxDrawCount,
    uint32_t stride)
{
    // TODO: Implement
}
void vkCmdDrawIndexedIndirectCountKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkBuffer buffer,
    VkDeviceSize offset,
    VkBuffer countBuffer,
    VkDeviceSize countBufferOffset,
    uint32_t maxDrawCount,
    uint32_t stride)
{
    // TODO: Implement
}
#endif
#ifdef VK_KHR_shader_subgroup_extended_types
#endif
#ifdef VK_KHR_8bit_storage
#endif
#ifdef VK_KHR_shader_atomic_int64
#endif
#ifdef VK_KHR_shader_clock
#endif
#ifdef VK_KHR_driver_properties
#endif
#ifdef VK_KHR_shader_float_controls
#endif
#ifdef VK_KHR_depth_stencil_resolve
#endif
#ifdef VK_KHR_swapchain_mutable_format
#endif
#ifdef VK_KHR_timeline_semaphore
void vkGetSemaphoreCounterValueKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkSemaphore semaphore,
    uint64_t* pValue)
{
    // TODO: Implement
}
void vkWaitSemaphoresKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkSemaphoreWaitInfo* pWaitInfo,
    uint64_t timeout)
{
    // TODO: Implement
}
void vkSignalSemaphoreKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkSemaphoreSignalInfo* pSignalInfo)
{
    // TODO: Implement
}
#endif
#ifdef VK_KHR_vulkan_memory_model
#endif
#ifdef VK_KHR_shader_terminate_invocation
#endif
#ifdef VK_KHR_fragment_shading_rate
void vkGetPhysicalDeviceFragmentShadingRatesKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    uint32_t* pFragmentShadingRateCount,
    VkPhysicalDeviceFragmentShadingRateKHR* pFragmentShadingRates)
{
    // TODO: Implement
}
void vkCmdSetFragmentShadingRateKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    const VkExtent2D* pFragmentSize,
    const VkFragmentShadingRateCombinerOpKHR combinerOps[2])
{
    // TODO: Implement
}
#endif
#ifdef VK_KHR_spirv_1_4
#endif
#ifdef VK_KHR_surface_protected_capabilities
#endif
#ifdef VK_KHR_separate_depth_stencil_layouts
#endif
#ifdef VK_KHR_present_wait
void vkWaitForPresentKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkSwapchainKHR swapchain,
    uint64_t presentId,
    uint64_t timeout)
{
    // TODO: Implement
}
#endif
#ifdef VK_KHR_uniform_buffer_standard_layout
#endif
#ifdef VK_KHR_buffer_device_address
void vkGetBufferDeviceAddressKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDeviceAddress input_result,
    VkDevice device,
    const VkBufferDeviceAddressInfo* pInfo)
{
    // TODO: Implement
}
void vkGetBufferOpaqueCaptureAddressKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    uint64_t input_result,
    VkDevice device,
    const VkBufferDeviceAddressInfo* pInfo)
{
    // TODO: Implement
}
void vkGetDeviceMemoryOpaqueCaptureAddressKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    uint64_t input_result,
    VkDevice device,
    const VkDeviceMemoryOpaqueCaptureAddressInfo* pInfo)
{
    // TODO: Implement
}
#endif
#ifdef VK_KHR_deferred_host_operations
void vkCreateDeferredOperationKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkAllocationCallbacks* pAllocator,
    VkDeferredOperationKHR* pDeferredOperation)
{
    // TODO: Implement
}
void vkDestroyDeferredOperationKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkDeferredOperationKHR operation,
    const VkAllocationCallbacks* pAllocator)
{
    // TODO: Implement
}
void vkGetDeferredOperationMaxConcurrencyKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    uint32_t input_result,
    VkDevice device,
    VkDeferredOperationKHR operation)
{
    // TODO: Implement
}
void vkGetDeferredOperationResultKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkDeferredOperationKHR operation)
{
    // TODO: Implement
}
void vkDeferredOperationJoinKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkDeferredOperationKHR operation)
{
    // TODO: Implement
}
#endif
#ifdef VK_KHR_pipeline_executable_properties
void vkGetPipelineExecutablePropertiesKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkPipelineInfoKHR* pPipelineInfo,
    uint32_t* pExecutableCount,
    VkPipelineExecutablePropertiesKHR* pProperties)
{
    // TODO: Implement
}
void vkGetPipelineExecutableStatisticsKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkPipelineExecutableInfoKHR* pExecutableInfo,
    uint32_t* pStatisticCount,
    VkPipelineExecutableStatisticKHR* pStatistics)
{
    // TODO: Implement
}
void vkGetPipelineExecutableInternalRepresentationsKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkPipelineExecutableInfoKHR* pExecutableInfo,
    uint32_t* pInternalRepresentationCount,
    VkPipelineExecutableInternalRepresentationKHR* pInternalRepresentations)
{
    // TODO: Implement
}
#endif
#ifdef VK_KHR_shader_integer_dot_product
#endif
#ifdef VK_KHR_pipeline_library
#endif
#ifdef VK_KHR_shader_non_semantic_info
#endif
#ifdef VK_KHR_present_id
#endif
#ifdef VK_KHR_video_encode_queue
void vkCmdEncodeVideoKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    const VkVideoEncodeInfoKHR* pEncodeInfo)
{
    // TODO: Implement
}
#endif
#ifdef VK_KHR_synchronization2
void vkCmdSetEvent2KHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkEvent event,
    const VkDependencyInfoKHR* pDependencyInfo)
{
    // TODO: Implement
}
void vkCmdResetEvent2KHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkEvent event,
    VkPipelineStageFlags2KHR stageMask)
{
    // TODO: Implement
}
void vkCmdWaitEvents2KHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    uint32_t eventCount,
    const VkEvent* pEvents,
    const VkDependencyInfoKHR* pDependencyInfos)
{
    // TODO: Implement
}
void vkCmdPipelineBarrier2KHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    const VkDependencyInfoKHR* pDependencyInfo)
{
    // TODO: Implement
}
void vkCmdWriteTimestamp2KHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkPipelineStageFlags2KHR stage,
    VkQueryPool queryPool,
    uint32_t query)
{
    // TODO: Implement
}
void vkQueueSubmit2KHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkQueue queue,
    uint32_t submitCount,
    const VkSubmitInfo2KHR* pSubmits,
    VkFence fence)
{
    // TODO: Implement
}
void vkCmdWriteBufferMarker2AMD(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkPipelineStageFlags2KHR stage,
    VkBuffer dstBuffer,
    VkDeviceSize dstOffset,
    uint32_t marker)
{
    // TODO: Implement
}
void vkGetQueueCheckpointData2NV(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkQueue queue,
    uint32_t* pCheckpointDataCount,
    VkCheckpointData2NV* pCheckpointData)
{
    // TODO: Implement
}
#endif
#ifdef VK_KHR_shader_subgroup_uniform_control_flow
#endif
#ifdef VK_KHR_zero_initialize_workgroup_memory
#endif
#ifdef VK_KHR_workgroup_memory_explicit_layout
#endif
#ifdef VK_KHR_copy_commands2
void vkCmdCopyBuffer2KHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    const VkCopyBufferInfo2KHR* pCopyBufferInfo)
{
    // TODO: Implement
}
void vkCmdCopyImage2KHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    const VkCopyImageInfo2KHR* pCopyImageInfo)
{
    // TODO: Implement
}
void vkCmdCopyBufferToImage2KHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    const VkCopyBufferToImageInfo2KHR* pCopyBufferToImageInfo)
{
    // TODO: Implement
}
void vkCmdCopyImageToBuffer2KHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    const VkCopyImageToBufferInfo2KHR* pCopyImageToBufferInfo)
{
    // TODO: Implement
}
void vkCmdBlitImage2KHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    const VkBlitImageInfo2KHR* pBlitImageInfo)
{
    // TODO: Implement
}
void vkCmdResolveImage2KHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    const VkResolveImageInfo2KHR* pResolveImageInfo)
{
    // TODO: Implement
}
#endif
#ifdef VK_KHR_format_feature_flags2
#endif
#ifdef VK_KHR_maintenance4
void vkGetDeviceBufferMemoryRequirementsKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    const VkDeviceBufferMemoryRequirementsKHR* pInfo,
    VkMemoryRequirements2* pMemoryRequirements)
{
    // TODO: Implement
}
void vkGetDeviceImageMemoryRequirementsKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    const VkDeviceImageMemoryRequirementsKHR* pInfo,
    VkMemoryRequirements2* pMemoryRequirements)
{
    // TODO: Implement
}
void vkGetDeviceImageSparseMemoryRequirementsKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    const VkDeviceImageMemoryRequirementsKHR* pInfo,
    uint32_t* pSparseMemoryRequirementCount,
    VkSparseImageMemoryRequirements2* pSparseMemoryRequirements)
{
    // TODO: Implement
}
#endif
#ifdef VK_ANDROID_native_buffer
void vkGetSwapchainGrallocUsageANDROID(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkFormat format,
    VkImageUsageFlags imageUsage,
    int* grallocUsage)
{
    // TODO: Implement
}
void vkAcquireImageANDROID(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkImage image,
    int nativeFenceFd,
    VkSemaphore semaphore,
    VkFence fence)
{
    // TODO: Implement
}
void vkQueueSignalReleaseImageANDROID(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkQueue queue,
    uint32_t waitSemaphoreCount,
    const VkSemaphore* pWaitSemaphores,
    VkImage image,
    int* pNativeFenceFd)
{
    // TODO: Implement
}
#endif
#ifdef VK_EXT_debug_report
void vkCreateDebugReportCallbackEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkInstance instance,
    const VkDebugReportCallbackCreateInfoEXT* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkDebugReportCallbackEXT* pCallback)
{
    // TODO: Implement
    android::base::AutoLock lock(mLock);
    // pCallback create
    mReconstruction.addHandles((const uint64_t*)pCallback, 1);
    if (!pCallback) return;
    auto apiHandle = mReconstruction.createApiInfo();
    auto apiInfo = mReconstruction.getApiInfo(apiHandle);
    mReconstruction.setApiTrace(apiInfo, OP_vkCreateDebugReportCallbackEXT, snapshotTraceBegin, snapshotTraceBytes);
    mReconstruction.forEachHandleAddApi((const uint64_t*)pCallback, 1, apiHandle);
    mReconstruction.setCreatedHandlesForApi(apiHandle, (const uint64_t*)pCallback, 1);
}
void vkDestroyDebugReportCallbackEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkInstance instance,
    VkDebugReportCallbackEXT callback,
    const VkAllocationCallbacks* pAllocator)
{
    // TODO: Implement
    android::base::AutoLock lock(mLock);
    // callback destroy
    mReconstruction.removeHandles((const uint64_t*)(&callback), 1);
}
void vkDebugReportMessageEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkInstance instance,
    VkDebugReportFlagsEXT flags,
    VkDebugReportObjectTypeEXT objectType,
    uint64_t object,
    size_t location,
    int32_t messageCode,
    const char* pLayerPrefix,
    const char* pMessage)
{
    // TODO: Implement
}
#endif
#ifdef VK_NV_glsl_shader
#endif
#ifdef VK_EXT_depth_range_unrestricted
#endif
#ifdef VK_IMG_filter_cubic
#endif
#ifdef VK_AMD_rasterization_order
#endif
#ifdef VK_AMD_shader_trinary_minmax
#endif
#ifdef VK_AMD_shader_explicit_vertex_parameter
#endif
#ifdef VK_EXT_debug_marker
void vkDebugMarkerSetObjectTagEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkDebugMarkerObjectTagInfoEXT* pTagInfo)
{
    // TODO: Implement
}
void vkDebugMarkerSetObjectNameEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkDebugMarkerObjectNameInfoEXT* pNameInfo)
{
    // TODO: Implement
}
void vkCmdDebugMarkerBeginEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    const VkDebugMarkerMarkerInfoEXT* pMarkerInfo)
{
    // TODO: Implement
}
void vkCmdDebugMarkerEndEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer)
{
    // TODO: Implement
}
void vkCmdDebugMarkerInsertEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    const VkDebugMarkerMarkerInfoEXT* pMarkerInfo)
{
    // TODO: Implement
}
#endif
#ifdef VK_AMD_gcn_shader
#endif
#ifdef VK_NV_dedicated_allocation
#endif
#ifdef VK_EXT_transform_feedback
void vkCmdBindTransformFeedbackBuffersEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    uint32_t firstBinding,
    uint32_t bindingCount,
    const VkBuffer* pBuffers,
    const VkDeviceSize* pOffsets,
    const VkDeviceSize* pSizes)
{
    // TODO: Implement
}
void vkCmdBeginTransformFeedbackEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    uint32_t firstCounterBuffer,
    uint32_t counterBufferCount,
    const VkBuffer* pCounterBuffers,
    const VkDeviceSize* pCounterBufferOffsets)
{
    // TODO: Implement
}
void vkCmdEndTransformFeedbackEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    uint32_t firstCounterBuffer,
    uint32_t counterBufferCount,
    const VkBuffer* pCounterBuffers,
    const VkDeviceSize* pCounterBufferOffsets)
{
    // TODO: Implement
}
void vkCmdBeginQueryIndexedEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkQueryPool queryPool,
    uint32_t query,
    VkQueryControlFlags flags,
    uint32_t index)
{
    // TODO: Implement
}
void vkCmdEndQueryIndexedEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkQueryPool queryPool,
    uint32_t query,
    uint32_t index)
{
    // TODO: Implement
}
void vkCmdDrawIndirectByteCountEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    uint32_t instanceCount,
    uint32_t firstInstance,
    VkBuffer counterBuffer,
    VkDeviceSize counterBufferOffset,
    uint32_t counterOffset,
    uint32_t vertexStride)
{
    // TODO: Implement
}
#endif
#ifdef VK_NVX_binary_import
void vkCreateCuModuleNVX(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkCuModuleCreateInfoNVX* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkCuModuleNVX* pModule)
{
    // TODO: Implement
}
void vkCreateCuFunctionNVX(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkCuFunctionCreateInfoNVX* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkCuFunctionNVX* pFunction)
{
    // TODO: Implement
}
void vkDestroyCuModuleNVX(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkCuModuleNVX module,
    const VkAllocationCallbacks* pAllocator)
{
    // TODO: Implement
}
void vkDestroyCuFunctionNVX(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkCuFunctionNVX function,
    const VkAllocationCallbacks* pAllocator)
{
    // TODO: Implement
}
void vkCmdCuLaunchKernelNVX(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    const VkCuLaunchInfoNVX* pLaunchInfo)
{
    // TODO: Implement
}
#endif
#ifdef VK_NVX_image_view_handle
void vkGetImageViewHandleNVX(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    uint32_t input_result,
    VkDevice device,
    const VkImageViewHandleInfoNVX* pInfo)
{
    // TODO: Implement
}
void vkGetImageViewAddressNVX(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkImageView imageView,
    VkImageViewAddressPropertiesNVX* pProperties)
{
    // TODO: Implement
}
#endif
#ifdef VK_AMD_draw_indirect_count
void vkCmdDrawIndirectCountAMD(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkBuffer buffer,
    VkDeviceSize offset,
    VkBuffer countBuffer,
    VkDeviceSize countBufferOffset,
    uint32_t maxDrawCount,
    uint32_t stride)
{
    // TODO: Implement
}
void vkCmdDrawIndexedIndirectCountAMD(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkBuffer buffer,
    VkDeviceSize offset,
    VkBuffer countBuffer,
    VkDeviceSize countBufferOffset,
    uint32_t maxDrawCount,
    uint32_t stride)
{
    // TODO: Implement
}
#endif
#ifdef VK_AMD_negative_viewport_height
#endif
#ifdef VK_AMD_gpu_shader_half_float
#endif
#ifdef VK_AMD_shader_ballot
#endif
#ifdef VK_EXT_video_encode_h264
#endif
#ifdef VK_EXT_video_encode_h265
#endif
#ifdef VK_EXT_video_decode_h264
#endif
#ifdef VK_AMD_texture_gather_bias_lod
#endif
#ifdef VK_AMD_shader_info
void vkGetShaderInfoAMD(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkPipeline pipeline,
    VkShaderStageFlagBits shaderStage,
    VkShaderInfoTypeAMD infoType,
    size_t* pInfoSize,
    void* pInfo)
{
    // TODO: Implement
}
#endif
#ifdef VK_AMD_shader_image_load_store_lod
#endif
#ifdef VK_GGP_stream_descriptor_surface
void vkCreateStreamDescriptorSurfaceGGP(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkInstance instance,
    const VkStreamDescriptorSurfaceCreateInfoGGP* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSurfaceKHR* pSurface)
{
    // TODO: Implement
}
#endif
#ifdef VK_NV_corner_sampled_image
#endif
#ifdef VK_IMG_format_pvrtc
#endif
#ifdef VK_NV_external_memory_capabilities
void vkGetPhysicalDeviceExternalImageFormatPropertiesNV(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    VkFormat format,
    VkImageType type,
    VkImageTiling tiling,
    VkImageUsageFlags usage,
    VkImageCreateFlags flags,
    VkExternalMemoryHandleTypeFlagsNV externalHandleType,
    VkExternalImageFormatPropertiesNV* pExternalImageFormatProperties)
{
    // TODO: Implement
}
#endif
#ifdef VK_NV_external_memory
#endif
#ifdef VK_NV_external_memory_win32
void vkGetMemoryWin32HandleNV(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkDeviceMemory memory,
    VkExternalMemoryHandleTypeFlagsNV handleType,
    HANDLE* pHandle)
{
    // TODO: Implement
}
#endif
#ifdef VK_NV_win32_keyed_mutex
#endif
#ifdef VK_EXT_validation_flags
#endif
#ifdef VK_NN_vi_surface
void vkCreateViSurfaceNN(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkInstance instance,
    const VkViSurfaceCreateInfoNN* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSurfaceKHR* pSurface)
{
    // TODO: Implement
}
#endif
#ifdef VK_EXT_shader_subgroup_ballot
#endif
#ifdef VK_EXT_shader_subgroup_vote
#endif
#ifdef VK_EXT_texture_compression_astc_hdr
#endif
#ifdef VK_EXT_astc_decode_mode
#endif
#ifdef VK_EXT_conditional_rendering
void vkCmdBeginConditionalRenderingEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    const VkConditionalRenderingBeginInfoEXT* pConditionalRenderingBegin)
{
    // TODO: Implement
}
void vkCmdEndConditionalRenderingEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer)
{
    // TODO: Implement
}
#endif
#ifdef VK_NV_clip_space_w_scaling
void vkCmdSetViewportWScalingNV(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    uint32_t firstViewport,
    uint32_t viewportCount,
    const VkViewportWScalingNV* pViewportWScalings)
{
    // TODO: Implement
}
#endif
#ifdef VK_EXT_direct_mode_display
void vkReleaseDisplayEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    VkDisplayKHR display)
{
    // TODO: Implement
}
#endif
#ifdef VK_EXT_acquire_xlib_display
void vkAcquireXlibDisplayEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    Display* dpy,
    VkDisplayKHR display)
{
    // TODO: Implement
}
void vkGetRandROutputDisplayEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    Display* dpy,
    RROutput rrOutput,
    VkDisplayKHR* pDisplay)
{
    // TODO: Implement
}
#endif
#ifdef VK_EXT_display_surface_counter
void vkGetPhysicalDeviceSurfaceCapabilities2EXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    VkSurfaceKHR surface,
    VkSurfaceCapabilities2EXT* pSurfaceCapabilities)
{
    // TODO: Implement
}
#endif
#ifdef VK_EXT_display_control
void vkDisplayPowerControlEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkDisplayKHR display,
    const VkDisplayPowerInfoEXT* pDisplayPowerInfo)
{
    // TODO: Implement
}
void vkRegisterDeviceEventEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkDeviceEventInfoEXT* pDeviceEventInfo,
    const VkAllocationCallbacks* pAllocator,
    VkFence* pFence)
{
    // TODO: Implement
}
void vkRegisterDisplayEventEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkDisplayKHR display,
    const VkDisplayEventInfoEXT* pDisplayEventInfo,
    const VkAllocationCallbacks* pAllocator,
    VkFence* pFence)
{
    // TODO: Implement
}
void vkGetSwapchainCounterEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkSwapchainKHR swapchain,
    VkSurfaceCounterFlagBitsEXT counter,
    uint64_t* pCounterValue)
{
    // TODO: Implement
}
#endif
#ifdef VK_GOOGLE_display_timing
void vkGetRefreshCycleDurationGOOGLE(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkSwapchainKHR swapchain,
    VkRefreshCycleDurationGOOGLE* pDisplayTimingProperties)
{
    // TODO: Implement
}
void vkGetPastPresentationTimingGOOGLE(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkSwapchainKHR swapchain,
    uint32_t* pPresentationTimingCount,
    VkPastPresentationTimingGOOGLE* pPresentationTimings)
{
    // TODO: Implement
}
#endif
#ifdef VK_NV_sample_mask_override_coverage
#endif
#ifdef VK_NV_geometry_shader_passthrough
#endif
#ifdef VK_NV_viewport_array2
#endif
#ifdef VK_NVX_multiview_per_view_attributes
#endif
#ifdef VK_NV_viewport_swizzle
#endif
#ifdef VK_EXT_discard_rectangles
void vkCmdSetDiscardRectangleEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    uint32_t firstDiscardRectangle,
    uint32_t discardRectangleCount,
    const VkRect2D* pDiscardRectangles)
{
    // TODO: Implement
}
#endif
#ifdef VK_EXT_conservative_rasterization
#endif
#ifdef VK_EXT_depth_clip_enable
#endif
#ifdef VK_EXT_swapchain_colorspace
#endif
#ifdef VK_EXT_hdr_metadata
void vkSetHdrMetadataEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    uint32_t swapchainCount,
    const VkSwapchainKHR* pSwapchains,
    const VkHdrMetadataEXT* pMetadata)
{
    // TODO: Implement
}
#endif
#ifdef VK_MVK_ios_surface
void vkCreateIOSSurfaceMVK(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkInstance instance,
    const VkIOSSurfaceCreateInfoMVK* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSurfaceKHR* pSurface)
{
    // TODO: Implement
}
#endif
#ifdef VK_MVK_macos_surface
void vkCreateMacOSSurfaceMVK(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkInstance instance,
    const VkMacOSSurfaceCreateInfoMVK* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSurfaceKHR* pSurface)
{
    // TODO: Implement
}
#endif
#ifdef VK_MVK_moltenvk
void vkGetMTLDeviceMVK(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkPhysicalDevice physicalDevice,
    void** pMTLDevice)
{
    // TODO: Implement
}
void vkSetMTLTextureMVK(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkImage image,
    void* mtlTexture)
{
    // TODO: Implement
}
void vkGetMTLTextureMVK(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkImage image,
    void** pMTLTexture)
{
    // TODO: Implement
}
void vkGetMTLBufferMVK(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkBuffer buffer,
    void** pMTLBuffer)
{
    // TODO: Implement
}
void vkUseIOSurfaceMVK(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkImage image,
    void* ioSurface)
{
    // TODO: Implement
}
void vkGetIOSurfaceMVK(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkImage image,
    void** pIOSurface)
{
    // TODO: Implement
}
#endif
#ifdef VK_EXT_external_memory_dma_buf
#endif
#ifdef VK_EXT_queue_family_foreign
#endif
#ifdef VK_EXT_debug_utils
void vkSetDebugUtilsObjectNameEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkDebugUtilsObjectNameInfoEXT* pNameInfo)
{
    // TODO: Implement
}
void vkSetDebugUtilsObjectTagEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkDebugUtilsObjectTagInfoEXT* pTagInfo)
{
    // TODO: Implement
}
void vkQueueBeginDebugUtilsLabelEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkQueue queue,
    const VkDebugUtilsLabelEXT* pLabelInfo)
{
    // TODO: Implement
}
void vkQueueEndDebugUtilsLabelEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkQueue queue)
{
    // TODO: Implement
}
void vkQueueInsertDebugUtilsLabelEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkQueue queue,
    const VkDebugUtilsLabelEXT* pLabelInfo)
{
    // TODO: Implement
}
void vkCmdBeginDebugUtilsLabelEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    const VkDebugUtilsLabelEXT* pLabelInfo)
{
    // TODO: Implement
}
void vkCmdEndDebugUtilsLabelEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer)
{
    // TODO: Implement
}
void vkCmdInsertDebugUtilsLabelEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    const VkDebugUtilsLabelEXT* pLabelInfo)
{
    // TODO: Implement
}
void vkCreateDebugUtilsMessengerEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkInstance instance,
    const VkDebugUtilsMessengerCreateInfoEXT* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkDebugUtilsMessengerEXT* pMessenger)
{
    // TODO: Implement
    android::base::AutoLock lock(mLock);
    // pMessenger create
    mReconstruction.addHandles((const uint64_t*)pMessenger, 1);
    if (!pMessenger) return;
    auto apiHandle = mReconstruction.createApiInfo();
    auto apiInfo = mReconstruction.getApiInfo(apiHandle);
    mReconstruction.setApiTrace(apiInfo, OP_vkCreateDebugUtilsMessengerEXT, snapshotTraceBegin, snapshotTraceBytes);
    mReconstruction.forEachHandleAddApi((const uint64_t*)pMessenger, 1, apiHandle);
    mReconstruction.setCreatedHandlesForApi(apiHandle, (const uint64_t*)pMessenger, 1);
}
void vkDestroyDebugUtilsMessengerEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkInstance instance,
    VkDebugUtilsMessengerEXT messenger,
    const VkAllocationCallbacks* pAllocator)
{
    // TODO: Implement
    android::base::AutoLock lock(mLock);
    // messenger destroy
    mReconstruction.removeHandles((const uint64_t*)(&messenger), 1);
}
void vkSubmitDebugUtilsMessageEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkInstance instance,
    VkDebugUtilsMessageSeverityFlagBitsEXT messageSeverity,
    VkDebugUtilsMessageTypeFlagsEXT messageTypes,
    const VkDebugUtilsMessengerCallbackDataEXT* pCallbackData)
{
    // TODO: Implement
}
#endif
#ifdef VK_ANDROID_external_memory_android_hardware_buffer
void vkGetAndroidHardwareBufferPropertiesANDROID(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const AHardwareBuffer* buffer,
    VkAndroidHardwareBufferPropertiesANDROID* pProperties)
{
    // TODO: Implement
}
void vkGetMemoryAndroidHardwareBufferANDROID(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkMemoryGetAndroidHardwareBufferInfoANDROID* pInfo,
    AHardwareBuffer** pBuffer)
{
    // TODO: Implement
}
#endif
#ifdef VK_EXT_sampler_filter_minmax
#endif
#ifdef VK_AMD_gpu_shader_int16
#endif
#ifdef VK_AMD_mixed_attachment_samples
#endif
#ifdef VK_AMD_shader_fragment_mask
#endif
#ifdef VK_EXT_inline_uniform_block
#endif
#ifdef VK_EXT_shader_stencil_export
#endif
#ifdef VK_EXT_sample_locations
void vkCmdSetSampleLocationsEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    const VkSampleLocationsInfoEXT* pSampleLocationsInfo)
{
    // TODO: Implement
}
void vkGetPhysicalDeviceMultisamplePropertiesEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkPhysicalDevice physicalDevice,
    VkSampleCountFlagBits samples,
    VkMultisamplePropertiesEXT* pMultisampleProperties)
{
    // TODO: Implement
}
#endif
#ifdef VK_EXT_blend_operation_advanced
#endif
#ifdef VK_NV_fragment_coverage_to_color
#endif
#ifdef VK_NV_framebuffer_mixed_samples
#endif
#ifdef VK_NV_fill_rectangle
#endif
#ifdef VK_NV_shader_sm_builtins
#endif
#ifdef VK_EXT_post_depth_coverage
#endif
#ifdef VK_EXT_image_drm_format_modifier
void vkGetImageDrmFormatModifierPropertiesEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkImage image,
    VkImageDrmFormatModifierPropertiesEXT* pProperties)
{
    // TODO: Implement
}
#endif
#ifdef VK_EXT_validation_cache
void vkCreateValidationCacheEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkValidationCacheCreateInfoEXT* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkValidationCacheEXT* pValidationCache)
{
    // TODO: Implement
    android::base::AutoLock lock(mLock);
    // pValidationCache create
    mReconstruction.addHandles((const uint64_t*)pValidationCache, 1);
    mReconstruction.addHandleDependency((const uint64_t*)pValidationCache, 1, (uint64_t)(uintptr_t)device);
    if (!pValidationCache) return;
    auto apiHandle = mReconstruction.createApiInfo();
    auto apiInfo = mReconstruction.getApiInfo(apiHandle);
    mReconstruction.setApiTrace(apiInfo, OP_vkCreateValidationCacheEXT, snapshotTraceBegin, snapshotTraceBytes);
    mReconstruction.forEachHandleAddApi((const uint64_t*)pValidationCache, 1, apiHandle);
    mReconstruction.setCreatedHandlesForApi(apiHandle, (const uint64_t*)pValidationCache, 1);
}
void vkDestroyValidationCacheEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkValidationCacheEXT validationCache,
    const VkAllocationCallbacks* pAllocator)
{
    // TODO: Implement
    android::base::AutoLock lock(mLock);
    // validationCache destroy
    mReconstruction.removeHandles((const uint64_t*)(&validationCache), 1);
}
void vkMergeValidationCachesEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkValidationCacheEXT dstCache,
    uint32_t srcCacheCount,
    const VkValidationCacheEXT* pSrcCaches)
{
    // TODO: Implement
}
void vkGetValidationCacheDataEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkValidationCacheEXT validationCache,
    size_t* pDataSize,
    void* pData)
{
    // TODO: Implement
}
#endif
#ifdef VK_EXT_descriptor_indexing
#endif
#ifdef VK_EXT_shader_viewport_index_layer
#endif
#ifdef VK_NV_shading_rate_image
void vkCmdBindShadingRateImageNV(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkImageView imageView,
    VkImageLayout imageLayout)
{
    // TODO: Implement
}
void vkCmdSetViewportShadingRatePaletteNV(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    uint32_t firstViewport,
    uint32_t viewportCount,
    const VkShadingRatePaletteNV* pShadingRatePalettes)
{
    // TODO: Implement
}
void vkCmdSetCoarseSampleOrderNV(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkCoarseSampleOrderTypeNV sampleOrderType,
    uint32_t customSampleOrderCount,
    const VkCoarseSampleOrderCustomNV* pCustomSampleOrders)
{
    // TODO: Implement
}
#endif
#ifdef VK_NV_ray_tracing
void vkCreateAccelerationStructureNV(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkAccelerationStructureCreateInfoNV* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkAccelerationStructureNV* pAccelerationStructure)
{
    // TODO: Implement
    android::base::AutoLock lock(mLock);
    // pAccelerationStructure create
    mReconstruction.addHandles((const uint64_t*)pAccelerationStructure, 1);
    mReconstruction.addHandleDependency((const uint64_t*)pAccelerationStructure, 1, (uint64_t)(uintptr_t)device);
    if (!pAccelerationStructure) return;
    auto apiHandle = mReconstruction.createApiInfo();
    auto apiInfo = mReconstruction.getApiInfo(apiHandle);
    mReconstruction.setApiTrace(apiInfo, OP_vkCreateAccelerationStructureNV, snapshotTraceBegin, snapshotTraceBytes);
    mReconstruction.forEachHandleAddApi((const uint64_t*)pAccelerationStructure, 1, apiHandle);
    mReconstruction.setCreatedHandlesForApi(apiHandle, (const uint64_t*)pAccelerationStructure, 1);
}
void vkDestroyAccelerationStructureNV(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkAccelerationStructureNV accelerationStructure,
    const VkAllocationCallbacks* pAllocator)
{
    // TODO: Implement
    android::base::AutoLock lock(mLock);
    // accelerationStructure destroy
    mReconstruction.removeHandles((const uint64_t*)(&accelerationStructure), 1);
}
void vkGetAccelerationStructureMemoryRequirementsNV(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    const VkAccelerationStructureMemoryRequirementsInfoNV* pInfo,
    VkMemoryRequirements2KHR* pMemoryRequirements)
{
    // TODO: Implement
}
void vkBindAccelerationStructureMemoryNV(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    uint32_t bindInfoCount,
    const VkBindAccelerationStructureMemoryInfoNV* pBindInfos)
{
    // TODO: Implement
}
void vkCmdBuildAccelerationStructureNV(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    const VkAccelerationStructureInfoNV* pInfo,
    VkBuffer instanceData,
    VkDeviceSize instanceOffset,
    VkBool32 update,
    VkAccelerationStructureNV dst,
    VkAccelerationStructureNV src,
    VkBuffer scratch,
    VkDeviceSize scratchOffset)
{
    // TODO: Implement
}
void vkCmdCopyAccelerationStructureNV(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkAccelerationStructureNV dst,
    VkAccelerationStructureNV src,
    VkCopyAccelerationStructureModeKHR mode)
{
    // TODO: Implement
}
void vkCmdTraceRaysNV(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkBuffer raygenShaderBindingTableBuffer,
    VkDeviceSize raygenShaderBindingOffset,
    VkBuffer missShaderBindingTableBuffer,
    VkDeviceSize missShaderBindingOffset,
    VkDeviceSize missShaderBindingStride,
    VkBuffer hitShaderBindingTableBuffer,
    VkDeviceSize hitShaderBindingOffset,
    VkDeviceSize hitShaderBindingStride,
    VkBuffer callableShaderBindingTableBuffer,
    VkDeviceSize callableShaderBindingOffset,
    VkDeviceSize callableShaderBindingStride,
    uint32_t width,
    uint32_t height,
    uint32_t depth)
{
    // TODO: Implement
}
void vkCreateRayTracingPipelinesNV(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkPipelineCache pipelineCache,
    uint32_t createInfoCount,
    const VkRayTracingPipelineCreateInfoNV* pCreateInfos,
    const VkAllocationCallbacks* pAllocator,
    VkPipeline* pPipelines)
{
    // TODO: Implement
}
void vkGetRayTracingShaderGroupHandlesKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkPipeline pipeline,
    uint32_t firstGroup,
    uint32_t groupCount,
    size_t dataSize,
    void* pData)
{
    // TODO: Implement
}
void vkGetRayTracingShaderGroupHandlesNV(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkPipeline pipeline,
    uint32_t firstGroup,
    uint32_t groupCount,
    size_t dataSize,
    void* pData)
{
    // TODO: Implement
}
void vkGetAccelerationStructureHandleNV(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkAccelerationStructureNV accelerationStructure,
    size_t dataSize,
    void* pData)
{
    // TODO: Implement
}
void vkCmdWriteAccelerationStructuresPropertiesNV(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    uint32_t accelerationStructureCount,
    const VkAccelerationStructureNV* pAccelerationStructures,
    VkQueryType queryType,
    VkQueryPool queryPool,
    uint32_t firstQuery)
{
    // TODO: Implement
}
void vkCompileDeferredNV(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkPipeline pipeline,
    uint32_t shader)
{
    // TODO: Implement
}
#endif
#ifdef VK_NV_representative_fragment_test
#endif
#ifdef VK_EXT_filter_cubic
#endif
#ifdef VK_QCOM_render_pass_shader_resolve
#endif
#ifdef VK_EXT_global_priority
#endif
#ifdef VK_EXT_external_memory_host
void vkGetMemoryHostPointerPropertiesEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkExternalMemoryHandleTypeFlagBits handleType,
    const void* pHostPointer,
    VkMemoryHostPointerPropertiesEXT* pMemoryHostPointerProperties)
{
    // TODO: Implement
}
#endif
#ifdef VK_AMD_buffer_marker
void vkCmdWriteBufferMarkerAMD(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkPipelineStageFlagBits pipelineStage,
    VkBuffer dstBuffer,
    VkDeviceSize dstOffset,
    uint32_t marker)
{
    // TODO: Implement
}
#endif
#ifdef VK_AMD_pipeline_compiler_control
#endif
#ifdef VK_EXT_calibrated_timestamps
void vkGetPhysicalDeviceCalibrateableTimeDomainsEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    uint32_t* pTimeDomainCount,
    VkTimeDomainEXT* pTimeDomains)
{
    // TODO: Implement
}
void vkGetCalibratedTimestampsEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    uint32_t timestampCount,
    const VkCalibratedTimestampInfoEXT* pTimestampInfos,
    uint64_t* pTimestamps,
    uint64_t* pMaxDeviation)
{
    // TODO: Implement
}
#endif
#ifdef VK_AMD_shader_core_properties
#endif
#ifdef VK_EXT_video_decode_h265
#endif
#ifdef VK_AMD_memory_overallocation_behavior
#endif
#ifdef VK_EXT_vertex_attribute_divisor
#endif
#ifdef VK_GGP_frame_token
#endif
#ifdef VK_EXT_pipeline_creation_feedback
#endif
#ifdef VK_NV_shader_subgroup_partitioned
#endif
#ifdef VK_NV_compute_shader_derivatives
#endif
#ifdef VK_NV_mesh_shader
void vkCmdDrawMeshTasksNV(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    uint32_t taskCount,
    uint32_t firstTask)
{
    // TODO: Implement
}
void vkCmdDrawMeshTasksIndirectNV(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkBuffer buffer,
    VkDeviceSize offset,
    uint32_t drawCount,
    uint32_t stride)
{
    // TODO: Implement
}
void vkCmdDrawMeshTasksIndirectCountNV(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkBuffer buffer,
    VkDeviceSize offset,
    VkBuffer countBuffer,
    VkDeviceSize countBufferOffset,
    uint32_t maxDrawCount,
    uint32_t stride)
{
    // TODO: Implement
}
#endif
#ifdef VK_NV_fragment_shader_barycentric
#endif
#ifdef VK_NV_shader_image_footprint
#endif
#ifdef VK_NV_scissor_exclusive
void vkCmdSetExclusiveScissorNV(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    uint32_t firstExclusiveScissor,
    uint32_t exclusiveScissorCount,
    const VkRect2D* pExclusiveScissors)
{
    // TODO: Implement
}
#endif
#ifdef VK_NV_device_diagnostic_checkpoints
void vkCmdSetCheckpointNV(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    const void* pCheckpointMarker)
{
    // TODO: Implement
}
void vkGetQueueCheckpointDataNV(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkQueue queue,
    uint32_t* pCheckpointDataCount,
    VkCheckpointDataNV* pCheckpointData)
{
    // TODO: Implement
}
#endif
#ifdef VK_INTEL_shader_integer_functions2
#endif
#ifdef VK_INTEL_performance_query
void vkInitializePerformanceApiINTEL(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkInitializePerformanceApiInfoINTEL* pInitializeInfo)
{
    // TODO: Implement
}
void vkUninitializePerformanceApiINTEL(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device)
{
    // TODO: Implement
}
void vkCmdSetPerformanceMarkerINTEL(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkCommandBuffer commandBuffer,
    const VkPerformanceMarkerInfoINTEL* pMarkerInfo)
{
    // TODO: Implement
}
void vkCmdSetPerformanceStreamMarkerINTEL(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkCommandBuffer commandBuffer,
    const VkPerformanceStreamMarkerInfoINTEL* pMarkerInfo)
{
    // TODO: Implement
}
void vkCmdSetPerformanceOverrideINTEL(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkCommandBuffer commandBuffer,
    const VkPerformanceOverrideInfoINTEL* pOverrideInfo)
{
    // TODO: Implement
}
void vkAcquirePerformanceConfigurationINTEL(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkPerformanceConfigurationAcquireInfoINTEL* pAcquireInfo,
    VkPerformanceConfigurationINTEL* pConfiguration)
{
    // TODO: Implement
}
void vkReleasePerformanceConfigurationINTEL(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkPerformanceConfigurationINTEL configuration)
{
    // TODO: Implement
}
void vkQueueSetPerformanceConfigurationINTEL(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkQueue queue,
    VkPerformanceConfigurationINTEL configuration)
{
    // TODO: Implement
}
void vkGetPerformanceParameterINTEL(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkPerformanceParameterTypeINTEL parameter,
    VkPerformanceValueINTEL* pValue)
{
    // TODO: Implement
}
#endif
#ifdef VK_EXT_pci_bus_info
#endif
#ifdef VK_AMD_display_native_hdr
void vkSetLocalDimmingAMD(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkSwapchainKHR swapChain,
    VkBool32 localDimmingEnable)
{
    // TODO: Implement
}
#endif
#ifdef VK_FUCHSIA_imagepipe_surface
void vkCreateImagePipeSurfaceFUCHSIA(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkInstance instance,
    const VkImagePipeSurfaceCreateInfoFUCHSIA* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSurfaceKHR* pSurface)
{
    // TODO: Implement
}
#endif
#ifdef VK_EXT_metal_surface
void vkCreateMetalSurfaceEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkInstance instance,
    const VkMetalSurfaceCreateInfoEXT* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSurfaceKHR* pSurface)
{
    // TODO: Implement
}
#endif
#ifdef VK_EXT_fragment_density_map
#endif
#ifdef VK_EXT_scalar_block_layout
#endif
#ifdef VK_GOOGLE_hlsl_functionality1
#endif
#ifdef VK_GOOGLE_decorate_string
#endif
#ifdef VK_EXT_subgroup_size_control
#endif
#ifdef VK_AMD_shader_core_properties2
#endif
#ifdef VK_AMD_device_coherent_memory
#endif
#ifdef VK_EXT_shader_image_atomic_int64
#endif
#ifdef VK_EXT_memory_budget
#endif
#ifdef VK_EXT_memory_priority
#endif
#ifdef VK_NV_dedicated_allocation_image_aliasing
#endif
#ifdef VK_EXT_buffer_device_address
void vkGetBufferDeviceAddressEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDeviceAddress input_result,
    VkDevice device,
    const VkBufferDeviceAddressInfo* pInfo)
{
    // TODO: Implement
}
#endif
#ifdef VK_EXT_tooling_info
void vkGetPhysicalDeviceToolPropertiesEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    uint32_t* pToolCount,
    VkPhysicalDeviceToolPropertiesEXT* pToolProperties)
{
    // TODO: Implement
}
#endif
#ifdef VK_EXT_separate_stencil_usage
#endif
#ifdef VK_EXT_validation_features
#endif
#ifdef VK_NV_cooperative_matrix
void vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    uint32_t* pPropertyCount,
    VkCooperativeMatrixPropertiesNV* pProperties)
{
    // TODO: Implement
}
#endif
#ifdef VK_NV_coverage_reduction_mode
void vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    uint32_t* pCombinationCount,
    VkFramebufferMixedSamplesCombinationNV* pCombinations)
{
    // TODO: Implement
}
#endif
#ifdef VK_EXT_fragment_shader_interlock
#endif
#ifdef VK_EXT_ycbcr_image_arrays
#endif
#ifdef VK_EXT_provoking_vertex
#endif
#ifdef VK_EXT_full_screen_exclusive
void vkGetPhysicalDeviceSurfacePresentModes2EXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    const VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo,
    uint32_t* pPresentModeCount,
    VkPresentModeKHR* pPresentModes)
{
    // TODO: Implement
}
void vkAcquireFullScreenExclusiveModeEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkSwapchainKHR swapchain)
{
    // TODO: Implement
}
void vkReleaseFullScreenExclusiveModeEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkSwapchainKHR swapchain)
{
    // TODO: Implement
}
void vkGetDeviceGroupSurfacePresentModes2EXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo,
    VkDeviceGroupPresentModeFlagsKHR* pModes)
{
    // TODO: Implement
}
#endif
#ifdef VK_EXT_headless_surface
void vkCreateHeadlessSurfaceEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkInstance instance,
    const VkHeadlessSurfaceCreateInfoEXT* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSurfaceKHR* pSurface)
{
    // TODO: Implement
}
#endif
#ifdef VK_EXT_line_rasterization
void vkCmdSetLineStippleEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    uint32_t lineStippleFactor,
    uint16_t lineStipplePattern)
{
    // TODO: Implement
}
#endif
#ifdef VK_EXT_shader_atomic_float
#endif
#ifdef VK_EXT_host_query_reset
void vkResetQueryPoolEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkQueryPool queryPool,
    uint32_t firstQuery,
    uint32_t queryCount)
{
    // TODO: Implement
}
#endif
#ifdef VK_EXT_index_type_uint8
#endif
#ifdef VK_EXT_extended_dynamic_state
void vkCmdSetCullModeEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkCullModeFlags cullMode)
{
    // TODO: Implement
}
void vkCmdSetFrontFaceEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkFrontFace frontFace)
{
    // TODO: Implement
}
void vkCmdSetPrimitiveTopologyEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkPrimitiveTopology primitiveTopology)
{
    // TODO: Implement
}
void vkCmdSetViewportWithCountEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    uint32_t viewportCount,
    const VkViewport* pViewports)
{
    // TODO: Implement
}
void vkCmdSetScissorWithCountEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    uint32_t scissorCount,
    const VkRect2D* pScissors)
{
    // TODO: Implement
}
void vkCmdBindVertexBuffers2EXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    uint32_t firstBinding,
    uint32_t bindingCount,
    const VkBuffer* pBuffers,
    const VkDeviceSize* pOffsets,
    const VkDeviceSize* pSizes,
    const VkDeviceSize* pStrides)
{
    // TODO: Implement
}
void vkCmdSetDepthTestEnableEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkBool32 depthTestEnable)
{
    // TODO: Implement
}
void vkCmdSetDepthWriteEnableEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkBool32 depthWriteEnable)
{
    // TODO: Implement
}
void vkCmdSetDepthCompareOpEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkCompareOp depthCompareOp)
{
    // TODO: Implement
}
void vkCmdSetDepthBoundsTestEnableEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkBool32 depthBoundsTestEnable)
{
    // TODO: Implement
}
void vkCmdSetStencilTestEnableEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkBool32 stencilTestEnable)
{
    // TODO: Implement
}
void vkCmdSetStencilOpEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkStencilFaceFlags faceMask,
    VkStencilOp failOp,
    VkStencilOp passOp,
    VkStencilOp depthFailOp,
    VkCompareOp compareOp)
{
    // TODO: Implement
}
#endif
#ifdef VK_EXT_shader_atomic_float2
#endif
#ifdef VK_EXT_shader_demote_to_helper_invocation
#endif
#ifdef VK_NV_device_generated_commands
void vkGetGeneratedCommandsMemoryRequirementsNV(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    const VkGeneratedCommandsMemoryRequirementsInfoNV* pInfo,
    VkMemoryRequirements2* pMemoryRequirements)
{
    // TODO: Implement
}
void vkCmdPreprocessGeneratedCommandsNV(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    const VkGeneratedCommandsInfoNV* pGeneratedCommandsInfo)
{
    // TODO: Implement
}
void vkCmdExecuteGeneratedCommandsNV(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkBool32 isPreprocessed,
    const VkGeneratedCommandsInfoNV* pGeneratedCommandsInfo)
{
    // TODO: Implement
}
void vkCmdBindPipelineShaderGroupNV(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkPipelineBindPoint pipelineBindPoint,
    VkPipeline pipeline,
    uint32_t groupIndex)
{
    // TODO: Implement
}
void vkCreateIndirectCommandsLayoutNV(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkIndirectCommandsLayoutCreateInfoNV* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkIndirectCommandsLayoutNV* pIndirectCommandsLayout)
{
    // TODO: Implement
    android::base::AutoLock lock(mLock);
    // pIndirectCommandsLayout create
    mReconstruction.addHandles((const uint64_t*)pIndirectCommandsLayout, 1);
    mReconstruction.addHandleDependency((const uint64_t*)pIndirectCommandsLayout, 1, (uint64_t)(uintptr_t)device);
    if (!pIndirectCommandsLayout) return;
    auto apiHandle = mReconstruction.createApiInfo();
    auto apiInfo = mReconstruction.getApiInfo(apiHandle);
    mReconstruction.setApiTrace(apiInfo, OP_vkCreateIndirectCommandsLayoutNV, snapshotTraceBegin, snapshotTraceBytes);
    mReconstruction.forEachHandleAddApi((const uint64_t*)pIndirectCommandsLayout, 1, apiHandle);
    mReconstruction.setCreatedHandlesForApi(apiHandle, (const uint64_t*)pIndirectCommandsLayout, 1);
}
void vkDestroyIndirectCommandsLayoutNV(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkIndirectCommandsLayoutNV indirectCommandsLayout,
    const VkAllocationCallbacks* pAllocator)
{
    // TODO: Implement
    android::base::AutoLock lock(mLock);
    // indirectCommandsLayout destroy
    mReconstruction.removeHandles((const uint64_t*)(&indirectCommandsLayout), 1);
}
#endif
#ifdef VK_NV_inherited_viewport_scissor
#endif
#ifdef VK_EXT_texel_buffer_alignment
#endif
#ifdef VK_QCOM_render_pass_transform
#endif
#ifdef VK_EXT_device_memory_report
#endif
#ifdef VK_EXT_acquire_drm_display
void vkAcquireDrmDisplayEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    int32_t drmFd,
    VkDisplayKHR display)
{
    // TODO: Implement
}
void vkGetDrmDisplayEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    int32_t drmFd,
    uint32_t connectorId,
    VkDisplayKHR* display)
{
    // TODO: Implement
}
#endif
#ifdef VK_EXT_robustness2
#endif
#ifdef VK_EXT_custom_border_color
#endif
#ifdef VK_GOOGLE_user_type
#endif
#ifdef VK_EXT_private_data
void vkCreatePrivateDataSlotEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkPrivateDataSlotCreateInfoEXT* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkPrivateDataSlotEXT* pPrivateDataSlot)
{
    // TODO: Implement
}
void vkDestroyPrivateDataSlotEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkPrivateDataSlotEXT privateDataSlot,
    const VkAllocationCallbacks* pAllocator)
{
    // TODO: Implement
}
void vkSetPrivateDataEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkObjectType objectType,
    uint64_t objectHandle,
    VkPrivateDataSlotEXT privateDataSlot,
    uint64_t data)
{
    // TODO: Implement
}
void vkGetPrivateDataEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkObjectType objectType,
    uint64_t objectHandle,
    VkPrivateDataSlotEXT privateDataSlot,
    uint64_t* pData)
{
    // TODO: Implement
}
#endif
#ifdef VK_EXT_pipeline_creation_cache_control
#endif
#ifdef VK_NV_device_diagnostics_config
#endif
#ifdef VK_QCOM_render_pass_store_ops
#endif
#ifdef VK_NV_fragment_shading_rate_enums
void vkCmdSetFragmentShadingRateEnumNV(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkFragmentShadingRateNV shadingRate,
    const VkFragmentShadingRateCombinerOpKHR combinerOps[2])
{
    // TODO: Implement
}
#endif
#ifdef VK_NV_ray_tracing_motion_blur
#endif
#ifdef VK_EXT_ycbcr_2plane_444_formats
#endif
#ifdef VK_EXT_fragment_density_map2
#endif
#ifdef VK_QCOM_rotated_copy_commands
#endif
#ifdef VK_EXT_image_robustness
#endif
#ifdef VK_EXT_4444_formats
#endif
#ifdef VK_EXT_rgba10x6_formats
#endif
#ifdef VK_NV_acquire_winrt_display
void vkAcquireWinrtDisplayNV(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    VkDisplayKHR display)
{
    // TODO: Implement
}
void vkGetWinrtDisplayNV(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    uint32_t deviceRelativeId,
    VkDisplayKHR* pDisplay)
{
    // TODO: Implement
}
#endif
#ifdef VK_EXT_directfb_surface
void vkCreateDirectFBSurfaceEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkInstance instance,
    const VkDirectFBSurfaceCreateInfoEXT* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSurfaceKHR* pSurface)
{
    // TODO: Implement
}
void vkGetPhysicalDeviceDirectFBPresentationSupportEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkBool32 input_result,
    VkPhysicalDevice physicalDevice,
    uint32_t queueFamilyIndex,
    IDirectFB* dfb)
{
    // TODO: Implement
}
#endif
#ifdef VK_VALVE_mutable_descriptor_type
#endif
#ifdef VK_EXT_vertex_input_dynamic_state
void vkCmdSetVertexInputEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    uint32_t vertexBindingDescriptionCount,
    const VkVertexInputBindingDescription2EXT* pVertexBindingDescriptions,
    uint32_t vertexAttributeDescriptionCount,
    const VkVertexInputAttributeDescription2EXT* pVertexAttributeDescriptions)
{
    // TODO: Implement
}
#endif
#ifdef VK_EXT_physical_device_drm
#endif
#ifdef VK_EXT_primitive_topology_list_restart
#endif
#ifdef VK_FUCHSIA_external_memory
void vkGetMemoryZirconHandleFUCHSIA(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkMemoryGetZirconHandleInfoFUCHSIA* pGetZirconHandleInfo,
    zx_handle_t* pZirconHandle)
{
    // TODO: Implement
}
void vkGetMemoryZirconHandlePropertiesFUCHSIA(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkExternalMemoryHandleTypeFlagBits handleType,
    zx_handle_t zirconHandle,
    VkMemoryZirconHandlePropertiesFUCHSIA* pMemoryZirconHandleProperties)
{
    // TODO: Implement
}
#endif
#ifdef VK_FUCHSIA_external_semaphore
void vkImportSemaphoreZirconHandleFUCHSIA(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkImportSemaphoreZirconHandleInfoFUCHSIA* pImportSemaphoreZirconHandleInfo)
{
    // TODO: Implement
}
void vkGetSemaphoreZirconHandleFUCHSIA(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkSemaphoreGetZirconHandleInfoFUCHSIA* pGetZirconHandleInfo,
    zx_handle_t* pZirconHandle)
{
    // TODO: Implement
}
#endif
#ifdef VK_FUCHSIA_buffer_collection
void vkCreateBufferCollectionFUCHSIA(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkBufferCollectionCreateInfoFUCHSIA* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkBufferCollectionFUCHSIA* pCollection)
{
    // TODO: Implement
}
void vkSetBufferCollectionImageConstraintsFUCHSIA(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkBufferCollectionFUCHSIA collection,
    const VkImageConstraintsInfoFUCHSIA* pImageConstraintsInfo)
{
    // TODO: Implement
}
void vkSetBufferCollectionBufferConstraintsFUCHSIA(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkBufferCollectionFUCHSIA collection,
    const VkBufferConstraintsInfoFUCHSIA* pBufferConstraintsInfo)
{
    // TODO: Implement
}
void vkDestroyBufferCollectionFUCHSIA(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkBufferCollectionFUCHSIA collection,
    const VkAllocationCallbacks* pAllocator)
{
    // TODO: Implement
}
void vkGetBufferCollectionPropertiesFUCHSIA(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkBufferCollectionFUCHSIA collection,
    VkBufferCollectionPropertiesFUCHSIA* pProperties)
{
    // TODO: Implement
}
#endif
#ifdef VK_HUAWEI_subpass_shading
void vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkRenderPass renderpass,
    VkExtent2D* pMaxWorkgroupSize)
{
    // TODO: Implement
}
void vkCmdSubpassShadingHUAWEI(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer)
{
    // TODO: Implement
}
#endif
#ifdef VK_HUAWEI_invocation_mask
void vkCmdBindInvocationMaskHUAWEI(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkImageView imageView,
    VkImageLayout imageLayout)
{
    // TODO: Implement
}
#endif
#ifdef VK_NV_external_memory_rdma
void vkGetMemoryRemoteAddressNV(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkMemoryGetRemoteAddressInfoNV* pMemoryGetRemoteAddressInfo,
    VkRemoteAddressNV* pAddress)
{
    // TODO: Implement
}
#endif
#ifdef VK_EXT_extended_dynamic_state2
void vkCmdSetPatchControlPointsEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    uint32_t patchControlPoints)
{
    // TODO: Implement
}
void vkCmdSetRasterizerDiscardEnableEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkBool32 rasterizerDiscardEnable)
{
    // TODO: Implement
}
void vkCmdSetDepthBiasEnableEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkBool32 depthBiasEnable)
{
    // TODO: Implement
}
void vkCmdSetLogicOpEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkLogicOp logicOp)
{
    // TODO: Implement
}
void vkCmdSetPrimitiveRestartEnableEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkBool32 primitiveRestartEnable)
{
    // TODO: Implement
}
#endif
#ifdef VK_QNX_screen_surface
void vkCreateScreenSurfaceQNX(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkInstance instance,
    const VkScreenSurfaceCreateInfoQNX* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSurfaceKHR* pSurface)
{
    // TODO: Implement
}
void vkGetPhysicalDeviceScreenPresentationSupportQNX(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkBool32 input_result,
    VkPhysicalDevice physicalDevice,
    uint32_t queueFamilyIndex,
    _screen_window* window)
{
    // TODO: Implement
}
#endif
#ifdef VK_EXT_color_write_enable
void vkCmdSetColorWriteEnableEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    uint32_t attachmentCount,
    const VkBool32* pColorWriteEnables)
{
    // TODO: Implement
}
#endif
#ifdef VK_GOOGLE_gfxstream
void vkRegisterImageColorBufferGOOGLE(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkImage image,
    uint32_t colorBuffer)
{
    // TODO: Implement
}
void vkRegisterBufferColorBufferGOOGLE(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkBuffer buffer,
    uint32_t colorBuffer)
{
    // TODO: Implement
}
void vkMapMemoryIntoAddressSpaceGOOGLE(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkDeviceMemory memory,
    uint64_t* pAddress)
{
    // TODO: Implement
    android::base::AutoLock lock(mLock);
    // memory modify
    auto apiHandle = mReconstruction.createApiInfo();
    auto apiInfo = mReconstruction.getApiInfo(apiHandle);
    mReconstruction.setApiTrace(apiInfo, OP_vkMapMemoryIntoAddressSpaceGOOGLE, snapshotTraceBegin, snapshotTraceBytes);
    for (uint32_t i = 0; i < 1; ++i)
    {
        VkDeviceMemory boxed = unboxed_to_boxed_non_dispatchable_VkDeviceMemory((&memory)[i]);
        mReconstruction.forEachHandleAddModifyApi((const uint64_t*)(&boxed), 1, apiHandle);
    }
}
void vkUpdateDescriptorSetWithTemplateSizedGOOGLE(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkDescriptorSet descriptorSet,
    VkDescriptorUpdateTemplate descriptorUpdateTemplate,
    uint32_t imageInfoCount,
    uint32_t bufferInfoCount,
    uint32_t bufferViewCount,
    const uint32_t* pImageInfoEntryIndices,
    const uint32_t* pBufferInfoEntryIndices,
    const uint32_t* pBufferViewEntryIndices,
    const VkDescriptorImageInfo* pImageInfos,
    const VkDescriptorBufferInfo* pBufferInfos,
    const VkBufferView* pBufferViews)
{
    // TODO: Implement
}
void vkBeginCommandBufferAsyncGOOGLE(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    const VkCommandBufferBeginInfo* pBeginInfo)
{
    // TODO: Implement
}
void vkEndCommandBufferAsyncGOOGLE(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer)
{
    // TODO: Implement
}
void vkResetCommandBufferAsyncGOOGLE(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkCommandBufferResetFlags flags)
{
    // TODO: Implement
}
void vkCommandBufferHostSyncGOOGLE(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    uint32_t needHostSync,
    uint32_t sequenceNumber)
{
    // TODO: Implement
}
void vkCreateImageWithRequirementsGOOGLE(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkImageCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkImage* pImage,
    VkMemoryRequirements* pMemoryRequirements)
{
    // TODO: Implement
    android::base::AutoLock lock(mLock);
    // pImage create
    mReconstruction.addHandles((const uint64_t*)pImage, 1);
    mReconstruction.addHandleDependency((const uint64_t*)pImage, 1, (uint64_t)(uintptr_t)device);
    if (!pImage) return;
    auto apiHandle = mReconstruction.createApiInfo();
    auto apiInfo = mReconstruction.getApiInfo(apiHandle);
    mReconstruction.setApiTrace(apiInfo, OP_vkCreateImageWithRequirementsGOOGLE, snapshotTraceBegin, snapshotTraceBytes);
    mReconstruction.forEachHandleAddApi((const uint64_t*)pImage, 1, apiHandle);
    mReconstruction.setCreatedHandlesForApi(apiHandle, (const uint64_t*)pImage, 1);
}
void vkCreateBufferWithRequirementsGOOGLE(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkBufferCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkBuffer* pBuffer,
    VkMemoryRequirements* pMemoryRequirements)
{
    // TODO: Implement
    android::base::AutoLock lock(mLock);
    // pBuffer create
    mReconstruction.addHandles((const uint64_t*)pBuffer, 1);
    mReconstruction.addHandleDependency((const uint64_t*)pBuffer, 1, (uint64_t)(uintptr_t)device);
    if (!pBuffer) return;
    auto apiHandle = mReconstruction.createApiInfo();
    auto apiInfo = mReconstruction.getApiInfo(apiHandle);
    mReconstruction.setApiTrace(apiInfo, OP_vkCreateBufferWithRequirementsGOOGLE, snapshotTraceBegin, snapshotTraceBytes);
    mReconstruction.forEachHandleAddApi((const uint64_t*)pBuffer, 1, apiHandle);
    mReconstruction.setCreatedHandlesForApi(apiHandle, (const uint64_t*)pBuffer, 1);
}
void vkGetMemoryHostAddressInfoGOOGLE(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkDeviceMemory memory,
    uint64_t* pAddress,
    uint64_t* pSize,
    uint64_t* pHostmemId)
{
    // TODO: Implement
}
void vkFreeMemorySyncGOOGLE(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkDeviceMemory memory,
    const VkAllocationCallbacks* pAllocator)
{
    // TODO: Implement
    android::base::AutoLock lock(mLock);
    // memory destroy
    mReconstruction.removeHandles((const uint64_t*)(&memory), 1);
}
void vkQueueHostSyncGOOGLE(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkQueue queue,
    uint32_t needHostSync,
    uint32_t sequenceNumber)
{
    // TODO: Implement
}
void vkQueueSubmitAsyncGOOGLE(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkQueue queue,
    uint32_t submitCount,
    const VkSubmitInfo* pSubmits,
    VkFence fence)
{
    // TODO: Implement
}
void vkQueueWaitIdleAsyncGOOGLE(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkQueue queue)
{
    // TODO: Implement
}
void vkQueueBindSparseAsyncGOOGLE(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkQueue queue,
    uint32_t bindInfoCount,
    const VkBindSparseInfo* pBindInfo,
    VkFence fence)
{
    // TODO: Implement
}
void vkGetLinearImageLayoutGOOGLE(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkFormat format,
    VkDeviceSize* pOffset,
    VkDeviceSize* pRowPitchAlignment)
{
    // TODO: Implement
}
void vkGetLinearImageLayout2GOOGLE(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    const VkImageCreateInfo* pCreateInfo,
    VkDeviceSize* pOffset,
    VkDeviceSize* pRowPitchAlignment)
{
    // TODO: Implement
}
void vkQueueFlushCommandsGOOGLE(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkQueue queue,
    VkCommandBuffer commandBuffer,
    VkDeviceSize dataSize,
    const void* pData)
{
    // TODO: Implement
}
void vkQueueCommitDescriptorSetUpdatesGOOGLE(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkQueue queue,
    uint32_t descriptorPoolCount,
    const VkDescriptorPool* pDescriptorPools,
    uint32_t descriptorSetCount,
    const VkDescriptorSetLayout* pSetLayouts,
    const uint64_t* pDescriptorSetPoolIds,
    const uint32_t* pDescriptorSetWhichPool,
    const uint32_t* pDescriptorSetPendingAllocation,
    const uint32_t* pDescriptorWriteStartingIndices,
    uint32_t pendingDescriptorWriteCount,
    const VkWriteDescriptorSet* pPendingDescriptorWrites)
{
    // TODO: Implement
}
void vkCollectDescriptorPoolIdsGOOGLE(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkDescriptorPool descriptorPool,
    uint32_t* pPoolIdCount,
    uint64_t* pPoolIds)
{
    // TODO: Implement
}
void vkQueueSignalReleaseImageANDROIDAsyncGOOGLE(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkQueue queue,
    uint32_t waitSemaphoreCount,
    const VkSemaphore* pWaitSemaphores,
    VkImage image)
{
    // TODO: Implement
}
#endif
#ifdef VK_EXT_global_priority_query
#endif
#ifdef VK_EXT_multi_draw
void vkCmdDrawMultiEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    uint32_t drawCount,
    const VkMultiDrawInfoEXT* pVertexInfo,
    uint32_t instanceCount,
    uint32_t firstInstance,
    uint32_t stride)
{
    // TODO: Implement
}
void vkCmdDrawMultiIndexedEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    uint32_t drawCount,
    const VkMultiDrawIndexedInfoEXT* pIndexInfo,
    uint32_t instanceCount,
    uint32_t firstInstance,
    uint32_t stride,
    const int32_t* pVertexOffset)
{
    // TODO: Implement
}
#endif
#ifdef VK_EXT_load_store_op_none
#endif
#ifdef VK_EXT_border_color_swizzle
#endif
#ifdef VK_EXT_pageable_device_local_memory
void vkSetDeviceMemoryPriorityEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkDeviceMemory memory,
    float priority)
{
    // TODO: Implement
}
#endif
#ifdef VK_KHR_acceleration_structure
void vkCreateAccelerationStructureKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkAccelerationStructureCreateInfoKHR* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkAccelerationStructureKHR* pAccelerationStructure)
{
    // TODO: Implement
    android::base::AutoLock lock(mLock);
    // pAccelerationStructure create
    mReconstruction.addHandles((const uint64_t*)pAccelerationStructure, 1);
    mReconstruction.addHandleDependency((const uint64_t*)pAccelerationStructure, 1, (uint64_t)(uintptr_t)device);
    if (!pAccelerationStructure) return;
    auto apiHandle = mReconstruction.createApiInfo();
    auto apiInfo = mReconstruction.getApiInfo(apiHandle);
    mReconstruction.setApiTrace(apiInfo, OP_vkCreateAccelerationStructureKHR, snapshotTraceBegin, snapshotTraceBytes);
    mReconstruction.forEachHandleAddApi((const uint64_t*)pAccelerationStructure, 1, apiHandle);
    mReconstruction.setCreatedHandlesForApi(apiHandle, (const uint64_t*)pAccelerationStructure, 1);
}
void vkDestroyAccelerationStructureKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkAccelerationStructureKHR accelerationStructure,
    const VkAllocationCallbacks* pAllocator)
{
    // TODO: Implement
    android::base::AutoLock lock(mLock);
    // accelerationStructure destroy
    mReconstruction.removeHandles((const uint64_t*)(&accelerationStructure), 1);
}
void vkCmdBuildAccelerationStructuresKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    uint32_t infoCount,
    const VkAccelerationStructureBuildGeometryInfoKHR* pInfos,
    const VkAccelerationStructureBuildRangeInfoKHR* const* ppBuildRangeInfos)
{
    // TODO: Implement
}
void vkCmdBuildAccelerationStructuresIndirectKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    uint32_t infoCount,
    const VkAccelerationStructureBuildGeometryInfoKHR* pInfos,
    const VkDeviceAddress* pIndirectDeviceAddresses,
    const uint32_t* pIndirectStrides,
    const uint32_t* const* ppMaxPrimitiveCounts)
{
    // TODO: Implement
}
void vkBuildAccelerationStructuresKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkDeferredOperationKHR deferredOperation,
    uint32_t infoCount,
    const VkAccelerationStructureBuildGeometryInfoKHR* pInfos,
    const VkAccelerationStructureBuildRangeInfoKHR* const* ppBuildRangeInfos)
{
    // TODO: Implement
}
void vkCopyAccelerationStructureKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkDeferredOperationKHR deferredOperation,
    const VkCopyAccelerationStructureInfoKHR* pInfo)
{
    // TODO: Implement
}
void vkCopyAccelerationStructureToMemoryKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkDeferredOperationKHR deferredOperation,
    const VkCopyAccelerationStructureToMemoryInfoKHR* pInfo)
{
    // TODO: Implement
}
void vkCopyMemoryToAccelerationStructureKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkDeferredOperationKHR deferredOperation,
    const VkCopyMemoryToAccelerationStructureInfoKHR* pInfo)
{
    // TODO: Implement
}
void vkWriteAccelerationStructuresPropertiesKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    uint32_t accelerationStructureCount,
    const VkAccelerationStructureKHR* pAccelerationStructures,
    VkQueryType queryType,
    size_t dataSize,
    void* pData,
    size_t stride)
{
    // TODO: Implement
}
void vkCmdCopyAccelerationStructureKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    const VkCopyAccelerationStructureInfoKHR* pInfo)
{
    // TODO: Implement
}
void vkCmdCopyAccelerationStructureToMemoryKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    const VkCopyAccelerationStructureToMemoryInfoKHR* pInfo)
{
    // TODO: Implement
}
void vkCmdCopyMemoryToAccelerationStructureKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    const VkCopyMemoryToAccelerationStructureInfoKHR* pInfo)
{
    // TODO: Implement
}
void vkGetAccelerationStructureDeviceAddressKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDeviceAddress input_result,
    VkDevice device,
    const VkAccelerationStructureDeviceAddressInfoKHR* pInfo)
{
    // TODO: Implement
}
void vkCmdWriteAccelerationStructuresPropertiesKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    uint32_t accelerationStructureCount,
    const VkAccelerationStructureKHR* pAccelerationStructures,
    VkQueryType queryType,
    VkQueryPool queryPool,
    uint32_t firstQuery)
{
    // TODO: Implement
}
void vkGetDeviceAccelerationStructureCompatibilityKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    const VkAccelerationStructureVersionInfoKHR* pVersionInfo,
    VkAccelerationStructureCompatibilityKHR* pCompatibility)
{
    // TODO: Implement
}
void vkGetAccelerationStructureBuildSizesKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkAccelerationStructureBuildTypeKHR buildType,
    const VkAccelerationStructureBuildGeometryInfoKHR* pBuildInfo,
    const uint32_t* pMaxPrimitiveCounts,
    VkAccelerationStructureBuildSizesInfoKHR* pSizeInfo)
{
    // TODO: Implement
}
#endif
#ifdef VK_KHR_ray_tracing_pipeline
void vkCmdTraceRaysKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    const VkStridedDeviceAddressRegionKHR* pRaygenShaderBindingTable,
    const VkStridedDeviceAddressRegionKHR* pMissShaderBindingTable,
    const VkStridedDeviceAddressRegionKHR* pHitShaderBindingTable,
    const VkStridedDeviceAddressRegionKHR* pCallableShaderBindingTable,
    uint32_t width,
    uint32_t height,
    uint32_t depth)
{
    // TODO: Implement
}
void vkCreateRayTracingPipelinesKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkDeferredOperationKHR deferredOperation,
    VkPipelineCache pipelineCache,
    uint32_t createInfoCount,
    const VkRayTracingPipelineCreateInfoKHR* pCreateInfos,
    const VkAllocationCallbacks* pAllocator,
    VkPipeline* pPipelines)
{
    // TODO: Implement
}
void vkGetRayTracingCaptureReplayShaderGroupHandlesKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkPipeline pipeline,
    uint32_t firstGroup,
    uint32_t groupCount,
    size_t dataSize,
    void* pData)
{
    // TODO: Implement
}
void vkCmdTraceRaysIndirectKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    const VkStridedDeviceAddressRegionKHR* pRaygenShaderBindingTable,
    const VkStridedDeviceAddressRegionKHR* pMissShaderBindingTable,
    const VkStridedDeviceAddressRegionKHR* pHitShaderBindingTable,
    const VkStridedDeviceAddressRegionKHR* pCallableShaderBindingTable,
    VkDeviceAddress indirectDeviceAddress)
{
    // TODO: Implement
}
void vkGetRayTracingShaderGroupStackSizeKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDeviceSize input_result,
    VkDevice device,
    VkPipeline pipeline,
    uint32_t group,
    VkShaderGroupShaderKHR groupShader)
{
    // TODO: Implement
}
void vkCmdSetRayTracingPipelineStackSizeKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    uint32_t pipelineStackSize)
{
    // TODO: Implement
}
#endif
#ifdef VK_KHR_ray_query
#endif

private:
    android::base::Lock mLock;
    VkReconstruction mReconstruction;
};

VkDecoderSnapshot::VkDecoderSnapshot() :
    mImpl(new VkDecoderSnapshot::Impl()) { }

void VkDecoderSnapshot::save(android::base::Stream* stream) {
    mImpl->save(stream);
}

void VkDecoderSnapshot::load(android::base::Stream* stream) {
    mImpl->load(stream);
}

VkDecoderSnapshot::~VkDecoderSnapshot() = default;
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCreateInstance(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    const VkInstanceCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkInstance* pInstance)
{
    mImpl->vkCreateInstance(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, pCreateInfo, pAllocator, pInstance);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkDestroyInstance(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkInstance instance,
    const VkAllocationCallbacks* pAllocator)
{
    mImpl->vkDestroyInstance(snapshotTraceBegin, snapshotTraceBytes, pool, instance, pAllocator);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkEnumeratePhysicalDevices(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkInstance instance,
    uint32_t* pPhysicalDeviceCount,
    VkPhysicalDevice* pPhysicalDevices)
{
    mImpl->vkEnumeratePhysicalDevices(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, instance, pPhysicalDeviceCount, pPhysicalDevices);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkGetPhysicalDeviceFeatures(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkPhysicalDevice physicalDevice,
    VkPhysicalDeviceFeatures* pFeatures)
{
    mImpl->vkGetPhysicalDeviceFeatures(snapshotTraceBegin, snapshotTraceBytes, pool, physicalDevice, pFeatures);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkGetPhysicalDeviceFormatProperties(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkPhysicalDevice physicalDevice,
    VkFormat format,
    VkFormatProperties* pFormatProperties)
{
    mImpl->vkGetPhysicalDeviceFormatProperties(snapshotTraceBegin, snapshotTraceBytes, pool, physicalDevice, format, pFormatProperties);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkGetPhysicalDeviceImageFormatProperties(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    VkFormat format,
    VkImageType type,
    VkImageTiling tiling,
    VkImageUsageFlags usage,
    VkImageCreateFlags flags,
    VkImageFormatProperties* pImageFormatProperties)
{
    mImpl->vkGetPhysicalDeviceImageFormatProperties(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, physicalDevice, format, type, tiling, usage, flags, pImageFormatProperties);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkGetPhysicalDeviceProperties(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkPhysicalDevice physicalDevice,
    VkPhysicalDeviceProperties* pProperties)
{
    mImpl->vkGetPhysicalDeviceProperties(snapshotTraceBegin, snapshotTraceBytes, pool, physicalDevice, pProperties);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkGetPhysicalDeviceQueueFamilyProperties(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkPhysicalDevice physicalDevice,
    uint32_t* pQueueFamilyPropertyCount,
    VkQueueFamilyProperties* pQueueFamilyProperties)
{
    mImpl->vkGetPhysicalDeviceQueueFamilyProperties(snapshotTraceBegin, snapshotTraceBytes, pool, physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkGetPhysicalDeviceMemoryProperties(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkPhysicalDevice physicalDevice,
    VkPhysicalDeviceMemoryProperties* pMemoryProperties)
{
    mImpl->vkGetPhysicalDeviceMemoryProperties(snapshotTraceBegin, snapshotTraceBytes, pool, physicalDevice, pMemoryProperties);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkGetInstanceProcAddr(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    PFN_vkVoidFunction input_result,
    VkInstance instance,
    const char* pName)
{
    mImpl->vkGetInstanceProcAddr(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, instance, pName);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkGetDeviceProcAddr(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    PFN_vkVoidFunction input_result,
    VkDevice device,
    const char* pName)
{
    mImpl->vkGetDeviceProcAddr(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, pName);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCreateDevice(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    const VkDeviceCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkDevice* pDevice)
{
    mImpl->vkCreateDevice(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, physicalDevice, pCreateInfo, pAllocator, pDevice);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkDestroyDevice(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    const VkAllocationCallbacks* pAllocator)
{
    mImpl->vkDestroyDevice(snapshotTraceBegin, snapshotTraceBytes, pool, device, pAllocator);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkEnumerateInstanceExtensionProperties(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    const char* pLayerName,
    uint32_t* pPropertyCount,
    VkExtensionProperties* pProperties)
{
    mImpl->vkEnumerateInstanceExtensionProperties(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, pLayerName, pPropertyCount, pProperties);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkEnumerateDeviceExtensionProperties(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    const char* pLayerName,
    uint32_t* pPropertyCount,
    VkExtensionProperties* pProperties)
{
    mImpl->vkEnumerateDeviceExtensionProperties(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, physicalDevice, pLayerName, pPropertyCount, pProperties);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkEnumerateInstanceLayerProperties(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    uint32_t* pPropertyCount,
    VkLayerProperties* pProperties)
{
    mImpl->vkEnumerateInstanceLayerProperties(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, pPropertyCount, pProperties);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkEnumerateDeviceLayerProperties(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    uint32_t* pPropertyCount,
    VkLayerProperties* pProperties)
{
    mImpl->vkEnumerateDeviceLayerProperties(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, physicalDevice, pPropertyCount, pProperties);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkGetDeviceQueue(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    uint32_t queueFamilyIndex,
    uint32_t queueIndex,
    VkQueue* pQueue)
{
    mImpl->vkGetDeviceQueue(snapshotTraceBegin, snapshotTraceBytes, pool, device, queueFamilyIndex, queueIndex, pQueue);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkQueueSubmit(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkQueue queue,
    uint32_t submitCount,
    const VkSubmitInfo* pSubmits,
    VkFence fence)
{
    mImpl->vkQueueSubmit(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, queue, submitCount, pSubmits, fence);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkQueueWaitIdle(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkQueue queue)
{
    mImpl->vkQueueWaitIdle(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, queue);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkDeviceWaitIdle(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device)
{
    mImpl->vkDeviceWaitIdle(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkAllocateMemory(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkMemoryAllocateInfo* pAllocateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkDeviceMemory* pMemory)
{
    mImpl->vkAllocateMemory(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, pAllocateInfo, pAllocator, pMemory);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkFreeMemory(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkDeviceMemory memory,
    const VkAllocationCallbacks* pAllocator)
{
    mImpl->vkFreeMemory(snapshotTraceBegin, snapshotTraceBytes, pool, device, memory, pAllocator);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkMapMemory(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkDeviceMemory memory,
    VkDeviceSize offset,
    VkDeviceSize size,
    VkMemoryMapFlags flags,
    void** ppData)
{
    mImpl->vkMapMemory(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, memory, offset, size, flags, ppData);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkUnmapMemory(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkDeviceMemory memory)
{
    mImpl->vkUnmapMemory(snapshotTraceBegin, snapshotTraceBytes, pool, device, memory);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkFlushMappedMemoryRanges(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    uint32_t memoryRangeCount,
    const VkMappedMemoryRange* pMemoryRanges)
{
    mImpl->vkFlushMappedMemoryRanges(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, memoryRangeCount, pMemoryRanges);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkInvalidateMappedMemoryRanges(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    uint32_t memoryRangeCount,
    const VkMappedMemoryRange* pMemoryRanges)
{
    mImpl->vkInvalidateMappedMemoryRanges(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, memoryRangeCount, pMemoryRanges);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkGetDeviceMemoryCommitment(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkDeviceMemory memory,
    VkDeviceSize* pCommittedMemoryInBytes)
{
    mImpl->vkGetDeviceMemoryCommitment(snapshotTraceBegin, snapshotTraceBytes, pool, device, memory, pCommittedMemoryInBytes);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkBindBufferMemory(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkBuffer buffer,
    VkDeviceMemory memory,
    VkDeviceSize memoryOffset)
{
    mImpl->vkBindBufferMemory(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, buffer, memory, memoryOffset);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkBindImageMemory(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkImage image,
    VkDeviceMemory memory,
    VkDeviceSize memoryOffset)
{
    mImpl->vkBindImageMemory(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, image, memory, memoryOffset);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkGetBufferMemoryRequirements(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkBuffer buffer,
    VkMemoryRequirements* pMemoryRequirements)
{
    mImpl->vkGetBufferMemoryRequirements(snapshotTraceBegin, snapshotTraceBytes, pool, device, buffer, pMemoryRequirements);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkGetImageMemoryRequirements(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkImage image,
    VkMemoryRequirements* pMemoryRequirements)
{
    mImpl->vkGetImageMemoryRequirements(snapshotTraceBegin, snapshotTraceBytes, pool, device, image, pMemoryRequirements);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkGetImageSparseMemoryRequirements(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkImage image,
    uint32_t* pSparseMemoryRequirementCount,
    VkSparseImageMemoryRequirements* pSparseMemoryRequirements)
{
    mImpl->vkGetImageSparseMemoryRequirements(snapshotTraceBegin, snapshotTraceBytes, pool, device, image, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkGetPhysicalDeviceSparseImageFormatProperties(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkPhysicalDevice physicalDevice,
    VkFormat format,
    VkImageType type,
    VkSampleCountFlagBits samples,
    VkImageUsageFlags usage,
    VkImageTiling tiling,
    uint32_t* pPropertyCount,
    VkSparseImageFormatProperties* pProperties)
{
    mImpl->vkGetPhysicalDeviceSparseImageFormatProperties(snapshotTraceBegin, snapshotTraceBytes, pool, physicalDevice, format, type, samples, usage, tiling, pPropertyCount, pProperties);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkQueueBindSparse(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkQueue queue,
    uint32_t bindInfoCount,
    const VkBindSparseInfo* pBindInfo,
    VkFence fence)
{
    mImpl->vkQueueBindSparse(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, queue, bindInfoCount, pBindInfo, fence);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCreateFence(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkFenceCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkFence* pFence)
{
    mImpl->vkCreateFence(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, pCreateInfo, pAllocator, pFence);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkDestroyFence(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkFence fence,
    const VkAllocationCallbacks* pAllocator)
{
    mImpl->vkDestroyFence(snapshotTraceBegin, snapshotTraceBytes, pool, device, fence, pAllocator);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkResetFences(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    uint32_t fenceCount,
    const VkFence* pFences)
{
    mImpl->vkResetFences(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, fenceCount, pFences);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkGetFenceStatus(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkFence fence)
{
    mImpl->vkGetFenceStatus(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, fence);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkWaitForFences(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    uint32_t fenceCount,
    const VkFence* pFences,
    VkBool32 waitAll,
    uint64_t timeout)
{
    mImpl->vkWaitForFences(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, fenceCount, pFences, waitAll, timeout);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCreateSemaphore(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkSemaphoreCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSemaphore* pSemaphore)
{
    mImpl->vkCreateSemaphore(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, pCreateInfo, pAllocator, pSemaphore);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkDestroySemaphore(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkSemaphore semaphore,
    const VkAllocationCallbacks* pAllocator)
{
    mImpl->vkDestroySemaphore(snapshotTraceBegin, snapshotTraceBytes, pool, device, semaphore, pAllocator);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCreateEvent(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkEventCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkEvent* pEvent)
{
    mImpl->vkCreateEvent(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, pCreateInfo, pAllocator, pEvent);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkDestroyEvent(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkEvent event,
    const VkAllocationCallbacks* pAllocator)
{
    mImpl->vkDestroyEvent(snapshotTraceBegin, snapshotTraceBytes, pool, device, event, pAllocator);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkGetEventStatus(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkEvent event)
{
    mImpl->vkGetEventStatus(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, event);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkSetEvent(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkEvent event)
{
    mImpl->vkSetEvent(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, event);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkResetEvent(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkEvent event)
{
    mImpl->vkResetEvent(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, event);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCreateQueryPool(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkQueryPoolCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkQueryPool* pQueryPool)
{
    mImpl->vkCreateQueryPool(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, pCreateInfo, pAllocator, pQueryPool);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkDestroyQueryPool(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkQueryPool queryPool,
    const VkAllocationCallbacks* pAllocator)
{
    mImpl->vkDestroyQueryPool(snapshotTraceBegin, snapshotTraceBytes, pool, device, queryPool, pAllocator);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkGetQueryPoolResults(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkQueryPool queryPool,
    uint32_t firstQuery,
    uint32_t queryCount,
    size_t dataSize,
    void* pData,
    VkDeviceSize stride,
    VkQueryResultFlags flags)
{
    mImpl->vkGetQueryPoolResults(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, queryPool, firstQuery, queryCount, dataSize, pData, stride, flags);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCreateBuffer(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkBufferCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkBuffer* pBuffer)
{
    mImpl->vkCreateBuffer(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, pCreateInfo, pAllocator, pBuffer);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkDestroyBuffer(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkBuffer buffer,
    const VkAllocationCallbacks* pAllocator)
{
    mImpl->vkDestroyBuffer(snapshotTraceBegin, snapshotTraceBytes, pool, device, buffer, pAllocator);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCreateBufferView(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkBufferViewCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkBufferView* pView)
{
    mImpl->vkCreateBufferView(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, pCreateInfo, pAllocator, pView);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkDestroyBufferView(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkBufferView bufferView,
    const VkAllocationCallbacks* pAllocator)
{
    mImpl->vkDestroyBufferView(snapshotTraceBegin, snapshotTraceBytes, pool, device, bufferView, pAllocator);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCreateImage(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkImageCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkImage* pImage)
{
    mImpl->vkCreateImage(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, pCreateInfo, pAllocator, pImage);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkDestroyImage(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkImage image,
    const VkAllocationCallbacks* pAllocator)
{
    mImpl->vkDestroyImage(snapshotTraceBegin, snapshotTraceBytes, pool, device, image, pAllocator);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkGetImageSubresourceLayout(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkImage image,
    const VkImageSubresource* pSubresource,
    VkSubresourceLayout* pLayout)
{
    mImpl->vkGetImageSubresourceLayout(snapshotTraceBegin, snapshotTraceBytes, pool, device, image, pSubresource, pLayout);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCreateImageView(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkImageViewCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkImageView* pView)
{
    mImpl->vkCreateImageView(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, pCreateInfo, pAllocator, pView);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkDestroyImageView(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkImageView imageView,
    const VkAllocationCallbacks* pAllocator)
{
    mImpl->vkDestroyImageView(snapshotTraceBegin, snapshotTraceBytes, pool, device, imageView, pAllocator);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCreateShaderModule(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkShaderModuleCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkShaderModule* pShaderModule)
{
    mImpl->vkCreateShaderModule(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, pCreateInfo, pAllocator, pShaderModule);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkDestroyShaderModule(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkShaderModule shaderModule,
    const VkAllocationCallbacks* pAllocator)
{
    mImpl->vkDestroyShaderModule(snapshotTraceBegin, snapshotTraceBytes, pool, device, shaderModule, pAllocator);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCreatePipelineCache(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkPipelineCacheCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkPipelineCache* pPipelineCache)
{
    mImpl->vkCreatePipelineCache(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, pCreateInfo, pAllocator, pPipelineCache);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkDestroyPipelineCache(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkPipelineCache pipelineCache,
    const VkAllocationCallbacks* pAllocator)
{
    mImpl->vkDestroyPipelineCache(snapshotTraceBegin, snapshotTraceBytes, pool, device, pipelineCache, pAllocator);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkGetPipelineCacheData(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkPipelineCache pipelineCache,
    size_t* pDataSize,
    void* pData)
{
    mImpl->vkGetPipelineCacheData(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, pipelineCache, pDataSize, pData);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkMergePipelineCaches(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkPipelineCache dstCache,
    uint32_t srcCacheCount,
    const VkPipelineCache* pSrcCaches)
{
    mImpl->vkMergePipelineCaches(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, dstCache, srcCacheCount, pSrcCaches);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCreateGraphicsPipelines(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkPipelineCache pipelineCache,
    uint32_t createInfoCount,
    const VkGraphicsPipelineCreateInfo* pCreateInfos,
    const VkAllocationCallbacks* pAllocator,
    VkPipeline* pPipelines)
{
    mImpl->vkCreateGraphicsPipelines(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCreateComputePipelines(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkPipelineCache pipelineCache,
    uint32_t createInfoCount,
    const VkComputePipelineCreateInfo* pCreateInfos,
    const VkAllocationCallbacks* pAllocator,
    VkPipeline* pPipelines)
{
    mImpl->vkCreateComputePipelines(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkDestroyPipeline(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkPipeline pipeline,
    const VkAllocationCallbacks* pAllocator)
{
    mImpl->vkDestroyPipeline(snapshotTraceBegin, snapshotTraceBytes, pool, device, pipeline, pAllocator);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCreatePipelineLayout(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkPipelineLayoutCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkPipelineLayout* pPipelineLayout)
{
    mImpl->vkCreatePipelineLayout(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, pCreateInfo, pAllocator, pPipelineLayout);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkDestroyPipelineLayout(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkPipelineLayout pipelineLayout,
    const VkAllocationCallbacks* pAllocator)
{
    mImpl->vkDestroyPipelineLayout(snapshotTraceBegin, snapshotTraceBytes, pool, device, pipelineLayout, pAllocator);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCreateSampler(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkSamplerCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSampler* pSampler)
{
    mImpl->vkCreateSampler(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, pCreateInfo, pAllocator, pSampler);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkDestroySampler(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkSampler sampler,
    const VkAllocationCallbacks* pAllocator)
{
    mImpl->vkDestroySampler(snapshotTraceBegin, snapshotTraceBytes, pool, device, sampler, pAllocator);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCreateDescriptorSetLayout(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkDescriptorSetLayoutCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkDescriptorSetLayout* pSetLayout)
{
    mImpl->vkCreateDescriptorSetLayout(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, pCreateInfo, pAllocator, pSetLayout);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkDestroyDescriptorSetLayout(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkDescriptorSetLayout descriptorSetLayout,
    const VkAllocationCallbacks* pAllocator)
{
    mImpl->vkDestroyDescriptorSetLayout(snapshotTraceBegin, snapshotTraceBytes, pool, device, descriptorSetLayout, pAllocator);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCreateDescriptorPool(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkDescriptorPoolCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkDescriptorPool* pDescriptorPool)
{
    mImpl->vkCreateDescriptorPool(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, pCreateInfo, pAllocator, pDescriptorPool);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkDestroyDescriptorPool(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkDescriptorPool descriptorPool,
    const VkAllocationCallbacks* pAllocator)
{
    mImpl->vkDestroyDescriptorPool(snapshotTraceBegin, snapshotTraceBytes, pool, device, descriptorPool, pAllocator);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkResetDescriptorPool(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkDescriptorPool descriptorPool,
    VkDescriptorPoolResetFlags flags)
{
    mImpl->vkResetDescriptorPool(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, descriptorPool, flags);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkAllocateDescriptorSets(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkDescriptorSetAllocateInfo* pAllocateInfo,
    VkDescriptorSet* pDescriptorSets)
{
    mImpl->vkAllocateDescriptorSets(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, pAllocateInfo, pDescriptorSets);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkFreeDescriptorSets(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkDescriptorPool descriptorPool,
    uint32_t descriptorSetCount,
    const VkDescriptorSet* pDescriptorSets)
{
    mImpl->vkFreeDescriptorSets(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, descriptorPool, descriptorSetCount, pDescriptorSets);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkUpdateDescriptorSets(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    uint32_t descriptorWriteCount,
    const VkWriteDescriptorSet* pDescriptorWrites,
    uint32_t descriptorCopyCount,
    const VkCopyDescriptorSet* pDescriptorCopies)
{
    mImpl->vkUpdateDescriptorSets(snapshotTraceBegin, snapshotTraceBytes, pool, device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCreateFramebuffer(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkFramebufferCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkFramebuffer* pFramebuffer)
{
    mImpl->vkCreateFramebuffer(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, pCreateInfo, pAllocator, pFramebuffer);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkDestroyFramebuffer(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkFramebuffer framebuffer,
    const VkAllocationCallbacks* pAllocator)
{
    mImpl->vkDestroyFramebuffer(snapshotTraceBegin, snapshotTraceBytes, pool, device, framebuffer, pAllocator);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCreateRenderPass(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkRenderPassCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkRenderPass* pRenderPass)
{
    mImpl->vkCreateRenderPass(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, pCreateInfo, pAllocator, pRenderPass);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkDestroyRenderPass(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkRenderPass renderPass,
    const VkAllocationCallbacks* pAllocator)
{
    mImpl->vkDestroyRenderPass(snapshotTraceBegin, snapshotTraceBytes, pool, device, renderPass, pAllocator);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkGetRenderAreaGranularity(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkRenderPass renderPass,
    VkExtent2D* pGranularity)
{
    mImpl->vkGetRenderAreaGranularity(snapshotTraceBegin, snapshotTraceBytes, pool, device, renderPass, pGranularity);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCreateCommandPool(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkCommandPoolCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkCommandPool* pCommandPool)
{
    mImpl->vkCreateCommandPool(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, pCreateInfo, pAllocator, pCommandPool);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkDestroyCommandPool(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkCommandPool commandPool,
    const VkAllocationCallbacks* pAllocator)
{
    mImpl->vkDestroyCommandPool(snapshotTraceBegin, snapshotTraceBytes, pool, device, commandPool, pAllocator);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkResetCommandPool(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkCommandPool commandPool,
    VkCommandPoolResetFlags flags)
{
    mImpl->vkResetCommandPool(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, commandPool, flags);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkAllocateCommandBuffers(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkCommandBufferAllocateInfo* pAllocateInfo,
    VkCommandBuffer* pCommandBuffers)
{
    mImpl->vkAllocateCommandBuffers(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, pAllocateInfo, pCommandBuffers);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkFreeCommandBuffers(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkCommandPool commandPool,
    uint32_t commandBufferCount,
    const VkCommandBuffer* pCommandBuffers)
{
    mImpl->vkFreeCommandBuffers(snapshotTraceBegin, snapshotTraceBytes, pool, device, commandPool, commandBufferCount, pCommandBuffers);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkBeginCommandBuffer(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkCommandBuffer commandBuffer,
    const VkCommandBufferBeginInfo* pBeginInfo)
{
    mImpl->vkBeginCommandBuffer(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, commandBuffer, pBeginInfo);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkEndCommandBuffer(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkCommandBuffer commandBuffer)
{
    mImpl->vkEndCommandBuffer(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, commandBuffer);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkResetCommandBuffer(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkCommandBuffer commandBuffer,
    VkCommandBufferResetFlags flags)
{
    mImpl->vkResetCommandBuffer(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, commandBuffer, flags);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCmdBindPipeline(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkPipelineBindPoint pipelineBindPoint,
    VkPipeline pipeline)
{
    mImpl->vkCmdBindPipeline(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, pipelineBindPoint, pipeline);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCmdSetViewport(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    uint32_t firstViewport,
    uint32_t viewportCount,
    const VkViewport* pViewports)
{
    mImpl->vkCmdSetViewport(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, firstViewport, viewportCount, pViewports);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCmdSetScissor(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    uint32_t firstScissor,
    uint32_t scissorCount,
    const VkRect2D* pScissors)
{
    mImpl->vkCmdSetScissor(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, firstScissor, scissorCount, pScissors);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCmdSetLineWidth(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    float lineWidth)
{
    mImpl->vkCmdSetLineWidth(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, lineWidth);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCmdSetDepthBias(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    float depthBiasConstantFactor,
    float depthBiasClamp,
    float depthBiasSlopeFactor)
{
    mImpl->vkCmdSetDepthBias(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, depthBiasConstantFactor, depthBiasClamp, depthBiasSlopeFactor);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCmdSetBlendConstants(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    const float blendConstants[4])
{
    mImpl->vkCmdSetBlendConstants(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, blendConstants);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCmdSetDepthBounds(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    float minDepthBounds,
    float maxDepthBounds)
{
    mImpl->vkCmdSetDepthBounds(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, minDepthBounds, maxDepthBounds);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCmdSetStencilCompareMask(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkStencilFaceFlags faceMask,
    uint32_t compareMask)
{
    mImpl->vkCmdSetStencilCompareMask(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, faceMask, compareMask);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCmdSetStencilWriteMask(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkStencilFaceFlags faceMask,
    uint32_t writeMask)
{
    mImpl->vkCmdSetStencilWriteMask(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, faceMask, writeMask);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCmdSetStencilReference(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkStencilFaceFlags faceMask,
    uint32_t reference)
{
    mImpl->vkCmdSetStencilReference(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, faceMask, reference);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCmdBindDescriptorSets(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkPipelineBindPoint pipelineBindPoint,
    VkPipelineLayout layout,
    uint32_t firstSet,
    uint32_t descriptorSetCount,
    const VkDescriptorSet* pDescriptorSets,
    uint32_t dynamicOffsetCount,
    const uint32_t* pDynamicOffsets)
{
    mImpl->vkCmdBindDescriptorSets(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCmdBindIndexBuffer(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkBuffer buffer,
    VkDeviceSize offset,
    VkIndexType indexType)
{
    mImpl->vkCmdBindIndexBuffer(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, buffer, offset, indexType);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCmdBindVertexBuffers(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    uint32_t firstBinding,
    uint32_t bindingCount,
    const VkBuffer* pBuffers,
    const VkDeviceSize* pOffsets)
{
    mImpl->vkCmdBindVertexBuffers(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCmdDraw(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    uint32_t vertexCount,
    uint32_t instanceCount,
    uint32_t firstVertex,
    uint32_t firstInstance)
{
    mImpl->vkCmdDraw(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCmdDrawIndexed(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    uint32_t indexCount,
    uint32_t instanceCount,
    uint32_t firstIndex,
    int32_t vertexOffset,
    uint32_t firstInstance)
{
    mImpl->vkCmdDrawIndexed(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCmdDrawIndirect(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkBuffer buffer,
    VkDeviceSize offset,
    uint32_t drawCount,
    uint32_t stride)
{
    mImpl->vkCmdDrawIndirect(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, buffer, offset, drawCount, stride);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCmdDrawIndexedIndirect(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkBuffer buffer,
    VkDeviceSize offset,
    uint32_t drawCount,
    uint32_t stride)
{
    mImpl->vkCmdDrawIndexedIndirect(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, buffer, offset, drawCount, stride);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCmdDispatch(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    uint32_t groupCountX,
    uint32_t groupCountY,
    uint32_t groupCountZ)
{
    mImpl->vkCmdDispatch(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, groupCountX, groupCountY, groupCountZ);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCmdDispatchIndirect(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkBuffer buffer,
    VkDeviceSize offset)
{
    mImpl->vkCmdDispatchIndirect(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, buffer, offset);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCmdCopyBuffer(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkBuffer srcBuffer,
    VkBuffer dstBuffer,
    uint32_t regionCount,
    const VkBufferCopy* pRegions)
{
    mImpl->vkCmdCopyBuffer(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, srcBuffer, dstBuffer, regionCount, pRegions);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCmdCopyImage(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkImage srcImage,
    VkImageLayout srcImageLayout,
    VkImage dstImage,
    VkImageLayout dstImageLayout,
    uint32_t regionCount,
    const VkImageCopy* pRegions)
{
    mImpl->vkCmdCopyImage(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCmdBlitImage(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkImage srcImage,
    VkImageLayout srcImageLayout,
    VkImage dstImage,
    VkImageLayout dstImageLayout,
    uint32_t regionCount,
    const VkImageBlit* pRegions,
    VkFilter filter)
{
    mImpl->vkCmdBlitImage(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions, filter);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCmdCopyBufferToImage(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkBuffer srcBuffer,
    VkImage dstImage,
    VkImageLayout dstImageLayout,
    uint32_t regionCount,
    const VkBufferImageCopy* pRegions)
{
    mImpl->vkCmdCopyBufferToImage(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, srcBuffer, dstImage, dstImageLayout, regionCount, pRegions);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCmdCopyImageToBuffer(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkImage srcImage,
    VkImageLayout srcImageLayout,
    VkBuffer dstBuffer,
    uint32_t regionCount,
    const VkBufferImageCopy* pRegions)
{
    mImpl->vkCmdCopyImageToBuffer(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, srcImage, srcImageLayout, dstBuffer, regionCount, pRegions);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCmdUpdateBuffer(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkBuffer dstBuffer,
    VkDeviceSize dstOffset,
    VkDeviceSize dataSize,
    const void* pData)
{
    mImpl->vkCmdUpdateBuffer(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, dstBuffer, dstOffset, dataSize, pData);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCmdFillBuffer(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkBuffer dstBuffer,
    VkDeviceSize dstOffset,
    VkDeviceSize size,
    uint32_t data)
{
    mImpl->vkCmdFillBuffer(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, dstBuffer, dstOffset, size, data);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCmdClearColorImage(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkImage image,
    VkImageLayout imageLayout,
    const VkClearColorValue* pColor,
    uint32_t rangeCount,
    const VkImageSubresourceRange* pRanges)
{
    mImpl->vkCmdClearColorImage(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, image, imageLayout, pColor, rangeCount, pRanges);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCmdClearDepthStencilImage(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkImage image,
    VkImageLayout imageLayout,
    const VkClearDepthStencilValue* pDepthStencil,
    uint32_t rangeCount,
    const VkImageSubresourceRange* pRanges)
{
    mImpl->vkCmdClearDepthStencilImage(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, image, imageLayout, pDepthStencil, rangeCount, pRanges);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCmdClearAttachments(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    uint32_t attachmentCount,
    const VkClearAttachment* pAttachments,
    uint32_t rectCount,
    const VkClearRect* pRects)
{
    mImpl->vkCmdClearAttachments(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, attachmentCount, pAttachments, rectCount, pRects);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCmdResolveImage(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkImage srcImage,
    VkImageLayout srcImageLayout,
    VkImage dstImage,
    VkImageLayout dstImageLayout,
    uint32_t regionCount,
    const VkImageResolve* pRegions)
{
    mImpl->vkCmdResolveImage(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCmdSetEvent(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkEvent event,
    VkPipelineStageFlags stageMask)
{
    mImpl->vkCmdSetEvent(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, event, stageMask);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCmdResetEvent(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkEvent event,
    VkPipelineStageFlags stageMask)
{
    mImpl->vkCmdResetEvent(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, event, stageMask);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCmdWaitEvents(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    uint32_t eventCount,
    const VkEvent* pEvents,
    VkPipelineStageFlags srcStageMask,
    VkPipelineStageFlags dstStageMask,
    uint32_t memoryBarrierCount,
    const VkMemoryBarrier* pMemoryBarriers,
    uint32_t bufferMemoryBarrierCount,
    const VkBufferMemoryBarrier* pBufferMemoryBarriers,
    uint32_t imageMemoryBarrierCount,
    const VkImageMemoryBarrier* pImageMemoryBarriers)
{
    mImpl->vkCmdWaitEvents(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, eventCount, pEvents, srcStageMask, dstStageMask, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCmdPipelineBarrier(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkPipelineStageFlags srcStageMask,
    VkPipelineStageFlags dstStageMask,
    VkDependencyFlags dependencyFlags,
    uint32_t memoryBarrierCount,
    const VkMemoryBarrier* pMemoryBarriers,
    uint32_t bufferMemoryBarrierCount,
    const VkBufferMemoryBarrier* pBufferMemoryBarriers,
    uint32_t imageMemoryBarrierCount,
    const VkImageMemoryBarrier* pImageMemoryBarriers)
{
    mImpl->vkCmdPipelineBarrier(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCmdBeginQuery(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkQueryPool queryPool,
    uint32_t query,
    VkQueryControlFlags flags)
{
    mImpl->vkCmdBeginQuery(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, queryPool, query, flags);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCmdEndQuery(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkQueryPool queryPool,
    uint32_t query)
{
    mImpl->vkCmdEndQuery(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, queryPool, query);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCmdResetQueryPool(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkQueryPool queryPool,
    uint32_t firstQuery,
    uint32_t queryCount)
{
    mImpl->vkCmdResetQueryPool(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, queryPool, firstQuery, queryCount);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCmdWriteTimestamp(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkPipelineStageFlagBits pipelineStage,
    VkQueryPool queryPool,
    uint32_t query)
{
    mImpl->vkCmdWriteTimestamp(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, pipelineStage, queryPool, query);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCmdCopyQueryPoolResults(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkQueryPool queryPool,
    uint32_t firstQuery,
    uint32_t queryCount,
    VkBuffer dstBuffer,
    VkDeviceSize dstOffset,
    VkDeviceSize stride,
    VkQueryResultFlags flags)
{
    mImpl->vkCmdCopyQueryPoolResults(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, queryPool, firstQuery, queryCount, dstBuffer, dstOffset, stride, flags);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCmdPushConstants(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkPipelineLayout layout,
    VkShaderStageFlags stageFlags,
    uint32_t offset,
    uint32_t size,
    const void* pValues)
{
    mImpl->vkCmdPushConstants(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, layout, stageFlags, offset, size, pValues);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCmdBeginRenderPass(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    const VkRenderPassBeginInfo* pRenderPassBegin,
    VkSubpassContents contents)
{
    mImpl->vkCmdBeginRenderPass(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, pRenderPassBegin, contents);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCmdNextSubpass(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkSubpassContents contents)
{
    mImpl->vkCmdNextSubpass(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, contents);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCmdEndRenderPass(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer)
{
    mImpl->vkCmdEndRenderPass(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCmdExecuteCommands(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    uint32_t commandBufferCount,
    const VkCommandBuffer* pCommandBuffers)
{
    mImpl->vkCmdExecuteCommands(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, commandBufferCount, pCommandBuffers);
}
#endif
#ifdef VK_VERSION_1_1
void VkDecoderSnapshot::vkEnumerateInstanceVersion(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    uint32_t* pApiVersion)
{
    mImpl->vkEnumerateInstanceVersion(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, pApiVersion);
}
#endif
#ifdef VK_VERSION_1_1
void VkDecoderSnapshot::vkBindBufferMemory2(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    uint32_t bindInfoCount,
    const VkBindBufferMemoryInfo* pBindInfos)
{
    mImpl->vkBindBufferMemory2(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, bindInfoCount, pBindInfos);
}
#endif
#ifdef VK_VERSION_1_1
void VkDecoderSnapshot::vkBindImageMemory2(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    uint32_t bindInfoCount,
    const VkBindImageMemoryInfo* pBindInfos)
{
    mImpl->vkBindImageMemory2(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, bindInfoCount, pBindInfos);
}
#endif
#ifdef VK_VERSION_1_1
void VkDecoderSnapshot::vkGetDeviceGroupPeerMemoryFeatures(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    uint32_t heapIndex,
    uint32_t localDeviceIndex,
    uint32_t remoteDeviceIndex,
    VkPeerMemoryFeatureFlags* pPeerMemoryFeatures)
{
    mImpl->vkGetDeviceGroupPeerMemoryFeatures(snapshotTraceBegin, snapshotTraceBytes, pool, device, heapIndex, localDeviceIndex, remoteDeviceIndex, pPeerMemoryFeatures);
}
#endif
#ifdef VK_VERSION_1_1
void VkDecoderSnapshot::vkCmdSetDeviceMask(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    uint32_t deviceMask)
{
    mImpl->vkCmdSetDeviceMask(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, deviceMask);
}
#endif
#ifdef VK_VERSION_1_1
void VkDecoderSnapshot::vkCmdDispatchBase(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    uint32_t baseGroupX,
    uint32_t baseGroupY,
    uint32_t baseGroupZ,
    uint32_t groupCountX,
    uint32_t groupCountY,
    uint32_t groupCountZ)
{
    mImpl->vkCmdDispatchBase(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ);
}
#endif
#ifdef VK_VERSION_1_1
void VkDecoderSnapshot::vkEnumeratePhysicalDeviceGroups(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkInstance instance,
    uint32_t* pPhysicalDeviceGroupCount,
    VkPhysicalDeviceGroupProperties* pPhysicalDeviceGroupProperties)
{
    mImpl->vkEnumeratePhysicalDeviceGroups(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, instance, pPhysicalDeviceGroupCount, pPhysicalDeviceGroupProperties);
}
#endif
#ifdef VK_VERSION_1_1
void VkDecoderSnapshot::vkGetImageMemoryRequirements2(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    const VkImageMemoryRequirementsInfo2* pInfo,
    VkMemoryRequirements2* pMemoryRequirements)
{
    mImpl->vkGetImageMemoryRequirements2(snapshotTraceBegin, snapshotTraceBytes, pool, device, pInfo, pMemoryRequirements);
}
#endif
#ifdef VK_VERSION_1_1
void VkDecoderSnapshot::vkGetBufferMemoryRequirements2(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    const VkBufferMemoryRequirementsInfo2* pInfo,
    VkMemoryRequirements2* pMemoryRequirements)
{
    mImpl->vkGetBufferMemoryRequirements2(snapshotTraceBegin, snapshotTraceBytes, pool, device, pInfo, pMemoryRequirements);
}
#endif
#ifdef VK_VERSION_1_1
void VkDecoderSnapshot::vkGetImageSparseMemoryRequirements2(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    const VkImageSparseMemoryRequirementsInfo2* pInfo,
    uint32_t* pSparseMemoryRequirementCount,
    VkSparseImageMemoryRequirements2* pSparseMemoryRequirements)
{
    mImpl->vkGetImageSparseMemoryRequirements2(snapshotTraceBegin, snapshotTraceBytes, pool, device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
}
#endif
#ifdef VK_VERSION_1_1
void VkDecoderSnapshot::vkGetPhysicalDeviceFeatures2(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkPhysicalDevice physicalDevice,
    VkPhysicalDeviceFeatures2* pFeatures)
{
    mImpl->vkGetPhysicalDeviceFeatures2(snapshotTraceBegin, snapshotTraceBytes, pool, physicalDevice, pFeatures);
}
#endif
#ifdef VK_VERSION_1_1
void VkDecoderSnapshot::vkGetPhysicalDeviceProperties2(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkPhysicalDevice physicalDevice,
    VkPhysicalDeviceProperties2* pProperties)
{
    mImpl->vkGetPhysicalDeviceProperties2(snapshotTraceBegin, snapshotTraceBytes, pool, physicalDevice, pProperties);
}
#endif
#ifdef VK_VERSION_1_1
void VkDecoderSnapshot::vkGetPhysicalDeviceFormatProperties2(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkPhysicalDevice physicalDevice,
    VkFormat format,
    VkFormatProperties2* pFormatProperties)
{
    mImpl->vkGetPhysicalDeviceFormatProperties2(snapshotTraceBegin, snapshotTraceBytes, pool, physicalDevice, format, pFormatProperties);
}
#endif
#ifdef VK_VERSION_1_1
void VkDecoderSnapshot::vkGetPhysicalDeviceImageFormatProperties2(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    const VkPhysicalDeviceImageFormatInfo2* pImageFormatInfo,
    VkImageFormatProperties2* pImageFormatProperties)
{
    mImpl->vkGetPhysicalDeviceImageFormatProperties2(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, physicalDevice, pImageFormatInfo, pImageFormatProperties);
}
#endif
#ifdef VK_VERSION_1_1
void VkDecoderSnapshot::vkGetPhysicalDeviceQueueFamilyProperties2(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkPhysicalDevice physicalDevice,
    uint32_t* pQueueFamilyPropertyCount,
    VkQueueFamilyProperties2* pQueueFamilyProperties)
{
    mImpl->vkGetPhysicalDeviceQueueFamilyProperties2(snapshotTraceBegin, snapshotTraceBytes, pool, physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties);
}
#endif
#ifdef VK_VERSION_1_1
void VkDecoderSnapshot::vkGetPhysicalDeviceMemoryProperties2(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkPhysicalDevice physicalDevice,
    VkPhysicalDeviceMemoryProperties2* pMemoryProperties)
{
    mImpl->vkGetPhysicalDeviceMemoryProperties2(snapshotTraceBegin, snapshotTraceBytes, pool, physicalDevice, pMemoryProperties);
}
#endif
#ifdef VK_VERSION_1_1
void VkDecoderSnapshot::vkGetPhysicalDeviceSparseImageFormatProperties2(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkPhysicalDevice physicalDevice,
    const VkPhysicalDeviceSparseImageFormatInfo2* pFormatInfo,
    uint32_t* pPropertyCount,
    VkSparseImageFormatProperties2* pProperties)
{
    mImpl->vkGetPhysicalDeviceSparseImageFormatProperties2(snapshotTraceBegin, snapshotTraceBytes, pool, physicalDevice, pFormatInfo, pPropertyCount, pProperties);
}
#endif
#ifdef VK_VERSION_1_1
void VkDecoderSnapshot::vkTrimCommandPool(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkCommandPool commandPool,
    VkCommandPoolTrimFlags flags)
{
    mImpl->vkTrimCommandPool(snapshotTraceBegin, snapshotTraceBytes, pool, device, commandPool, flags);
}
#endif
#ifdef VK_VERSION_1_1
void VkDecoderSnapshot::vkGetDeviceQueue2(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    const VkDeviceQueueInfo2* pQueueInfo,
    VkQueue* pQueue)
{
    mImpl->vkGetDeviceQueue2(snapshotTraceBegin, snapshotTraceBytes, pool, device, pQueueInfo, pQueue);
}
#endif
#ifdef VK_VERSION_1_1
void VkDecoderSnapshot::vkCreateSamplerYcbcrConversion(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkSamplerYcbcrConversionCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSamplerYcbcrConversion* pYcbcrConversion)
{
    mImpl->vkCreateSamplerYcbcrConversion(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, pCreateInfo, pAllocator, pYcbcrConversion);
}
#endif
#ifdef VK_VERSION_1_1
void VkDecoderSnapshot::vkDestroySamplerYcbcrConversion(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkSamplerYcbcrConversion ycbcrConversion,
    const VkAllocationCallbacks* pAllocator)
{
    mImpl->vkDestroySamplerYcbcrConversion(snapshotTraceBegin, snapshotTraceBytes, pool, device, ycbcrConversion, pAllocator);
}
#endif
#ifdef VK_VERSION_1_1
void VkDecoderSnapshot::vkCreateDescriptorUpdateTemplate(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkDescriptorUpdateTemplateCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkDescriptorUpdateTemplate* pDescriptorUpdateTemplate)
{
    mImpl->vkCreateDescriptorUpdateTemplate(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, pCreateInfo, pAllocator, pDescriptorUpdateTemplate);
}
#endif
#ifdef VK_VERSION_1_1
void VkDecoderSnapshot::vkDestroyDescriptorUpdateTemplate(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkDescriptorUpdateTemplate descriptorUpdateTemplate,
    const VkAllocationCallbacks* pAllocator)
{
    mImpl->vkDestroyDescriptorUpdateTemplate(snapshotTraceBegin, snapshotTraceBytes, pool, device, descriptorUpdateTemplate, pAllocator);
}
#endif
#ifdef VK_VERSION_1_1
void VkDecoderSnapshot::vkUpdateDescriptorSetWithTemplate(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkDescriptorSet descriptorSet,
    VkDescriptorUpdateTemplate descriptorUpdateTemplate,
    const void* pData)
{
    mImpl->vkUpdateDescriptorSetWithTemplate(snapshotTraceBegin, snapshotTraceBytes, pool, device, descriptorSet, descriptorUpdateTemplate, pData);
}
#endif
#ifdef VK_VERSION_1_1
void VkDecoderSnapshot::vkGetPhysicalDeviceExternalBufferProperties(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkPhysicalDevice physicalDevice,
    const VkPhysicalDeviceExternalBufferInfo* pExternalBufferInfo,
    VkExternalBufferProperties* pExternalBufferProperties)
{
    mImpl->vkGetPhysicalDeviceExternalBufferProperties(snapshotTraceBegin, snapshotTraceBytes, pool, physicalDevice, pExternalBufferInfo, pExternalBufferProperties);
}
#endif
#ifdef VK_VERSION_1_1
void VkDecoderSnapshot::vkGetPhysicalDeviceExternalFenceProperties(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkPhysicalDevice physicalDevice,
    const VkPhysicalDeviceExternalFenceInfo* pExternalFenceInfo,
    VkExternalFenceProperties* pExternalFenceProperties)
{
    mImpl->vkGetPhysicalDeviceExternalFenceProperties(snapshotTraceBegin, snapshotTraceBytes, pool, physicalDevice, pExternalFenceInfo, pExternalFenceProperties);
}
#endif
#ifdef VK_VERSION_1_1
void VkDecoderSnapshot::vkGetPhysicalDeviceExternalSemaphoreProperties(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkPhysicalDevice physicalDevice,
    const VkPhysicalDeviceExternalSemaphoreInfo* pExternalSemaphoreInfo,
    VkExternalSemaphoreProperties* pExternalSemaphoreProperties)
{
    mImpl->vkGetPhysicalDeviceExternalSemaphoreProperties(snapshotTraceBegin, snapshotTraceBytes, pool, physicalDevice, pExternalSemaphoreInfo, pExternalSemaphoreProperties);
}
#endif
#ifdef VK_VERSION_1_1
void VkDecoderSnapshot::vkGetDescriptorSetLayoutSupport(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    const VkDescriptorSetLayoutCreateInfo* pCreateInfo,
    VkDescriptorSetLayoutSupport* pSupport)
{
    mImpl->vkGetDescriptorSetLayoutSupport(snapshotTraceBegin, snapshotTraceBytes, pool, device, pCreateInfo, pSupport);
}
#endif
#ifdef VK_VERSION_1_2
void VkDecoderSnapshot::vkCmdDrawIndirectCount(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkBuffer buffer,
    VkDeviceSize offset,
    VkBuffer countBuffer,
    VkDeviceSize countBufferOffset,
    uint32_t maxDrawCount,
    uint32_t stride)
{
    mImpl->vkCmdDrawIndirectCount(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
}
#endif
#ifdef VK_VERSION_1_2
void VkDecoderSnapshot::vkCmdDrawIndexedIndirectCount(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkBuffer buffer,
    VkDeviceSize offset,
    VkBuffer countBuffer,
    VkDeviceSize countBufferOffset,
    uint32_t maxDrawCount,
    uint32_t stride)
{
    mImpl->vkCmdDrawIndexedIndirectCount(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
}
#endif
#ifdef VK_VERSION_1_2
void VkDecoderSnapshot::vkCreateRenderPass2(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkRenderPassCreateInfo2* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkRenderPass* pRenderPass)
{
    mImpl->vkCreateRenderPass2(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, pCreateInfo, pAllocator, pRenderPass);
}
#endif
#ifdef VK_VERSION_1_2
void VkDecoderSnapshot::vkCmdBeginRenderPass2(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    const VkRenderPassBeginInfo* pRenderPassBegin,
    const VkSubpassBeginInfo* pSubpassBeginInfo)
{
    mImpl->vkCmdBeginRenderPass2(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, pRenderPassBegin, pSubpassBeginInfo);
}
#endif
#ifdef VK_VERSION_1_2
void VkDecoderSnapshot::vkCmdNextSubpass2(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    const VkSubpassBeginInfo* pSubpassBeginInfo,
    const VkSubpassEndInfo* pSubpassEndInfo)
{
    mImpl->vkCmdNextSubpass2(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, pSubpassBeginInfo, pSubpassEndInfo);
}
#endif
#ifdef VK_VERSION_1_2
void VkDecoderSnapshot::vkCmdEndRenderPass2(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    const VkSubpassEndInfo* pSubpassEndInfo)
{
    mImpl->vkCmdEndRenderPass2(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, pSubpassEndInfo);
}
#endif
#ifdef VK_VERSION_1_2
void VkDecoderSnapshot::vkResetQueryPool(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkQueryPool queryPool,
    uint32_t firstQuery,
    uint32_t queryCount)
{
    mImpl->vkResetQueryPool(snapshotTraceBegin, snapshotTraceBytes, pool, device, queryPool, firstQuery, queryCount);
}
#endif
#ifdef VK_VERSION_1_2
void VkDecoderSnapshot::vkGetSemaphoreCounterValue(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkSemaphore semaphore,
    uint64_t* pValue)
{
    mImpl->vkGetSemaphoreCounterValue(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, semaphore, pValue);
}
#endif
#ifdef VK_VERSION_1_2
void VkDecoderSnapshot::vkWaitSemaphores(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkSemaphoreWaitInfo* pWaitInfo,
    uint64_t timeout)
{
    mImpl->vkWaitSemaphores(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, pWaitInfo, timeout);
}
#endif
#ifdef VK_VERSION_1_2
void VkDecoderSnapshot::vkSignalSemaphore(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkSemaphoreSignalInfo* pSignalInfo)
{
    mImpl->vkSignalSemaphore(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, pSignalInfo);
}
#endif
#ifdef VK_VERSION_1_2
void VkDecoderSnapshot::vkGetBufferDeviceAddress(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDeviceAddress input_result,
    VkDevice device,
    const VkBufferDeviceAddressInfo* pInfo)
{
    mImpl->vkGetBufferDeviceAddress(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, pInfo);
}
#endif
#ifdef VK_VERSION_1_2
void VkDecoderSnapshot::vkGetBufferOpaqueCaptureAddress(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    uint64_t input_result,
    VkDevice device,
    const VkBufferDeviceAddressInfo* pInfo)
{
    mImpl->vkGetBufferOpaqueCaptureAddress(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, pInfo);
}
#endif
#ifdef VK_VERSION_1_2
void VkDecoderSnapshot::vkGetDeviceMemoryOpaqueCaptureAddress(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    uint64_t input_result,
    VkDevice device,
    const VkDeviceMemoryOpaqueCaptureAddressInfo* pInfo)
{
    mImpl->vkGetDeviceMemoryOpaqueCaptureAddress(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, pInfo);
}
#endif
#ifdef VK_KHR_surface
void VkDecoderSnapshot::vkDestroySurfaceKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkInstance instance,
    VkSurfaceKHR surface,
    const VkAllocationCallbacks* pAllocator)
{
    mImpl->vkDestroySurfaceKHR(snapshotTraceBegin, snapshotTraceBytes, pool, instance, surface, pAllocator);
}
#endif
#ifdef VK_KHR_surface
void VkDecoderSnapshot::vkGetPhysicalDeviceSurfaceSupportKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    uint32_t queueFamilyIndex,
    VkSurfaceKHR surface,
    VkBool32* pSupported)
{
    mImpl->vkGetPhysicalDeviceSurfaceSupportKHR(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, physicalDevice, queueFamilyIndex, surface, pSupported);
}
#endif
#ifdef VK_KHR_surface
void VkDecoderSnapshot::vkGetPhysicalDeviceSurfaceCapabilitiesKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    VkSurfaceKHR surface,
    VkSurfaceCapabilitiesKHR* pSurfaceCapabilities)
{
    mImpl->vkGetPhysicalDeviceSurfaceCapabilitiesKHR(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, physicalDevice, surface, pSurfaceCapabilities);
}
#endif
#ifdef VK_KHR_surface
void VkDecoderSnapshot::vkGetPhysicalDeviceSurfaceFormatsKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    VkSurfaceKHR surface,
    uint32_t* pSurfaceFormatCount,
    VkSurfaceFormatKHR* pSurfaceFormats)
{
    mImpl->vkGetPhysicalDeviceSurfaceFormatsKHR(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, physicalDevice, surface, pSurfaceFormatCount, pSurfaceFormats);
}
#endif
#ifdef VK_KHR_surface
void VkDecoderSnapshot::vkGetPhysicalDeviceSurfacePresentModesKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    VkSurfaceKHR surface,
    uint32_t* pPresentModeCount,
    VkPresentModeKHR* pPresentModes)
{
    mImpl->vkGetPhysicalDeviceSurfacePresentModesKHR(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, physicalDevice, surface, pPresentModeCount, pPresentModes);
}
#endif
#ifdef VK_KHR_swapchain
void VkDecoderSnapshot::vkCreateSwapchainKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkSwapchainCreateInfoKHR* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSwapchainKHR* pSwapchain)
{
    mImpl->vkCreateSwapchainKHR(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, pCreateInfo, pAllocator, pSwapchain);
}
#endif
#ifdef VK_KHR_swapchain
void VkDecoderSnapshot::vkDestroySwapchainKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkSwapchainKHR swapchain,
    const VkAllocationCallbacks* pAllocator)
{
    mImpl->vkDestroySwapchainKHR(snapshotTraceBegin, snapshotTraceBytes, pool, device, swapchain, pAllocator);
}
#endif
#ifdef VK_KHR_swapchain
void VkDecoderSnapshot::vkGetSwapchainImagesKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkSwapchainKHR swapchain,
    uint32_t* pSwapchainImageCount,
    VkImage* pSwapchainImages)
{
    mImpl->vkGetSwapchainImagesKHR(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, swapchain, pSwapchainImageCount, pSwapchainImages);
}
#endif
#ifdef VK_KHR_swapchain
void VkDecoderSnapshot::vkAcquireNextImageKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkSwapchainKHR swapchain,
    uint64_t timeout,
    VkSemaphore semaphore,
    VkFence fence,
    uint32_t* pImageIndex)
{
    mImpl->vkAcquireNextImageKHR(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, swapchain, timeout, semaphore, fence, pImageIndex);
}
#endif
#ifdef VK_KHR_swapchain
void VkDecoderSnapshot::vkQueuePresentKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkQueue queue,
    const VkPresentInfoKHR* pPresentInfo)
{
    mImpl->vkQueuePresentKHR(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, queue, pPresentInfo);
}
#endif
#ifdef VK_KHR_swapchain
void VkDecoderSnapshot::vkGetDeviceGroupPresentCapabilitiesKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkDeviceGroupPresentCapabilitiesKHR* pDeviceGroupPresentCapabilities)
{
    mImpl->vkGetDeviceGroupPresentCapabilitiesKHR(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, pDeviceGroupPresentCapabilities);
}
#endif
#ifdef VK_KHR_swapchain
void VkDecoderSnapshot::vkGetDeviceGroupSurfacePresentModesKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkSurfaceKHR surface,
    VkDeviceGroupPresentModeFlagsKHR* pModes)
{
    mImpl->vkGetDeviceGroupSurfacePresentModesKHR(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, surface, pModes);
}
#endif
#ifdef VK_KHR_swapchain
void VkDecoderSnapshot::vkGetPhysicalDevicePresentRectanglesKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    VkSurfaceKHR surface,
    uint32_t* pRectCount,
    VkRect2D* pRects)
{
    mImpl->vkGetPhysicalDevicePresentRectanglesKHR(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, physicalDevice, surface, pRectCount, pRects);
}
#endif
#ifdef VK_KHR_swapchain
void VkDecoderSnapshot::vkAcquireNextImage2KHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkAcquireNextImageInfoKHR* pAcquireInfo,
    uint32_t* pImageIndex)
{
    mImpl->vkAcquireNextImage2KHR(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, pAcquireInfo, pImageIndex);
}
#endif
#ifdef VK_KHR_display
void VkDecoderSnapshot::vkGetPhysicalDeviceDisplayPropertiesKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    uint32_t* pPropertyCount,
    VkDisplayPropertiesKHR* pProperties)
{
    mImpl->vkGetPhysicalDeviceDisplayPropertiesKHR(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, physicalDevice, pPropertyCount, pProperties);
}
#endif
#ifdef VK_KHR_display
void VkDecoderSnapshot::vkGetPhysicalDeviceDisplayPlanePropertiesKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    uint32_t* pPropertyCount,
    VkDisplayPlanePropertiesKHR* pProperties)
{
    mImpl->vkGetPhysicalDeviceDisplayPlanePropertiesKHR(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, physicalDevice, pPropertyCount, pProperties);
}
#endif
#ifdef VK_KHR_display
void VkDecoderSnapshot::vkGetDisplayPlaneSupportedDisplaysKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    uint32_t planeIndex,
    uint32_t* pDisplayCount,
    VkDisplayKHR* pDisplays)
{
    mImpl->vkGetDisplayPlaneSupportedDisplaysKHR(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, physicalDevice, planeIndex, pDisplayCount, pDisplays);
}
#endif
#ifdef VK_KHR_display
void VkDecoderSnapshot::vkGetDisplayModePropertiesKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    VkDisplayKHR display,
    uint32_t* pPropertyCount,
    VkDisplayModePropertiesKHR* pProperties)
{
    mImpl->vkGetDisplayModePropertiesKHR(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, physicalDevice, display, pPropertyCount, pProperties);
}
#endif
#ifdef VK_KHR_display
void VkDecoderSnapshot::vkCreateDisplayModeKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    VkDisplayKHR display,
    const VkDisplayModeCreateInfoKHR* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkDisplayModeKHR* pMode)
{
    mImpl->vkCreateDisplayModeKHR(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, physicalDevice, display, pCreateInfo, pAllocator, pMode);
}
#endif
#ifdef VK_KHR_display
void VkDecoderSnapshot::vkGetDisplayPlaneCapabilitiesKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    VkDisplayModeKHR mode,
    uint32_t planeIndex,
    VkDisplayPlaneCapabilitiesKHR* pCapabilities)
{
    mImpl->vkGetDisplayPlaneCapabilitiesKHR(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, physicalDevice, mode, planeIndex, pCapabilities);
}
#endif
#ifdef VK_KHR_display
void VkDecoderSnapshot::vkCreateDisplayPlaneSurfaceKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkInstance instance,
    const VkDisplaySurfaceCreateInfoKHR* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSurfaceKHR* pSurface)
{
    mImpl->vkCreateDisplayPlaneSurfaceKHR(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, instance, pCreateInfo, pAllocator, pSurface);
}
#endif
#ifdef VK_KHR_display_swapchain
void VkDecoderSnapshot::vkCreateSharedSwapchainsKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    uint32_t swapchainCount,
    const VkSwapchainCreateInfoKHR* pCreateInfos,
    const VkAllocationCallbacks* pAllocator,
    VkSwapchainKHR* pSwapchains)
{
    mImpl->vkCreateSharedSwapchainsKHR(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, swapchainCount, pCreateInfos, pAllocator, pSwapchains);
}
#endif
#ifdef VK_KHR_xlib_surface
void VkDecoderSnapshot::vkCreateXlibSurfaceKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkInstance instance,
    const VkXlibSurfaceCreateInfoKHR* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSurfaceKHR* pSurface)
{
    mImpl->vkCreateXlibSurfaceKHR(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, instance, pCreateInfo, pAllocator, pSurface);
}
#endif
#ifdef VK_KHR_xlib_surface
void VkDecoderSnapshot::vkGetPhysicalDeviceXlibPresentationSupportKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkBool32 input_result,
    VkPhysicalDevice physicalDevice,
    uint32_t queueFamilyIndex,
    Display* dpy,
    VisualID visualID)
{
    mImpl->vkGetPhysicalDeviceXlibPresentationSupportKHR(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, physicalDevice, queueFamilyIndex, dpy, visualID);
}
#endif
#ifdef VK_KHR_xcb_surface
void VkDecoderSnapshot::vkCreateXcbSurfaceKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkInstance instance,
    const VkXcbSurfaceCreateInfoKHR* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSurfaceKHR* pSurface)
{
    mImpl->vkCreateXcbSurfaceKHR(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, instance, pCreateInfo, pAllocator, pSurface);
}
#endif
#ifdef VK_KHR_xcb_surface
void VkDecoderSnapshot::vkGetPhysicalDeviceXcbPresentationSupportKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkBool32 input_result,
    VkPhysicalDevice physicalDevice,
    uint32_t queueFamilyIndex,
    xcb_connection_t* connection,
    xcb_visualid_t visual_id)
{
    mImpl->vkGetPhysicalDeviceXcbPresentationSupportKHR(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, physicalDevice, queueFamilyIndex, connection, visual_id);
}
#endif
#ifdef VK_KHR_wayland_surface
void VkDecoderSnapshot::vkCreateWaylandSurfaceKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkInstance instance,
    const VkWaylandSurfaceCreateInfoKHR* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSurfaceKHR* pSurface)
{
    mImpl->vkCreateWaylandSurfaceKHR(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, instance, pCreateInfo, pAllocator, pSurface);
}
#endif
#ifdef VK_KHR_wayland_surface
void VkDecoderSnapshot::vkGetPhysicalDeviceWaylandPresentationSupportKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkBool32 input_result,
    VkPhysicalDevice physicalDevice,
    uint32_t queueFamilyIndex,
    wl_display* display)
{
    mImpl->vkGetPhysicalDeviceWaylandPresentationSupportKHR(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, physicalDevice, queueFamilyIndex, display);
}
#endif
#ifdef VK_KHR_android_surface
void VkDecoderSnapshot::vkCreateAndroidSurfaceKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkInstance instance,
    const VkAndroidSurfaceCreateInfoKHR* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSurfaceKHR* pSurface)
{
    mImpl->vkCreateAndroidSurfaceKHR(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, instance, pCreateInfo, pAllocator, pSurface);
}
#endif
#ifdef VK_KHR_win32_surface
void VkDecoderSnapshot::vkCreateWin32SurfaceKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkInstance instance,
    const VkWin32SurfaceCreateInfoKHR* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSurfaceKHR* pSurface)
{
    mImpl->vkCreateWin32SurfaceKHR(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, instance, pCreateInfo, pAllocator, pSurface);
}
#endif
#ifdef VK_KHR_win32_surface
void VkDecoderSnapshot::vkGetPhysicalDeviceWin32PresentationSupportKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkBool32 input_result,
    VkPhysicalDevice physicalDevice,
    uint32_t queueFamilyIndex)
{
    mImpl->vkGetPhysicalDeviceWin32PresentationSupportKHR(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, physicalDevice, queueFamilyIndex);
}
#endif
#ifdef VK_KHR_video_queue
void VkDecoderSnapshot::vkGetPhysicalDeviceVideoCapabilitiesKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    const VkVideoProfileKHR* pVideoProfile,
    VkVideoCapabilitiesKHR* pCapabilities)
{
    mImpl->vkGetPhysicalDeviceVideoCapabilitiesKHR(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, physicalDevice, pVideoProfile, pCapabilities);
}
#endif
#ifdef VK_KHR_video_queue
void VkDecoderSnapshot::vkGetPhysicalDeviceVideoFormatPropertiesKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    const VkPhysicalDeviceVideoFormatInfoKHR* pVideoFormatInfo,
    uint32_t* pVideoFormatPropertyCount,
    VkVideoFormatPropertiesKHR* pVideoFormatProperties)
{
    mImpl->vkGetPhysicalDeviceVideoFormatPropertiesKHR(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, physicalDevice, pVideoFormatInfo, pVideoFormatPropertyCount, pVideoFormatProperties);
}
#endif
#ifdef VK_KHR_video_queue
void VkDecoderSnapshot::vkCreateVideoSessionKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkVideoSessionCreateInfoKHR* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkVideoSessionKHR* pVideoSession)
{
    mImpl->vkCreateVideoSessionKHR(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, pCreateInfo, pAllocator, pVideoSession);
}
#endif
#ifdef VK_KHR_video_queue
void VkDecoderSnapshot::vkDestroyVideoSessionKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkVideoSessionKHR videoSession,
    const VkAllocationCallbacks* pAllocator)
{
    mImpl->vkDestroyVideoSessionKHR(snapshotTraceBegin, snapshotTraceBytes, pool, device, videoSession, pAllocator);
}
#endif
#ifdef VK_KHR_video_queue
void VkDecoderSnapshot::vkGetVideoSessionMemoryRequirementsKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkVideoSessionKHR videoSession,
    uint32_t* pVideoSessionMemoryRequirementsCount,
    VkVideoGetMemoryPropertiesKHR* pVideoSessionMemoryRequirements)
{
    mImpl->vkGetVideoSessionMemoryRequirementsKHR(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, videoSession, pVideoSessionMemoryRequirementsCount, pVideoSessionMemoryRequirements);
}
#endif
#ifdef VK_KHR_video_queue
void VkDecoderSnapshot::vkBindVideoSessionMemoryKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkVideoSessionKHR videoSession,
    uint32_t videoSessionBindMemoryCount,
    const VkVideoBindMemoryKHR* pVideoSessionBindMemories)
{
    mImpl->vkBindVideoSessionMemoryKHR(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, videoSession, videoSessionBindMemoryCount, pVideoSessionBindMemories);
}
#endif
#ifdef VK_KHR_video_queue
void VkDecoderSnapshot::vkCreateVideoSessionParametersKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkVideoSessionParametersCreateInfoKHR* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkVideoSessionParametersKHR* pVideoSessionParameters)
{
    mImpl->vkCreateVideoSessionParametersKHR(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, pCreateInfo, pAllocator, pVideoSessionParameters);
}
#endif
#ifdef VK_KHR_video_queue
void VkDecoderSnapshot::vkUpdateVideoSessionParametersKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkVideoSessionParametersKHR videoSessionParameters,
    const VkVideoSessionParametersUpdateInfoKHR* pUpdateInfo)
{
    mImpl->vkUpdateVideoSessionParametersKHR(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, videoSessionParameters, pUpdateInfo);
}
#endif
#ifdef VK_KHR_video_queue
void VkDecoderSnapshot::vkDestroyVideoSessionParametersKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkVideoSessionParametersKHR videoSessionParameters,
    const VkAllocationCallbacks* pAllocator)
{
    mImpl->vkDestroyVideoSessionParametersKHR(snapshotTraceBegin, snapshotTraceBytes, pool, device, videoSessionParameters, pAllocator);
}
#endif
#ifdef VK_KHR_video_queue
void VkDecoderSnapshot::vkCmdBeginVideoCodingKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    const VkVideoBeginCodingInfoKHR* pBeginInfo)
{
    mImpl->vkCmdBeginVideoCodingKHR(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, pBeginInfo);
}
#endif
#ifdef VK_KHR_video_queue
void VkDecoderSnapshot::vkCmdEndVideoCodingKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    const VkVideoEndCodingInfoKHR* pEndCodingInfo)
{
    mImpl->vkCmdEndVideoCodingKHR(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, pEndCodingInfo);
}
#endif
#ifdef VK_KHR_video_queue
void VkDecoderSnapshot::vkCmdControlVideoCodingKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    const VkVideoCodingControlInfoKHR* pCodingControlInfo)
{
    mImpl->vkCmdControlVideoCodingKHR(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, pCodingControlInfo);
}
#endif
#ifdef VK_KHR_video_decode_queue
void VkDecoderSnapshot::vkCmdDecodeVideoKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    const VkVideoDecodeInfoKHR* pFrameInfo)
{
    mImpl->vkCmdDecodeVideoKHR(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, pFrameInfo);
}
#endif
#ifdef VK_KHR_dynamic_rendering
void VkDecoderSnapshot::vkCmdBeginRenderingKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    const VkRenderingInfoKHR* pRenderingInfo)
{
    mImpl->vkCmdBeginRenderingKHR(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, pRenderingInfo);
}
#endif
#ifdef VK_KHR_dynamic_rendering
void VkDecoderSnapshot::vkCmdEndRenderingKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer)
{
    mImpl->vkCmdEndRenderingKHR(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer);
}
#endif
#ifdef VK_KHR_get_physical_device_properties2
void VkDecoderSnapshot::vkGetPhysicalDeviceFeatures2KHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkPhysicalDevice physicalDevice,
    VkPhysicalDeviceFeatures2* pFeatures)
{
    mImpl->vkGetPhysicalDeviceFeatures2KHR(snapshotTraceBegin, snapshotTraceBytes, pool, physicalDevice, pFeatures);
}
#endif
#ifdef VK_KHR_get_physical_device_properties2
void VkDecoderSnapshot::vkGetPhysicalDeviceProperties2KHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkPhysicalDevice physicalDevice,
    VkPhysicalDeviceProperties2* pProperties)
{
    mImpl->vkGetPhysicalDeviceProperties2KHR(snapshotTraceBegin, snapshotTraceBytes, pool, physicalDevice, pProperties);
}
#endif
#ifdef VK_KHR_get_physical_device_properties2
void VkDecoderSnapshot::vkGetPhysicalDeviceFormatProperties2KHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkPhysicalDevice physicalDevice,
    VkFormat format,
    VkFormatProperties2* pFormatProperties)
{
    mImpl->vkGetPhysicalDeviceFormatProperties2KHR(snapshotTraceBegin, snapshotTraceBytes, pool, physicalDevice, format, pFormatProperties);
}
#endif
#ifdef VK_KHR_get_physical_device_properties2
void VkDecoderSnapshot::vkGetPhysicalDeviceImageFormatProperties2KHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    const VkPhysicalDeviceImageFormatInfo2* pImageFormatInfo,
    VkImageFormatProperties2* pImageFormatProperties)
{
    mImpl->vkGetPhysicalDeviceImageFormatProperties2KHR(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, physicalDevice, pImageFormatInfo, pImageFormatProperties);
}
#endif
#ifdef VK_KHR_get_physical_device_properties2
void VkDecoderSnapshot::vkGetPhysicalDeviceQueueFamilyProperties2KHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkPhysicalDevice physicalDevice,
    uint32_t* pQueueFamilyPropertyCount,
    VkQueueFamilyProperties2* pQueueFamilyProperties)
{
    mImpl->vkGetPhysicalDeviceQueueFamilyProperties2KHR(snapshotTraceBegin, snapshotTraceBytes, pool, physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties);
}
#endif
#ifdef VK_KHR_get_physical_device_properties2
void VkDecoderSnapshot::vkGetPhysicalDeviceMemoryProperties2KHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkPhysicalDevice physicalDevice,
    VkPhysicalDeviceMemoryProperties2* pMemoryProperties)
{
    mImpl->vkGetPhysicalDeviceMemoryProperties2KHR(snapshotTraceBegin, snapshotTraceBytes, pool, physicalDevice, pMemoryProperties);
}
#endif
#ifdef VK_KHR_get_physical_device_properties2
void VkDecoderSnapshot::vkGetPhysicalDeviceSparseImageFormatProperties2KHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkPhysicalDevice physicalDevice,
    const VkPhysicalDeviceSparseImageFormatInfo2* pFormatInfo,
    uint32_t* pPropertyCount,
    VkSparseImageFormatProperties2* pProperties)
{
    mImpl->vkGetPhysicalDeviceSparseImageFormatProperties2KHR(snapshotTraceBegin, snapshotTraceBytes, pool, physicalDevice, pFormatInfo, pPropertyCount, pProperties);
}
#endif
#ifdef VK_KHR_device_group
void VkDecoderSnapshot::vkGetDeviceGroupPeerMemoryFeaturesKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    uint32_t heapIndex,
    uint32_t localDeviceIndex,
    uint32_t remoteDeviceIndex,
    VkPeerMemoryFeatureFlags* pPeerMemoryFeatures)
{
    mImpl->vkGetDeviceGroupPeerMemoryFeaturesKHR(snapshotTraceBegin, snapshotTraceBytes, pool, device, heapIndex, localDeviceIndex, remoteDeviceIndex, pPeerMemoryFeatures);
}
#endif
#ifdef VK_KHR_device_group
void VkDecoderSnapshot::vkCmdSetDeviceMaskKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    uint32_t deviceMask)
{
    mImpl->vkCmdSetDeviceMaskKHR(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, deviceMask);
}
#endif
#ifdef VK_KHR_device_group
void VkDecoderSnapshot::vkCmdDispatchBaseKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    uint32_t baseGroupX,
    uint32_t baseGroupY,
    uint32_t baseGroupZ,
    uint32_t groupCountX,
    uint32_t groupCountY,
    uint32_t groupCountZ)
{
    mImpl->vkCmdDispatchBaseKHR(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ);
}
#endif
#ifdef VK_KHR_maintenance1
void VkDecoderSnapshot::vkTrimCommandPoolKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkCommandPool commandPool,
    VkCommandPoolTrimFlags flags)
{
    mImpl->vkTrimCommandPoolKHR(snapshotTraceBegin, snapshotTraceBytes, pool, device, commandPool, flags);
}
#endif
#ifdef VK_KHR_device_group_creation
void VkDecoderSnapshot::vkEnumeratePhysicalDeviceGroupsKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkInstance instance,
    uint32_t* pPhysicalDeviceGroupCount,
    VkPhysicalDeviceGroupProperties* pPhysicalDeviceGroupProperties)
{
    mImpl->vkEnumeratePhysicalDeviceGroupsKHR(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, instance, pPhysicalDeviceGroupCount, pPhysicalDeviceGroupProperties);
}
#endif
#ifdef VK_KHR_external_memory_capabilities
void VkDecoderSnapshot::vkGetPhysicalDeviceExternalBufferPropertiesKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkPhysicalDevice physicalDevice,
    const VkPhysicalDeviceExternalBufferInfo* pExternalBufferInfo,
    VkExternalBufferProperties* pExternalBufferProperties)
{
    mImpl->vkGetPhysicalDeviceExternalBufferPropertiesKHR(snapshotTraceBegin, snapshotTraceBytes, pool, physicalDevice, pExternalBufferInfo, pExternalBufferProperties);
}
#endif
#ifdef VK_KHR_external_memory_win32
void VkDecoderSnapshot::vkGetMemoryWin32HandleKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkMemoryGetWin32HandleInfoKHR* pGetWin32HandleInfo,
    HANDLE* pHandle)
{
    mImpl->vkGetMemoryWin32HandleKHR(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, pGetWin32HandleInfo, pHandle);
}
#endif
#ifdef VK_KHR_external_memory_win32
void VkDecoderSnapshot::vkGetMemoryWin32HandlePropertiesKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkExternalMemoryHandleTypeFlagBits handleType,
    HANDLE handle,
    VkMemoryWin32HandlePropertiesKHR* pMemoryWin32HandleProperties)
{
    mImpl->vkGetMemoryWin32HandlePropertiesKHR(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, handleType, handle, pMemoryWin32HandleProperties);
}
#endif
#ifdef VK_KHR_external_memory_fd
void VkDecoderSnapshot::vkGetMemoryFdKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkMemoryGetFdInfoKHR* pGetFdInfo,
    int* pFd)
{
    mImpl->vkGetMemoryFdKHR(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, pGetFdInfo, pFd);
}
#endif
#ifdef VK_KHR_external_memory_fd
void VkDecoderSnapshot::vkGetMemoryFdPropertiesKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkExternalMemoryHandleTypeFlagBits handleType,
    int fd,
    VkMemoryFdPropertiesKHR* pMemoryFdProperties)
{
    mImpl->vkGetMemoryFdPropertiesKHR(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, handleType, fd, pMemoryFdProperties);
}
#endif
#ifdef VK_KHR_external_semaphore_capabilities
void VkDecoderSnapshot::vkGetPhysicalDeviceExternalSemaphorePropertiesKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkPhysicalDevice physicalDevice,
    const VkPhysicalDeviceExternalSemaphoreInfo* pExternalSemaphoreInfo,
    VkExternalSemaphoreProperties* pExternalSemaphoreProperties)
{
    mImpl->vkGetPhysicalDeviceExternalSemaphorePropertiesKHR(snapshotTraceBegin, snapshotTraceBytes, pool, physicalDevice, pExternalSemaphoreInfo, pExternalSemaphoreProperties);
}
#endif
#ifdef VK_KHR_external_semaphore_win32
void VkDecoderSnapshot::vkImportSemaphoreWin32HandleKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkImportSemaphoreWin32HandleInfoKHR* pImportSemaphoreWin32HandleInfo)
{
    mImpl->vkImportSemaphoreWin32HandleKHR(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, pImportSemaphoreWin32HandleInfo);
}
#endif
#ifdef VK_KHR_external_semaphore_win32
void VkDecoderSnapshot::vkGetSemaphoreWin32HandleKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkSemaphoreGetWin32HandleInfoKHR* pGetWin32HandleInfo,
    HANDLE* pHandle)
{
    mImpl->vkGetSemaphoreWin32HandleKHR(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, pGetWin32HandleInfo, pHandle);
}
#endif
#ifdef VK_KHR_external_semaphore_fd
void VkDecoderSnapshot::vkImportSemaphoreFdKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkImportSemaphoreFdInfoKHR* pImportSemaphoreFdInfo)
{
    mImpl->vkImportSemaphoreFdKHR(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, pImportSemaphoreFdInfo);
}
#endif
#ifdef VK_KHR_external_semaphore_fd
void VkDecoderSnapshot::vkGetSemaphoreFdKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkSemaphoreGetFdInfoKHR* pGetFdInfo,
    int* pFd)
{
    mImpl->vkGetSemaphoreFdKHR(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, pGetFdInfo, pFd);
}
#endif
#ifdef VK_KHR_push_descriptor
void VkDecoderSnapshot::vkCmdPushDescriptorSetKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkPipelineBindPoint pipelineBindPoint,
    VkPipelineLayout layout,
    uint32_t set,
    uint32_t descriptorWriteCount,
    const VkWriteDescriptorSet* pDescriptorWrites)
{
    mImpl->vkCmdPushDescriptorSetKHR(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, pipelineBindPoint, layout, set, descriptorWriteCount, pDescriptorWrites);
}
#endif
#ifdef VK_KHR_push_descriptor
void VkDecoderSnapshot::vkCmdPushDescriptorSetWithTemplateKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkDescriptorUpdateTemplate descriptorUpdateTemplate,
    VkPipelineLayout layout,
    uint32_t set,
    const void* pData)
{
    mImpl->vkCmdPushDescriptorSetWithTemplateKHR(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, descriptorUpdateTemplate, layout, set, pData);
}
#endif
#ifdef VK_KHR_descriptor_update_template
void VkDecoderSnapshot::vkCreateDescriptorUpdateTemplateKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkDescriptorUpdateTemplateCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkDescriptorUpdateTemplate* pDescriptorUpdateTemplate)
{
    mImpl->vkCreateDescriptorUpdateTemplateKHR(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, pCreateInfo, pAllocator, pDescriptorUpdateTemplate);
}
#endif
#ifdef VK_KHR_descriptor_update_template
void VkDecoderSnapshot::vkDestroyDescriptorUpdateTemplateKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkDescriptorUpdateTemplate descriptorUpdateTemplate,
    const VkAllocationCallbacks* pAllocator)
{
    mImpl->vkDestroyDescriptorUpdateTemplateKHR(snapshotTraceBegin, snapshotTraceBytes, pool, device, descriptorUpdateTemplate, pAllocator);
}
#endif
#ifdef VK_KHR_descriptor_update_template
void VkDecoderSnapshot::vkUpdateDescriptorSetWithTemplateKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkDescriptorSet descriptorSet,
    VkDescriptorUpdateTemplate descriptorUpdateTemplate,
    const void* pData)
{
    mImpl->vkUpdateDescriptorSetWithTemplateKHR(snapshotTraceBegin, snapshotTraceBytes, pool, device, descriptorSet, descriptorUpdateTemplate, pData);
}
#endif
#ifdef VK_KHR_create_renderpass2
void VkDecoderSnapshot::vkCreateRenderPass2KHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkRenderPassCreateInfo2* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkRenderPass* pRenderPass)
{
    mImpl->vkCreateRenderPass2KHR(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, pCreateInfo, pAllocator, pRenderPass);
}
#endif
#ifdef VK_KHR_create_renderpass2
void VkDecoderSnapshot::vkCmdBeginRenderPass2KHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    const VkRenderPassBeginInfo* pRenderPassBegin,
    const VkSubpassBeginInfo* pSubpassBeginInfo)
{
    mImpl->vkCmdBeginRenderPass2KHR(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, pRenderPassBegin, pSubpassBeginInfo);
}
#endif
#ifdef VK_KHR_create_renderpass2
void VkDecoderSnapshot::vkCmdNextSubpass2KHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    const VkSubpassBeginInfo* pSubpassBeginInfo,
    const VkSubpassEndInfo* pSubpassEndInfo)
{
    mImpl->vkCmdNextSubpass2KHR(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, pSubpassBeginInfo, pSubpassEndInfo);
}
#endif
#ifdef VK_KHR_create_renderpass2
void VkDecoderSnapshot::vkCmdEndRenderPass2KHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    const VkSubpassEndInfo* pSubpassEndInfo)
{
    mImpl->vkCmdEndRenderPass2KHR(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, pSubpassEndInfo);
}
#endif
#ifdef VK_KHR_shared_presentable_image
void VkDecoderSnapshot::vkGetSwapchainStatusKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkSwapchainKHR swapchain)
{
    mImpl->vkGetSwapchainStatusKHR(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, swapchain);
}
#endif
#ifdef VK_KHR_external_fence_capabilities
void VkDecoderSnapshot::vkGetPhysicalDeviceExternalFencePropertiesKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkPhysicalDevice physicalDevice,
    const VkPhysicalDeviceExternalFenceInfo* pExternalFenceInfo,
    VkExternalFenceProperties* pExternalFenceProperties)
{
    mImpl->vkGetPhysicalDeviceExternalFencePropertiesKHR(snapshotTraceBegin, snapshotTraceBytes, pool, physicalDevice, pExternalFenceInfo, pExternalFenceProperties);
}
#endif
#ifdef VK_KHR_external_fence_win32
void VkDecoderSnapshot::vkImportFenceWin32HandleKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkImportFenceWin32HandleInfoKHR* pImportFenceWin32HandleInfo)
{
    mImpl->vkImportFenceWin32HandleKHR(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, pImportFenceWin32HandleInfo);
}
#endif
#ifdef VK_KHR_external_fence_win32
void VkDecoderSnapshot::vkGetFenceWin32HandleKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkFenceGetWin32HandleInfoKHR* pGetWin32HandleInfo,
    HANDLE* pHandle)
{
    mImpl->vkGetFenceWin32HandleKHR(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, pGetWin32HandleInfo, pHandle);
}
#endif
#ifdef VK_KHR_external_fence_fd
void VkDecoderSnapshot::vkImportFenceFdKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkImportFenceFdInfoKHR* pImportFenceFdInfo)
{
    mImpl->vkImportFenceFdKHR(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, pImportFenceFdInfo);
}
#endif
#ifdef VK_KHR_external_fence_fd
void VkDecoderSnapshot::vkGetFenceFdKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkFenceGetFdInfoKHR* pGetFdInfo,
    int* pFd)
{
    mImpl->vkGetFenceFdKHR(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, pGetFdInfo, pFd);
}
#endif
#ifdef VK_KHR_performance_query
void VkDecoderSnapshot::vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    uint32_t queueFamilyIndex,
    uint32_t* pCounterCount,
    VkPerformanceCounterKHR* pCounters,
    VkPerformanceCounterDescriptionKHR* pCounterDescriptions)
{
    mImpl->vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, physicalDevice, queueFamilyIndex, pCounterCount, pCounters, pCounterDescriptions);
}
#endif
#ifdef VK_KHR_performance_query
void VkDecoderSnapshot::vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkPhysicalDevice physicalDevice,
    const VkQueryPoolPerformanceCreateInfoKHR* pPerformanceQueryCreateInfo,
    uint32_t* pNumPasses)
{
    mImpl->vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(snapshotTraceBegin, snapshotTraceBytes, pool, physicalDevice, pPerformanceQueryCreateInfo, pNumPasses);
}
#endif
#ifdef VK_KHR_performance_query
void VkDecoderSnapshot::vkAcquireProfilingLockKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkAcquireProfilingLockInfoKHR* pInfo)
{
    mImpl->vkAcquireProfilingLockKHR(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, pInfo);
}
#endif
#ifdef VK_KHR_performance_query
void VkDecoderSnapshot::vkReleaseProfilingLockKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device)
{
    mImpl->vkReleaseProfilingLockKHR(snapshotTraceBegin, snapshotTraceBytes, pool, device);
}
#endif
#ifdef VK_KHR_get_surface_capabilities2
void VkDecoderSnapshot::vkGetPhysicalDeviceSurfaceCapabilities2KHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    const VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo,
    VkSurfaceCapabilities2KHR* pSurfaceCapabilities)
{
    mImpl->vkGetPhysicalDeviceSurfaceCapabilities2KHR(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, physicalDevice, pSurfaceInfo, pSurfaceCapabilities);
}
#endif
#ifdef VK_KHR_get_surface_capabilities2
void VkDecoderSnapshot::vkGetPhysicalDeviceSurfaceFormats2KHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    const VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo,
    uint32_t* pSurfaceFormatCount,
    VkSurfaceFormat2KHR* pSurfaceFormats)
{
    mImpl->vkGetPhysicalDeviceSurfaceFormats2KHR(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, physicalDevice, pSurfaceInfo, pSurfaceFormatCount, pSurfaceFormats);
}
#endif
#ifdef VK_KHR_get_display_properties2
void VkDecoderSnapshot::vkGetPhysicalDeviceDisplayProperties2KHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    uint32_t* pPropertyCount,
    VkDisplayProperties2KHR* pProperties)
{
    mImpl->vkGetPhysicalDeviceDisplayProperties2KHR(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, physicalDevice, pPropertyCount, pProperties);
}
#endif
#ifdef VK_KHR_get_display_properties2
void VkDecoderSnapshot::vkGetPhysicalDeviceDisplayPlaneProperties2KHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    uint32_t* pPropertyCount,
    VkDisplayPlaneProperties2KHR* pProperties)
{
    mImpl->vkGetPhysicalDeviceDisplayPlaneProperties2KHR(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, physicalDevice, pPropertyCount, pProperties);
}
#endif
#ifdef VK_KHR_get_display_properties2
void VkDecoderSnapshot::vkGetDisplayModeProperties2KHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    VkDisplayKHR display,
    uint32_t* pPropertyCount,
    VkDisplayModeProperties2KHR* pProperties)
{
    mImpl->vkGetDisplayModeProperties2KHR(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, physicalDevice, display, pPropertyCount, pProperties);
}
#endif
#ifdef VK_KHR_get_display_properties2
void VkDecoderSnapshot::vkGetDisplayPlaneCapabilities2KHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    const VkDisplayPlaneInfo2KHR* pDisplayPlaneInfo,
    VkDisplayPlaneCapabilities2KHR* pCapabilities)
{
    mImpl->vkGetDisplayPlaneCapabilities2KHR(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, physicalDevice, pDisplayPlaneInfo, pCapabilities);
}
#endif
#ifdef VK_KHR_get_memory_requirements2
void VkDecoderSnapshot::vkGetImageMemoryRequirements2KHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    const VkImageMemoryRequirementsInfo2* pInfo,
    VkMemoryRequirements2* pMemoryRequirements)
{
    mImpl->vkGetImageMemoryRequirements2KHR(snapshotTraceBegin, snapshotTraceBytes, pool, device, pInfo, pMemoryRequirements);
}
#endif
#ifdef VK_KHR_get_memory_requirements2
void VkDecoderSnapshot::vkGetBufferMemoryRequirements2KHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    const VkBufferMemoryRequirementsInfo2* pInfo,
    VkMemoryRequirements2* pMemoryRequirements)
{
    mImpl->vkGetBufferMemoryRequirements2KHR(snapshotTraceBegin, snapshotTraceBytes, pool, device, pInfo, pMemoryRequirements);
}
#endif
#ifdef VK_KHR_get_memory_requirements2
void VkDecoderSnapshot::vkGetImageSparseMemoryRequirements2KHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    const VkImageSparseMemoryRequirementsInfo2* pInfo,
    uint32_t* pSparseMemoryRequirementCount,
    VkSparseImageMemoryRequirements2* pSparseMemoryRequirements)
{
    mImpl->vkGetImageSparseMemoryRequirements2KHR(snapshotTraceBegin, snapshotTraceBytes, pool, device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
}
#endif
#ifdef VK_KHR_sampler_ycbcr_conversion
void VkDecoderSnapshot::vkCreateSamplerYcbcrConversionKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkSamplerYcbcrConversionCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSamplerYcbcrConversion* pYcbcrConversion)
{
    mImpl->vkCreateSamplerYcbcrConversionKHR(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, pCreateInfo, pAllocator, pYcbcrConversion);
}
#endif
#ifdef VK_KHR_sampler_ycbcr_conversion
void VkDecoderSnapshot::vkDestroySamplerYcbcrConversionKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkSamplerYcbcrConversion ycbcrConversion,
    const VkAllocationCallbacks* pAllocator)
{
    mImpl->vkDestroySamplerYcbcrConversionKHR(snapshotTraceBegin, snapshotTraceBytes, pool, device, ycbcrConversion, pAllocator);
}
#endif
#ifdef VK_KHR_bind_memory2
void VkDecoderSnapshot::vkBindBufferMemory2KHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    uint32_t bindInfoCount,
    const VkBindBufferMemoryInfo* pBindInfos)
{
    mImpl->vkBindBufferMemory2KHR(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, bindInfoCount, pBindInfos);
}
#endif
#ifdef VK_KHR_bind_memory2
void VkDecoderSnapshot::vkBindImageMemory2KHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    uint32_t bindInfoCount,
    const VkBindImageMemoryInfo* pBindInfos)
{
    mImpl->vkBindImageMemory2KHR(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, bindInfoCount, pBindInfos);
}
#endif
#ifdef VK_KHR_maintenance3
void VkDecoderSnapshot::vkGetDescriptorSetLayoutSupportKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    const VkDescriptorSetLayoutCreateInfo* pCreateInfo,
    VkDescriptorSetLayoutSupport* pSupport)
{
    mImpl->vkGetDescriptorSetLayoutSupportKHR(snapshotTraceBegin, snapshotTraceBytes, pool, device, pCreateInfo, pSupport);
}
#endif
#ifdef VK_KHR_draw_indirect_count
void VkDecoderSnapshot::vkCmdDrawIndirectCountKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkBuffer buffer,
    VkDeviceSize offset,
    VkBuffer countBuffer,
    VkDeviceSize countBufferOffset,
    uint32_t maxDrawCount,
    uint32_t stride)
{
    mImpl->vkCmdDrawIndirectCountKHR(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
}
#endif
#ifdef VK_KHR_draw_indirect_count
void VkDecoderSnapshot::vkCmdDrawIndexedIndirectCountKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkBuffer buffer,
    VkDeviceSize offset,
    VkBuffer countBuffer,
    VkDeviceSize countBufferOffset,
    uint32_t maxDrawCount,
    uint32_t stride)
{
    mImpl->vkCmdDrawIndexedIndirectCountKHR(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
}
#endif
#ifdef VK_KHR_timeline_semaphore
void VkDecoderSnapshot::vkGetSemaphoreCounterValueKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkSemaphore semaphore,
    uint64_t* pValue)
{
    mImpl->vkGetSemaphoreCounterValueKHR(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, semaphore, pValue);
}
#endif
#ifdef VK_KHR_timeline_semaphore
void VkDecoderSnapshot::vkWaitSemaphoresKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkSemaphoreWaitInfo* pWaitInfo,
    uint64_t timeout)
{
    mImpl->vkWaitSemaphoresKHR(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, pWaitInfo, timeout);
}
#endif
#ifdef VK_KHR_timeline_semaphore
void VkDecoderSnapshot::vkSignalSemaphoreKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkSemaphoreSignalInfo* pSignalInfo)
{
    mImpl->vkSignalSemaphoreKHR(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, pSignalInfo);
}
#endif
#ifdef VK_KHR_fragment_shading_rate
void VkDecoderSnapshot::vkGetPhysicalDeviceFragmentShadingRatesKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    uint32_t* pFragmentShadingRateCount,
    VkPhysicalDeviceFragmentShadingRateKHR* pFragmentShadingRates)
{
    mImpl->vkGetPhysicalDeviceFragmentShadingRatesKHR(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, physicalDevice, pFragmentShadingRateCount, pFragmentShadingRates);
}
#endif
#ifdef VK_KHR_fragment_shading_rate
void VkDecoderSnapshot::vkCmdSetFragmentShadingRateKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    const VkExtent2D* pFragmentSize,
    const VkFragmentShadingRateCombinerOpKHR combinerOps[2])
{
    mImpl->vkCmdSetFragmentShadingRateKHR(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, pFragmentSize, combinerOps);
}
#endif
#ifdef VK_KHR_present_wait
void VkDecoderSnapshot::vkWaitForPresentKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkSwapchainKHR swapchain,
    uint64_t presentId,
    uint64_t timeout)
{
    mImpl->vkWaitForPresentKHR(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, swapchain, presentId, timeout);
}
#endif
#ifdef VK_KHR_buffer_device_address
void VkDecoderSnapshot::vkGetBufferDeviceAddressKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDeviceAddress input_result,
    VkDevice device,
    const VkBufferDeviceAddressInfo* pInfo)
{
    mImpl->vkGetBufferDeviceAddressKHR(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, pInfo);
}
#endif
#ifdef VK_KHR_buffer_device_address
void VkDecoderSnapshot::vkGetBufferOpaqueCaptureAddressKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    uint64_t input_result,
    VkDevice device,
    const VkBufferDeviceAddressInfo* pInfo)
{
    mImpl->vkGetBufferOpaqueCaptureAddressKHR(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, pInfo);
}
#endif
#ifdef VK_KHR_buffer_device_address
void VkDecoderSnapshot::vkGetDeviceMemoryOpaqueCaptureAddressKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    uint64_t input_result,
    VkDevice device,
    const VkDeviceMemoryOpaqueCaptureAddressInfo* pInfo)
{
    mImpl->vkGetDeviceMemoryOpaqueCaptureAddressKHR(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, pInfo);
}
#endif
#ifdef VK_KHR_deferred_host_operations
void VkDecoderSnapshot::vkCreateDeferredOperationKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkAllocationCallbacks* pAllocator,
    VkDeferredOperationKHR* pDeferredOperation)
{
    mImpl->vkCreateDeferredOperationKHR(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, pAllocator, pDeferredOperation);
}
#endif
#ifdef VK_KHR_deferred_host_operations
void VkDecoderSnapshot::vkDestroyDeferredOperationKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkDeferredOperationKHR operation,
    const VkAllocationCallbacks* pAllocator)
{
    mImpl->vkDestroyDeferredOperationKHR(snapshotTraceBegin, snapshotTraceBytes, pool, device, operation, pAllocator);
}
#endif
#ifdef VK_KHR_deferred_host_operations
void VkDecoderSnapshot::vkGetDeferredOperationMaxConcurrencyKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    uint32_t input_result,
    VkDevice device,
    VkDeferredOperationKHR operation)
{
    mImpl->vkGetDeferredOperationMaxConcurrencyKHR(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, operation);
}
#endif
#ifdef VK_KHR_deferred_host_operations
void VkDecoderSnapshot::vkGetDeferredOperationResultKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkDeferredOperationKHR operation)
{
    mImpl->vkGetDeferredOperationResultKHR(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, operation);
}
#endif
#ifdef VK_KHR_deferred_host_operations
void VkDecoderSnapshot::vkDeferredOperationJoinKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkDeferredOperationKHR operation)
{
    mImpl->vkDeferredOperationJoinKHR(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, operation);
}
#endif
#ifdef VK_KHR_pipeline_executable_properties
void VkDecoderSnapshot::vkGetPipelineExecutablePropertiesKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkPipelineInfoKHR* pPipelineInfo,
    uint32_t* pExecutableCount,
    VkPipelineExecutablePropertiesKHR* pProperties)
{
    mImpl->vkGetPipelineExecutablePropertiesKHR(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, pPipelineInfo, pExecutableCount, pProperties);
}
#endif
#ifdef VK_KHR_pipeline_executable_properties
void VkDecoderSnapshot::vkGetPipelineExecutableStatisticsKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkPipelineExecutableInfoKHR* pExecutableInfo,
    uint32_t* pStatisticCount,
    VkPipelineExecutableStatisticKHR* pStatistics)
{
    mImpl->vkGetPipelineExecutableStatisticsKHR(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, pExecutableInfo, pStatisticCount, pStatistics);
}
#endif
#ifdef VK_KHR_pipeline_executable_properties
void VkDecoderSnapshot::vkGetPipelineExecutableInternalRepresentationsKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkPipelineExecutableInfoKHR* pExecutableInfo,
    uint32_t* pInternalRepresentationCount,
    VkPipelineExecutableInternalRepresentationKHR* pInternalRepresentations)
{
    mImpl->vkGetPipelineExecutableInternalRepresentationsKHR(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, pExecutableInfo, pInternalRepresentationCount, pInternalRepresentations);
}
#endif
#ifdef VK_KHR_video_encode_queue
void VkDecoderSnapshot::vkCmdEncodeVideoKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    const VkVideoEncodeInfoKHR* pEncodeInfo)
{
    mImpl->vkCmdEncodeVideoKHR(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, pEncodeInfo);
}
#endif
#ifdef VK_KHR_synchronization2
void VkDecoderSnapshot::vkCmdSetEvent2KHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkEvent event,
    const VkDependencyInfoKHR* pDependencyInfo)
{
    mImpl->vkCmdSetEvent2KHR(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, event, pDependencyInfo);
}
#endif
#ifdef VK_KHR_synchronization2
void VkDecoderSnapshot::vkCmdResetEvent2KHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkEvent event,
    VkPipelineStageFlags2KHR stageMask)
{
    mImpl->vkCmdResetEvent2KHR(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, event, stageMask);
}
#endif
#ifdef VK_KHR_synchronization2
void VkDecoderSnapshot::vkCmdWaitEvents2KHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    uint32_t eventCount,
    const VkEvent* pEvents,
    const VkDependencyInfoKHR* pDependencyInfos)
{
    mImpl->vkCmdWaitEvents2KHR(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, eventCount, pEvents, pDependencyInfos);
}
#endif
#ifdef VK_KHR_synchronization2
void VkDecoderSnapshot::vkCmdPipelineBarrier2KHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    const VkDependencyInfoKHR* pDependencyInfo)
{
    mImpl->vkCmdPipelineBarrier2KHR(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, pDependencyInfo);
}
#endif
#ifdef VK_KHR_synchronization2
void VkDecoderSnapshot::vkCmdWriteTimestamp2KHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkPipelineStageFlags2KHR stage,
    VkQueryPool queryPool,
    uint32_t query)
{
    mImpl->vkCmdWriteTimestamp2KHR(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, stage, queryPool, query);
}
#endif
#ifdef VK_KHR_synchronization2
void VkDecoderSnapshot::vkQueueSubmit2KHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkQueue queue,
    uint32_t submitCount,
    const VkSubmitInfo2KHR* pSubmits,
    VkFence fence)
{
    mImpl->vkQueueSubmit2KHR(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, queue, submitCount, pSubmits, fence);
}
#endif
#ifdef VK_KHR_synchronization2
void VkDecoderSnapshot::vkCmdWriteBufferMarker2AMD(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkPipelineStageFlags2KHR stage,
    VkBuffer dstBuffer,
    VkDeviceSize dstOffset,
    uint32_t marker)
{
    mImpl->vkCmdWriteBufferMarker2AMD(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, stage, dstBuffer, dstOffset, marker);
}
#endif
#ifdef VK_KHR_synchronization2
void VkDecoderSnapshot::vkGetQueueCheckpointData2NV(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkQueue queue,
    uint32_t* pCheckpointDataCount,
    VkCheckpointData2NV* pCheckpointData)
{
    mImpl->vkGetQueueCheckpointData2NV(snapshotTraceBegin, snapshotTraceBytes, pool, queue, pCheckpointDataCount, pCheckpointData);
}
#endif
#ifdef VK_KHR_copy_commands2
void VkDecoderSnapshot::vkCmdCopyBuffer2KHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    const VkCopyBufferInfo2KHR* pCopyBufferInfo)
{
    mImpl->vkCmdCopyBuffer2KHR(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, pCopyBufferInfo);
}
#endif
#ifdef VK_KHR_copy_commands2
void VkDecoderSnapshot::vkCmdCopyImage2KHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    const VkCopyImageInfo2KHR* pCopyImageInfo)
{
    mImpl->vkCmdCopyImage2KHR(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, pCopyImageInfo);
}
#endif
#ifdef VK_KHR_copy_commands2
void VkDecoderSnapshot::vkCmdCopyBufferToImage2KHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    const VkCopyBufferToImageInfo2KHR* pCopyBufferToImageInfo)
{
    mImpl->vkCmdCopyBufferToImage2KHR(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, pCopyBufferToImageInfo);
}
#endif
#ifdef VK_KHR_copy_commands2
void VkDecoderSnapshot::vkCmdCopyImageToBuffer2KHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    const VkCopyImageToBufferInfo2KHR* pCopyImageToBufferInfo)
{
    mImpl->vkCmdCopyImageToBuffer2KHR(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, pCopyImageToBufferInfo);
}
#endif
#ifdef VK_KHR_copy_commands2
void VkDecoderSnapshot::vkCmdBlitImage2KHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    const VkBlitImageInfo2KHR* pBlitImageInfo)
{
    mImpl->vkCmdBlitImage2KHR(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, pBlitImageInfo);
}
#endif
#ifdef VK_KHR_copy_commands2
void VkDecoderSnapshot::vkCmdResolveImage2KHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    const VkResolveImageInfo2KHR* pResolveImageInfo)
{
    mImpl->vkCmdResolveImage2KHR(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, pResolveImageInfo);
}
#endif
#ifdef VK_KHR_maintenance4
void VkDecoderSnapshot::vkGetDeviceBufferMemoryRequirementsKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    const VkDeviceBufferMemoryRequirementsKHR* pInfo,
    VkMemoryRequirements2* pMemoryRequirements)
{
    mImpl->vkGetDeviceBufferMemoryRequirementsKHR(snapshotTraceBegin, snapshotTraceBytes, pool, device, pInfo, pMemoryRequirements);
}
#endif
#ifdef VK_KHR_maintenance4
void VkDecoderSnapshot::vkGetDeviceImageMemoryRequirementsKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    const VkDeviceImageMemoryRequirementsKHR* pInfo,
    VkMemoryRequirements2* pMemoryRequirements)
{
    mImpl->vkGetDeviceImageMemoryRequirementsKHR(snapshotTraceBegin, snapshotTraceBytes, pool, device, pInfo, pMemoryRequirements);
}
#endif
#ifdef VK_KHR_maintenance4
void VkDecoderSnapshot::vkGetDeviceImageSparseMemoryRequirementsKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    const VkDeviceImageMemoryRequirementsKHR* pInfo,
    uint32_t* pSparseMemoryRequirementCount,
    VkSparseImageMemoryRequirements2* pSparseMemoryRequirements)
{
    mImpl->vkGetDeviceImageSparseMemoryRequirementsKHR(snapshotTraceBegin, snapshotTraceBytes, pool, device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
}
#endif
#ifdef VK_ANDROID_native_buffer
void VkDecoderSnapshot::vkGetSwapchainGrallocUsageANDROID(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkFormat format,
    VkImageUsageFlags imageUsage,
    int* grallocUsage)
{
    mImpl->vkGetSwapchainGrallocUsageANDROID(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, format, imageUsage, grallocUsage);
}
#endif
#ifdef VK_ANDROID_native_buffer
void VkDecoderSnapshot::vkAcquireImageANDROID(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkImage image,
    int nativeFenceFd,
    VkSemaphore semaphore,
    VkFence fence)
{
    mImpl->vkAcquireImageANDROID(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, image, nativeFenceFd, semaphore, fence);
}
#endif
#ifdef VK_ANDROID_native_buffer
void VkDecoderSnapshot::vkQueueSignalReleaseImageANDROID(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkQueue queue,
    uint32_t waitSemaphoreCount,
    const VkSemaphore* pWaitSemaphores,
    VkImage image,
    int* pNativeFenceFd)
{
    mImpl->vkQueueSignalReleaseImageANDROID(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, queue, waitSemaphoreCount, pWaitSemaphores, image, pNativeFenceFd);
}
#endif
#ifdef VK_EXT_debug_report
void VkDecoderSnapshot::vkCreateDebugReportCallbackEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkInstance instance,
    const VkDebugReportCallbackCreateInfoEXT* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkDebugReportCallbackEXT* pCallback)
{
    mImpl->vkCreateDebugReportCallbackEXT(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, instance, pCreateInfo, pAllocator, pCallback);
}
#endif
#ifdef VK_EXT_debug_report
void VkDecoderSnapshot::vkDestroyDebugReportCallbackEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkInstance instance,
    VkDebugReportCallbackEXT callback,
    const VkAllocationCallbacks* pAllocator)
{
    mImpl->vkDestroyDebugReportCallbackEXT(snapshotTraceBegin, snapshotTraceBytes, pool, instance, callback, pAllocator);
}
#endif
#ifdef VK_EXT_debug_report
void VkDecoderSnapshot::vkDebugReportMessageEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkInstance instance,
    VkDebugReportFlagsEXT flags,
    VkDebugReportObjectTypeEXT objectType,
    uint64_t object,
    size_t location,
    int32_t messageCode,
    const char* pLayerPrefix,
    const char* pMessage)
{
    mImpl->vkDebugReportMessageEXT(snapshotTraceBegin, snapshotTraceBytes, pool, instance, flags, objectType, object, location, messageCode, pLayerPrefix, pMessage);
}
#endif
#ifdef VK_EXT_debug_marker
void VkDecoderSnapshot::vkDebugMarkerSetObjectTagEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkDebugMarkerObjectTagInfoEXT* pTagInfo)
{
    mImpl->vkDebugMarkerSetObjectTagEXT(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, pTagInfo);
}
#endif
#ifdef VK_EXT_debug_marker
void VkDecoderSnapshot::vkDebugMarkerSetObjectNameEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkDebugMarkerObjectNameInfoEXT* pNameInfo)
{
    mImpl->vkDebugMarkerSetObjectNameEXT(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, pNameInfo);
}
#endif
#ifdef VK_EXT_debug_marker
void VkDecoderSnapshot::vkCmdDebugMarkerBeginEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    const VkDebugMarkerMarkerInfoEXT* pMarkerInfo)
{
    mImpl->vkCmdDebugMarkerBeginEXT(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, pMarkerInfo);
}
#endif
#ifdef VK_EXT_debug_marker
void VkDecoderSnapshot::vkCmdDebugMarkerEndEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer)
{
    mImpl->vkCmdDebugMarkerEndEXT(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer);
}
#endif
#ifdef VK_EXT_debug_marker
void VkDecoderSnapshot::vkCmdDebugMarkerInsertEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    const VkDebugMarkerMarkerInfoEXT* pMarkerInfo)
{
    mImpl->vkCmdDebugMarkerInsertEXT(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, pMarkerInfo);
}
#endif
#ifdef VK_EXT_transform_feedback
void VkDecoderSnapshot::vkCmdBindTransformFeedbackBuffersEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    uint32_t firstBinding,
    uint32_t bindingCount,
    const VkBuffer* pBuffers,
    const VkDeviceSize* pOffsets,
    const VkDeviceSize* pSizes)
{
    mImpl->vkCmdBindTransformFeedbackBuffersEXT(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets, pSizes);
}
#endif
#ifdef VK_EXT_transform_feedback
void VkDecoderSnapshot::vkCmdBeginTransformFeedbackEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    uint32_t firstCounterBuffer,
    uint32_t counterBufferCount,
    const VkBuffer* pCounterBuffers,
    const VkDeviceSize* pCounterBufferOffsets)
{
    mImpl->vkCmdBeginTransformFeedbackEXT(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, firstCounterBuffer, counterBufferCount, pCounterBuffers, pCounterBufferOffsets);
}
#endif
#ifdef VK_EXT_transform_feedback
void VkDecoderSnapshot::vkCmdEndTransformFeedbackEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    uint32_t firstCounterBuffer,
    uint32_t counterBufferCount,
    const VkBuffer* pCounterBuffers,
    const VkDeviceSize* pCounterBufferOffsets)
{
    mImpl->vkCmdEndTransformFeedbackEXT(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, firstCounterBuffer, counterBufferCount, pCounterBuffers, pCounterBufferOffsets);
}
#endif
#ifdef VK_EXT_transform_feedback
void VkDecoderSnapshot::vkCmdBeginQueryIndexedEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkQueryPool queryPool,
    uint32_t query,
    VkQueryControlFlags flags,
    uint32_t index)
{
    mImpl->vkCmdBeginQueryIndexedEXT(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, queryPool, query, flags, index);
}
#endif
#ifdef VK_EXT_transform_feedback
void VkDecoderSnapshot::vkCmdEndQueryIndexedEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkQueryPool queryPool,
    uint32_t query,
    uint32_t index)
{
    mImpl->vkCmdEndQueryIndexedEXT(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, queryPool, query, index);
}
#endif
#ifdef VK_EXT_transform_feedback
void VkDecoderSnapshot::vkCmdDrawIndirectByteCountEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    uint32_t instanceCount,
    uint32_t firstInstance,
    VkBuffer counterBuffer,
    VkDeviceSize counterBufferOffset,
    uint32_t counterOffset,
    uint32_t vertexStride)
{
    mImpl->vkCmdDrawIndirectByteCountEXT(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, instanceCount, firstInstance, counterBuffer, counterBufferOffset, counterOffset, vertexStride);
}
#endif
#ifdef VK_NVX_binary_import
void VkDecoderSnapshot::vkCreateCuModuleNVX(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkCuModuleCreateInfoNVX* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkCuModuleNVX* pModule)
{
    mImpl->vkCreateCuModuleNVX(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, pCreateInfo, pAllocator, pModule);
}
#endif
#ifdef VK_NVX_binary_import
void VkDecoderSnapshot::vkCreateCuFunctionNVX(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkCuFunctionCreateInfoNVX* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkCuFunctionNVX* pFunction)
{
    mImpl->vkCreateCuFunctionNVX(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, pCreateInfo, pAllocator, pFunction);
}
#endif
#ifdef VK_NVX_binary_import
void VkDecoderSnapshot::vkDestroyCuModuleNVX(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkCuModuleNVX module,
    const VkAllocationCallbacks* pAllocator)
{
    mImpl->vkDestroyCuModuleNVX(snapshotTraceBegin, snapshotTraceBytes, pool, device, module, pAllocator);
}
#endif
#ifdef VK_NVX_binary_import
void VkDecoderSnapshot::vkDestroyCuFunctionNVX(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkCuFunctionNVX function,
    const VkAllocationCallbacks* pAllocator)
{
    mImpl->vkDestroyCuFunctionNVX(snapshotTraceBegin, snapshotTraceBytes, pool, device, function, pAllocator);
}
#endif
#ifdef VK_NVX_binary_import
void VkDecoderSnapshot::vkCmdCuLaunchKernelNVX(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    const VkCuLaunchInfoNVX* pLaunchInfo)
{
    mImpl->vkCmdCuLaunchKernelNVX(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, pLaunchInfo);
}
#endif
#ifdef VK_NVX_image_view_handle
void VkDecoderSnapshot::vkGetImageViewHandleNVX(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    uint32_t input_result,
    VkDevice device,
    const VkImageViewHandleInfoNVX* pInfo)
{
    mImpl->vkGetImageViewHandleNVX(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, pInfo);
}
#endif
#ifdef VK_NVX_image_view_handle
void VkDecoderSnapshot::vkGetImageViewAddressNVX(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkImageView imageView,
    VkImageViewAddressPropertiesNVX* pProperties)
{
    mImpl->vkGetImageViewAddressNVX(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, imageView, pProperties);
}
#endif
#ifdef VK_AMD_draw_indirect_count
void VkDecoderSnapshot::vkCmdDrawIndirectCountAMD(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkBuffer buffer,
    VkDeviceSize offset,
    VkBuffer countBuffer,
    VkDeviceSize countBufferOffset,
    uint32_t maxDrawCount,
    uint32_t stride)
{
    mImpl->vkCmdDrawIndirectCountAMD(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
}
#endif
#ifdef VK_AMD_draw_indirect_count
void VkDecoderSnapshot::vkCmdDrawIndexedIndirectCountAMD(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkBuffer buffer,
    VkDeviceSize offset,
    VkBuffer countBuffer,
    VkDeviceSize countBufferOffset,
    uint32_t maxDrawCount,
    uint32_t stride)
{
    mImpl->vkCmdDrawIndexedIndirectCountAMD(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
}
#endif
#ifdef VK_AMD_shader_info
void VkDecoderSnapshot::vkGetShaderInfoAMD(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkPipeline pipeline,
    VkShaderStageFlagBits shaderStage,
    VkShaderInfoTypeAMD infoType,
    size_t* pInfoSize,
    void* pInfo)
{
    mImpl->vkGetShaderInfoAMD(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, pipeline, shaderStage, infoType, pInfoSize, pInfo);
}
#endif
#ifdef VK_GGP_stream_descriptor_surface
void VkDecoderSnapshot::vkCreateStreamDescriptorSurfaceGGP(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkInstance instance,
    const VkStreamDescriptorSurfaceCreateInfoGGP* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSurfaceKHR* pSurface)
{
    mImpl->vkCreateStreamDescriptorSurfaceGGP(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, instance, pCreateInfo, pAllocator, pSurface);
}
#endif
#ifdef VK_NV_external_memory_capabilities
void VkDecoderSnapshot::vkGetPhysicalDeviceExternalImageFormatPropertiesNV(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    VkFormat format,
    VkImageType type,
    VkImageTiling tiling,
    VkImageUsageFlags usage,
    VkImageCreateFlags flags,
    VkExternalMemoryHandleTypeFlagsNV externalHandleType,
    VkExternalImageFormatPropertiesNV* pExternalImageFormatProperties)
{
    mImpl->vkGetPhysicalDeviceExternalImageFormatPropertiesNV(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, physicalDevice, format, type, tiling, usage, flags, externalHandleType, pExternalImageFormatProperties);
}
#endif
#ifdef VK_NV_external_memory_win32
void VkDecoderSnapshot::vkGetMemoryWin32HandleNV(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkDeviceMemory memory,
    VkExternalMemoryHandleTypeFlagsNV handleType,
    HANDLE* pHandle)
{
    mImpl->vkGetMemoryWin32HandleNV(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, memory, handleType, pHandle);
}
#endif
#ifdef VK_NN_vi_surface
void VkDecoderSnapshot::vkCreateViSurfaceNN(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkInstance instance,
    const VkViSurfaceCreateInfoNN* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSurfaceKHR* pSurface)
{
    mImpl->vkCreateViSurfaceNN(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, instance, pCreateInfo, pAllocator, pSurface);
}
#endif
#ifdef VK_EXT_conditional_rendering
void VkDecoderSnapshot::vkCmdBeginConditionalRenderingEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    const VkConditionalRenderingBeginInfoEXT* pConditionalRenderingBegin)
{
    mImpl->vkCmdBeginConditionalRenderingEXT(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, pConditionalRenderingBegin);
}
#endif
#ifdef VK_EXT_conditional_rendering
void VkDecoderSnapshot::vkCmdEndConditionalRenderingEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer)
{
    mImpl->vkCmdEndConditionalRenderingEXT(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer);
}
#endif
#ifdef VK_NV_clip_space_w_scaling
void VkDecoderSnapshot::vkCmdSetViewportWScalingNV(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    uint32_t firstViewport,
    uint32_t viewportCount,
    const VkViewportWScalingNV* pViewportWScalings)
{
    mImpl->vkCmdSetViewportWScalingNV(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, firstViewport, viewportCount, pViewportWScalings);
}
#endif
#ifdef VK_EXT_direct_mode_display
void VkDecoderSnapshot::vkReleaseDisplayEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    VkDisplayKHR display)
{
    mImpl->vkReleaseDisplayEXT(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, physicalDevice, display);
}
#endif
#ifdef VK_EXT_acquire_xlib_display
void VkDecoderSnapshot::vkAcquireXlibDisplayEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    Display* dpy,
    VkDisplayKHR display)
{
    mImpl->vkAcquireXlibDisplayEXT(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, physicalDevice, dpy, display);
}
#endif
#ifdef VK_EXT_acquire_xlib_display
void VkDecoderSnapshot::vkGetRandROutputDisplayEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    Display* dpy,
    RROutput rrOutput,
    VkDisplayKHR* pDisplay)
{
    mImpl->vkGetRandROutputDisplayEXT(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, physicalDevice, dpy, rrOutput, pDisplay);
}
#endif
#ifdef VK_EXT_display_surface_counter
void VkDecoderSnapshot::vkGetPhysicalDeviceSurfaceCapabilities2EXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    VkSurfaceKHR surface,
    VkSurfaceCapabilities2EXT* pSurfaceCapabilities)
{
    mImpl->vkGetPhysicalDeviceSurfaceCapabilities2EXT(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, physicalDevice, surface, pSurfaceCapabilities);
}
#endif
#ifdef VK_EXT_display_control
void VkDecoderSnapshot::vkDisplayPowerControlEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkDisplayKHR display,
    const VkDisplayPowerInfoEXT* pDisplayPowerInfo)
{
    mImpl->vkDisplayPowerControlEXT(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, display, pDisplayPowerInfo);
}
#endif
#ifdef VK_EXT_display_control
void VkDecoderSnapshot::vkRegisterDeviceEventEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkDeviceEventInfoEXT* pDeviceEventInfo,
    const VkAllocationCallbacks* pAllocator,
    VkFence* pFence)
{
    mImpl->vkRegisterDeviceEventEXT(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, pDeviceEventInfo, pAllocator, pFence);
}
#endif
#ifdef VK_EXT_display_control
void VkDecoderSnapshot::vkRegisterDisplayEventEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkDisplayKHR display,
    const VkDisplayEventInfoEXT* pDisplayEventInfo,
    const VkAllocationCallbacks* pAllocator,
    VkFence* pFence)
{
    mImpl->vkRegisterDisplayEventEXT(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, display, pDisplayEventInfo, pAllocator, pFence);
}
#endif
#ifdef VK_EXT_display_control
void VkDecoderSnapshot::vkGetSwapchainCounterEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkSwapchainKHR swapchain,
    VkSurfaceCounterFlagBitsEXT counter,
    uint64_t* pCounterValue)
{
    mImpl->vkGetSwapchainCounterEXT(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, swapchain, counter, pCounterValue);
}
#endif
#ifdef VK_GOOGLE_display_timing
void VkDecoderSnapshot::vkGetRefreshCycleDurationGOOGLE(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkSwapchainKHR swapchain,
    VkRefreshCycleDurationGOOGLE* pDisplayTimingProperties)
{
    mImpl->vkGetRefreshCycleDurationGOOGLE(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, swapchain, pDisplayTimingProperties);
}
#endif
#ifdef VK_GOOGLE_display_timing
void VkDecoderSnapshot::vkGetPastPresentationTimingGOOGLE(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkSwapchainKHR swapchain,
    uint32_t* pPresentationTimingCount,
    VkPastPresentationTimingGOOGLE* pPresentationTimings)
{
    mImpl->vkGetPastPresentationTimingGOOGLE(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, swapchain, pPresentationTimingCount, pPresentationTimings);
}
#endif
#ifdef VK_EXT_discard_rectangles
void VkDecoderSnapshot::vkCmdSetDiscardRectangleEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    uint32_t firstDiscardRectangle,
    uint32_t discardRectangleCount,
    const VkRect2D* pDiscardRectangles)
{
    mImpl->vkCmdSetDiscardRectangleEXT(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, firstDiscardRectangle, discardRectangleCount, pDiscardRectangles);
}
#endif
#ifdef VK_EXT_hdr_metadata
void VkDecoderSnapshot::vkSetHdrMetadataEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    uint32_t swapchainCount,
    const VkSwapchainKHR* pSwapchains,
    const VkHdrMetadataEXT* pMetadata)
{
    mImpl->vkSetHdrMetadataEXT(snapshotTraceBegin, snapshotTraceBytes, pool, device, swapchainCount, pSwapchains, pMetadata);
}
#endif
#ifdef VK_MVK_ios_surface
void VkDecoderSnapshot::vkCreateIOSSurfaceMVK(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkInstance instance,
    const VkIOSSurfaceCreateInfoMVK* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSurfaceKHR* pSurface)
{
    mImpl->vkCreateIOSSurfaceMVK(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, instance, pCreateInfo, pAllocator, pSurface);
}
#endif
#ifdef VK_MVK_macos_surface
void VkDecoderSnapshot::vkCreateMacOSSurfaceMVK(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkInstance instance,
    const VkMacOSSurfaceCreateInfoMVK* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSurfaceKHR* pSurface)
{
    mImpl->vkCreateMacOSSurfaceMVK(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, instance, pCreateInfo, pAllocator, pSurface);
}
#endif
#ifdef VK_MVK_moltenvk
void VkDecoderSnapshot::vkGetMTLDeviceMVK(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkPhysicalDevice physicalDevice,
    void** pMTLDevice)
{
    mImpl->vkGetMTLDeviceMVK(snapshotTraceBegin, snapshotTraceBytes, pool, physicalDevice, pMTLDevice);
}
#endif
#ifdef VK_MVK_moltenvk
void VkDecoderSnapshot::vkSetMTLTextureMVK(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkImage image,
    void* mtlTexture)
{
    mImpl->vkSetMTLTextureMVK(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, image, mtlTexture);
}
#endif
#ifdef VK_MVK_moltenvk
void VkDecoderSnapshot::vkGetMTLTextureMVK(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkImage image,
    void** pMTLTexture)
{
    mImpl->vkGetMTLTextureMVK(snapshotTraceBegin, snapshotTraceBytes, pool, image, pMTLTexture);
}
#endif
#ifdef VK_MVK_moltenvk
void VkDecoderSnapshot::vkGetMTLBufferMVK(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkBuffer buffer,
    void** pMTLBuffer)
{
    mImpl->vkGetMTLBufferMVK(snapshotTraceBegin, snapshotTraceBytes, pool, buffer, pMTLBuffer);
}
#endif
#ifdef VK_MVK_moltenvk
void VkDecoderSnapshot::vkUseIOSurfaceMVK(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkImage image,
    void* ioSurface)
{
    mImpl->vkUseIOSurfaceMVK(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, image, ioSurface);
}
#endif
#ifdef VK_MVK_moltenvk
void VkDecoderSnapshot::vkGetIOSurfaceMVK(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkImage image,
    void** pIOSurface)
{
    mImpl->vkGetIOSurfaceMVK(snapshotTraceBegin, snapshotTraceBytes, pool, image, pIOSurface);
}
#endif
#ifdef VK_EXT_debug_utils
void VkDecoderSnapshot::vkSetDebugUtilsObjectNameEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkDebugUtilsObjectNameInfoEXT* pNameInfo)
{
    mImpl->vkSetDebugUtilsObjectNameEXT(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, pNameInfo);
}
#endif
#ifdef VK_EXT_debug_utils
void VkDecoderSnapshot::vkSetDebugUtilsObjectTagEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkDebugUtilsObjectTagInfoEXT* pTagInfo)
{
    mImpl->vkSetDebugUtilsObjectTagEXT(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, pTagInfo);
}
#endif
#ifdef VK_EXT_debug_utils
void VkDecoderSnapshot::vkQueueBeginDebugUtilsLabelEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkQueue queue,
    const VkDebugUtilsLabelEXT* pLabelInfo)
{
    mImpl->vkQueueBeginDebugUtilsLabelEXT(snapshotTraceBegin, snapshotTraceBytes, pool, queue, pLabelInfo);
}
#endif
#ifdef VK_EXT_debug_utils
void VkDecoderSnapshot::vkQueueEndDebugUtilsLabelEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkQueue queue)
{
    mImpl->vkQueueEndDebugUtilsLabelEXT(snapshotTraceBegin, snapshotTraceBytes, pool, queue);
}
#endif
#ifdef VK_EXT_debug_utils
void VkDecoderSnapshot::vkQueueInsertDebugUtilsLabelEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkQueue queue,
    const VkDebugUtilsLabelEXT* pLabelInfo)
{
    mImpl->vkQueueInsertDebugUtilsLabelEXT(snapshotTraceBegin, snapshotTraceBytes, pool, queue, pLabelInfo);
}
#endif
#ifdef VK_EXT_debug_utils
void VkDecoderSnapshot::vkCmdBeginDebugUtilsLabelEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    const VkDebugUtilsLabelEXT* pLabelInfo)
{
    mImpl->vkCmdBeginDebugUtilsLabelEXT(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, pLabelInfo);
}
#endif
#ifdef VK_EXT_debug_utils
void VkDecoderSnapshot::vkCmdEndDebugUtilsLabelEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer)
{
    mImpl->vkCmdEndDebugUtilsLabelEXT(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer);
}
#endif
#ifdef VK_EXT_debug_utils
void VkDecoderSnapshot::vkCmdInsertDebugUtilsLabelEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    const VkDebugUtilsLabelEXT* pLabelInfo)
{
    mImpl->vkCmdInsertDebugUtilsLabelEXT(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, pLabelInfo);
}
#endif
#ifdef VK_EXT_debug_utils
void VkDecoderSnapshot::vkCreateDebugUtilsMessengerEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkInstance instance,
    const VkDebugUtilsMessengerCreateInfoEXT* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkDebugUtilsMessengerEXT* pMessenger)
{
    mImpl->vkCreateDebugUtilsMessengerEXT(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, instance, pCreateInfo, pAllocator, pMessenger);
}
#endif
#ifdef VK_EXT_debug_utils
void VkDecoderSnapshot::vkDestroyDebugUtilsMessengerEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkInstance instance,
    VkDebugUtilsMessengerEXT messenger,
    const VkAllocationCallbacks* pAllocator)
{
    mImpl->vkDestroyDebugUtilsMessengerEXT(snapshotTraceBegin, snapshotTraceBytes, pool, instance, messenger, pAllocator);
}
#endif
#ifdef VK_EXT_debug_utils
void VkDecoderSnapshot::vkSubmitDebugUtilsMessageEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkInstance instance,
    VkDebugUtilsMessageSeverityFlagBitsEXT messageSeverity,
    VkDebugUtilsMessageTypeFlagsEXT messageTypes,
    const VkDebugUtilsMessengerCallbackDataEXT* pCallbackData)
{
    mImpl->vkSubmitDebugUtilsMessageEXT(snapshotTraceBegin, snapshotTraceBytes, pool, instance, messageSeverity, messageTypes, pCallbackData);
}
#endif
#ifdef VK_ANDROID_external_memory_android_hardware_buffer
void VkDecoderSnapshot::vkGetAndroidHardwareBufferPropertiesANDROID(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const AHardwareBuffer* buffer,
    VkAndroidHardwareBufferPropertiesANDROID* pProperties)
{
    mImpl->vkGetAndroidHardwareBufferPropertiesANDROID(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, buffer, pProperties);
}
#endif
#ifdef VK_ANDROID_external_memory_android_hardware_buffer
void VkDecoderSnapshot::vkGetMemoryAndroidHardwareBufferANDROID(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkMemoryGetAndroidHardwareBufferInfoANDROID* pInfo,
    AHardwareBuffer** pBuffer)
{
    mImpl->vkGetMemoryAndroidHardwareBufferANDROID(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, pInfo, pBuffer);
}
#endif
#ifdef VK_EXT_sample_locations
void VkDecoderSnapshot::vkCmdSetSampleLocationsEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    const VkSampleLocationsInfoEXT* pSampleLocationsInfo)
{
    mImpl->vkCmdSetSampleLocationsEXT(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, pSampleLocationsInfo);
}
#endif
#ifdef VK_EXT_sample_locations
void VkDecoderSnapshot::vkGetPhysicalDeviceMultisamplePropertiesEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkPhysicalDevice physicalDevice,
    VkSampleCountFlagBits samples,
    VkMultisamplePropertiesEXT* pMultisampleProperties)
{
    mImpl->vkGetPhysicalDeviceMultisamplePropertiesEXT(snapshotTraceBegin, snapshotTraceBytes, pool, physicalDevice, samples, pMultisampleProperties);
}
#endif
#ifdef VK_EXT_image_drm_format_modifier
void VkDecoderSnapshot::vkGetImageDrmFormatModifierPropertiesEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkImage image,
    VkImageDrmFormatModifierPropertiesEXT* pProperties)
{
    mImpl->vkGetImageDrmFormatModifierPropertiesEXT(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, image, pProperties);
}
#endif
#ifdef VK_EXT_validation_cache
void VkDecoderSnapshot::vkCreateValidationCacheEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkValidationCacheCreateInfoEXT* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkValidationCacheEXT* pValidationCache)
{
    mImpl->vkCreateValidationCacheEXT(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, pCreateInfo, pAllocator, pValidationCache);
}
#endif
#ifdef VK_EXT_validation_cache
void VkDecoderSnapshot::vkDestroyValidationCacheEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkValidationCacheEXT validationCache,
    const VkAllocationCallbacks* pAllocator)
{
    mImpl->vkDestroyValidationCacheEXT(snapshotTraceBegin, snapshotTraceBytes, pool, device, validationCache, pAllocator);
}
#endif
#ifdef VK_EXT_validation_cache
void VkDecoderSnapshot::vkMergeValidationCachesEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkValidationCacheEXT dstCache,
    uint32_t srcCacheCount,
    const VkValidationCacheEXT* pSrcCaches)
{
    mImpl->vkMergeValidationCachesEXT(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, dstCache, srcCacheCount, pSrcCaches);
}
#endif
#ifdef VK_EXT_validation_cache
void VkDecoderSnapshot::vkGetValidationCacheDataEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkValidationCacheEXT validationCache,
    size_t* pDataSize,
    void* pData)
{
    mImpl->vkGetValidationCacheDataEXT(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, validationCache, pDataSize, pData);
}
#endif
#ifdef VK_NV_shading_rate_image
void VkDecoderSnapshot::vkCmdBindShadingRateImageNV(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkImageView imageView,
    VkImageLayout imageLayout)
{
    mImpl->vkCmdBindShadingRateImageNV(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, imageView, imageLayout);
}
#endif
#ifdef VK_NV_shading_rate_image
void VkDecoderSnapshot::vkCmdSetViewportShadingRatePaletteNV(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    uint32_t firstViewport,
    uint32_t viewportCount,
    const VkShadingRatePaletteNV* pShadingRatePalettes)
{
    mImpl->vkCmdSetViewportShadingRatePaletteNV(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, firstViewport, viewportCount, pShadingRatePalettes);
}
#endif
#ifdef VK_NV_shading_rate_image
void VkDecoderSnapshot::vkCmdSetCoarseSampleOrderNV(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkCoarseSampleOrderTypeNV sampleOrderType,
    uint32_t customSampleOrderCount,
    const VkCoarseSampleOrderCustomNV* pCustomSampleOrders)
{
    mImpl->vkCmdSetCoarseSampleOrderNV(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, sampleOrderType, customSampleOrderCount, pCustomSampleOrders);
}
#endif
#ifdef VK_NV_ray_tracing
void VkDecoderSnapshot::vkCreateAccelerationStructureNV(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkAccelerationStructureCreateInfoNV* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkAccelerationStructureNV* pAccelerationStructure)
{
    mImpl->vkCreateAccelerationStructureNV(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, pCreateInfo, pAllocator, pAccelerationStructure);
}
#endif
#ifdef VK_NV_ray_tracing
void VkDecoderSnapshot::vkDestroyAccelerationStructureNV(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkAccelerationStructureNV accelerationStructure,
    const VkAllocationCallbacks* pAllocator)
{
    mImpl->vkDestroyAccelerationStructureNV(snapshotTraceBegin, snapshotTraceBytes, pool, device, accelerationStructure, pAllocator);
}
#endif
#ifdef VK_NV_ray_tracing
void VkDecoderSnapshot::vkGetAccelerationStructureMemoryRequirementsNV(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    const VkAccelerationStructureMemoryRequirementsInfoNV* pInfo,
    VkMemoryRequirements2KHR* pMemoryRequirements)
{
    mImpl->vkGetAccelerationStructureMemoryRequirementsNV(snapshotTraceBegin, snapshotTraceBytes, pool, device, pInfo, pMemoryRequirements);
}
#endif
#ifdef VK_NV_ray_tracing
void VkDecoderSnapshot::vkBindAccelerationStructureMemoryNV(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    uint32_t bindInfoCount,
    const VkBindAccelerationStructureMemoryInfoNV* pBindInfos)
{
    mImpl->vkBindAccelerationStructureMemoryNV(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, bindInfoCount, pBindInfos);
}
#endif
#ifdef VK_NV_ray_tracing
void VkDecoderSnapshot::vkCmdBuildAccelerationStructureNV(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    const VkAccelerationStructureInfoNV* pInfo,
    VkBuffer instanceData,
    VkDeviceSize instanceOffset,
    VkBool32 update,
    VkAccelerationStructureNV dst,
    VkAccelerationStructureNV src,
    VkBuffer scratch,
    VkDeviceSize scratchOffset)
{
    mImpl->vkCmdBuildAccelerationStructureNV(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, pInfo, instanceData, instanceOffset, update, dst, src, scratch, scratchOffset);
}
#endif
#ifdef VK_NV_ray_tracing
void VkDecoderSnapshot::vkCmdCopyAccelerationStructureNV(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkAccelerationStructureNV dst,
    VkAccelerationStructureNV src,
    VkCopyAccelerationStructureModeKHR mode)
{
    mImpl->vkCmdCopyAccelerationStructureNV(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, dst, src, mode);
}
#endif
#ifdef VK_NV_ray_tracing
void VkDecoderSnapshot::vkCmdTraceRaysNV(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkBuffer raygenShaderBindingTableBuffer,
    VkDeviceSize raygenShaderBindingOffset,
    VkBuffer missShaderBindingTableBuffer,
    VkDeviceSize missShaderBindingOffset,
    VkDeviceSize missShaderBindingStride,
    VkBuffer hitShaderBindingTableBuffer,
    VkDeviceSize hitShaderBindingOffset,
    VkDeviceSize hitShaderBindingStride,
    VkBuffer callableShaderBindingTableBuffer,
    VkDeviceSize callableShaderBindingOffset,
    VkDeviceSize callableShaderBindingStride,
    uint32_t width,
    uint32_t height,
    uint32_t depth)
{
    mImpl->vkCmdTraceRaysNV(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, raygenShaderBindingTableBuffer, raygenShaderBindingOffset, missShaderBindingTableBuffer, missShaderBindingOffset, missShaderBindingStride, hitShaderBindingTableBuffer, hitShaderBindingOffset, hitShaderBindingStride, callableShaderBindingTableBuffer, callableShaderBindingOffset, callableShaderBindingStride, width, height, depth);
}
#endif
#ifdef VK_NV_ray_tracing
void VkDecoderSnapshot::vkCreateRayTracingPipelinesNV(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkPipelineCache pipelineCache,
    uint32_t createInfoCount,
    const VkRayTracingPipelineCreateInfoNV* pCreateInfos,
    const VkAllocationCallbacks* pAllocator,
    VkPipeline* pPipelines)
{
    mImpl->vkCreateRayTracingPipelinesNV(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);
}
#endif
#ifdef VK_NV_ray_tracing
void VkDecoderSnapshot::vkGetRayTracingShaderGroupHandlesKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkPipeline pipeline,
    uint32_t firstGroup,
    uint32_t groupCount,
    size_t dataSize,
    void* pData)
{
    mImpl->vkGetRayTracingShaderGroupHandlesKHR(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, pipeline, firstGroup, groupCount, dataSize, pData);
}
#endif
#ifdef VK_NV_ray_tracing
void VkDecoderSnapshot::vkGetRayTracingShaderGroupHandlesNV(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkPipeline pipeline,
    uint32_t firstGroup,
    uint32_t groupCount,
    size_t dataSize,
    void* pData)
{
    mImpl->vkGetRayTracingShaderGroupHandlesNV(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, pipeline, firstGroup, groupCount, dataSize, pData);
}
#endif
#ifdef VK_NV_ray_tracing
void VkDecoderSnapshot::vkGetAccelerationStructureHandleNV(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkAccelerationStructureNV accelerationStructure,
    size_t dataSize,
    void* pData)
{
    mImpl->vkGetAccelerationStructureHandleNV(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, accelerationStructure, dataSize, pData);
}
#endif
#ifdef VK_NV_ray_tracing
void VkDecoderSnapshot::vkCmdWriteAccelerationStructuresPropertiesNV(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    uint32_t accelerationStructureCount,
    const VkAccelerationStructureNV* pAccelerationStructures,
    VkQueryType queryType,
    VkQueryPool queryPool,
    uint32_t firstQuery)
{
    mImpl->vkCmdWriteAccelerationStructuresPropertiesNV(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, accelerationStructureCount, pAccelerationStructures, queryType, queryPool, firstQuery);
}
#endif
#ifdef VK_NV_ray_tracing
void VkDecoderSnapshot::vkCompileDeferredNV(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkPipeline pipeline,
    uint32_t shader)
{
    mImpl->vkCompileDeferredNV(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, pipeline, shader);
}
#endif
#ifdef VK_EXT_external_memory_host
void VkDecoderSnapshot::vkGetMemoryHostPointerPropertiesEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkExternalMemoryHandleTypeFlagBits handleType,
    const void* pHostPointer,
    VkMemoryHostPointerPropertiesEXT* pMemoryHostPointerProperties)
{
    mImpl->vkGetMemoryHostPointerPropertiesEXT(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, handleType, pHostPointer, pMemoryHostPointerProperties);
}
#endif
#ifdef VK_AMD_buffer_marker
void VkDecoderSnapshot::vkCmdWriteBufferMarkerAMD(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkPipelineStageFlagBits pipelineStage,
    VkBuffer dstBuffer,
    VkDeviceSize dstOffset,
    uint32_t marker)
{
    mImpl->vkCmdWriteBufferMarkerAMD(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, pipelineStage, dstBuffer, dstOffset, marker);
}
#endif
#ifdef VK_EXT_calibrated_timestamps
void VkDecoderSnapshot::vkGetPhysicalDeviceCalibrateableTimeDomainsEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    uint32_t* pTimeDomainCount,
    VkTimeDomainEXT* pTimeDomains)
{
    mImpl->vkGetPhysicalDeviceCalibrateableTimeDomainsEXT(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, physicalDevice, pTimeDomainCount, pTimeDomains);
}
#endif
#ifdef VK_EXT_calibrated_timestamps
void VkDecoderSnapshot::vkGetCalibratedTimestampsEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    uint32_t timestampCount,
    const VkCalibratedTimestampInfoEXT* pTimestampInfos,
    uint64_t* pTimestamps,
    uint64_t* pMaxDeviation)
{
    mImpl->vkGetCalibratedTimestampsEXT(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, timestampCount, pTimestampInfos, pTimestamps, pMaxDeviation);
}
#endif
#ifdef VK_NV_mesh_shader
void VkDecoderSnapshot::vkCmdDrawMeshTasksNV(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    uint32_t taskCount,
    uint32_t firstTask)
{
    mImpl->vkCmdDrawMeshTasksNV(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, taskCount, firstTask);
}
#endif
#ifdef VK_NV_mesh_shader
void VkDecoderSnapshot::vkCmdDrawMeshTasksIndirectNV(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkBuffer buffer,
    VkDeviceSize offset,
    uint32_t drawCount,
    uint32_t stride)
{
    mImpl->vkCmdDrawMeshTasksIndirectNV(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, buffer, offset, drawCount, stride);
}
#endif
#ifdef VK_NV_mesh_shader
void VkDecoderSnapshot::vkCmdDrawMeshTasksIndirectCountNV(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkBuffer buffer,
    VkDeviceSize offset,
    VkBuffer countBuffer,
    VkDeviceSize countBufferOffset,
    uint32_t maxDrawCount,
    uint32_t stride)
{
    mImpl->vkCmdDrawMeshTasksIndirectCountNV(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
}
#endif
#ifdef VK_NV_scissor_exclusive
void VkDecoderSnapshot::vkCmdSetExclusiveScissorNV(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    uint32_t firstExclusiveScissor,
    uint32_t exclusiveScissorCount,
    const VkRect2D* pExclusiveScissors)
{
    mImpl->vkCmdSetExclusiveScissorNV(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, firstExclusiveScissor, exclusiveScissorCount, pExclusiveScissors);
}
#endif
#ifdef VK_NV_device_diagnostic_checkpoints
void VkDecoderSnapshot::vkCmdSetCheckpointNV(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    const void* pCheckpointMarker)
{
    mImpl->vkCmdSetCheckpointNV(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, pCheckpointMarker);
}
#endif
#ifdef VK_NV_device_diagnostic_checkpoints
void VkDecoderSnapshot::vkGetQueueCheckpointDataNV(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkQueue queue,
    uint32_t* pCheckpointDataCount,
    VkCheckpointDataNV* pCheckpointData)
{
    mImpl->vkGetQueueCheckpointDataNV(snapshotTraceBegin, snapshotTraceBytes, pool, queue, pCheckpointDataCount, pCheckpointData);
}
#endif
#ifdef VK_INTEL_performance_query
void VkDecoderSnapshot::vkInitializePerformanceApiINTEL(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkInitializePerformanceApiInfoINTEL* pInitializeInfo)
{
    mImpl->vkInitializePerformanceApiINTEL(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, pInitializeInfo);
}
#endif
#ifdef VK_INTEL_performance_query
void VkDecoderSnapshot::vkUninitializePerformanceApiINTEL(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device)
{
    mImpl->vkUninitializePerformanceApiINTEL(snapshotTraceBegin, snapshotTraceBytes, pool, device);
}
#endif
#ifdef VK_INTEL_performance_query
void VkDecoderSnapshot::vkCmdSetPerformanceMarkerINTEL(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkCommandBuffer commandBuffer,
    const VkPerformanceMarkerInfoINTEL* pMarkerInfo)
{
    mImpl->vkCmdSetPerformanceMarkerINTEL(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, commandBuffer, pMarkerInfo);
}
#endif
#ifdef VK_INTEL_performance_query
void VkDecoderSnapshot::vkCmdSetPerformanceStreamMarkerINTEL(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkCommandBuffer commandBuffer,
    const VkPerformanceStreamMarkerInfoINTEL* pMarkerInfo)
{
    mImpl->vkCmdSetPerformanceStreamMarkerINTEL(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, commandBuffer, pMarkerInfo);
}
#endif
#ifdef VK_INTEL_performance_query
void VkDecoderSnapshot::vkCmdSetPerformanceOverrideINTEL(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkCommandBuffer commandBuffer,
    const VkPerformanceOverrideInfoINTEL* pOverrideInfo)
{
    mImpl->vkCmdSetPerformanceOverrideINTEL(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, commandBuffer, pOverrideInfo);
}
#endif
#ifdef VK_INTEL_performance_query
void VkDecoderSnapshot::vkAcquirePerformanceConfigurationINTEL(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkPerformanceConfigurationAcquireInfoINTEL* pAcquireInfo,
    VkPerformanceConfigurationINTEL* pConfiguration)
{
    mImpl->vkAcquirePerformanceConfigurationINTEL(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, pAcquireInfo, pConfiguration);
}
#endif
#ifdef VK_INTEL_performance_query
void VkDecoderSnapshot::vkReleasePerformanceConfigurationINTEL(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkPerformanceConfigurationINTEL configuration)
{
    mImpl->vkReleasePerformanceConfigurationINTEL(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, configuration);
}
#endif
#ifdef VK_INTEL_performance_query
void VkDecoderSnapshot::vkQueueSetPerformanceConfigurationINTEL(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkQueue queue,
    VkPerformanceConfigurationINTEL configuration)
{
    mImpl->vkQueueSetPerformanceConfigurationINTEL(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, queue, configuration);
}
#endif
#ifdef VK_INTEL_performance_query
void VkDecoderSnapshot::vkGetPerformanceParameterINTEL(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkPerformanceParameterTypeINTEL parameter,
    VkPerformanceValueINTEL* pValue)
{
    mImpl->vkGetPerformanceParameterINTEL(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, parameter, pValue);
}
#endif
#ifdef VK_AMD_display_native_hdr
void VkDecoderSnapshot::vkSetLocalDimmingAMD(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkSwapchainKHR swapChain,
    VkBool32 localDimmingEnable)
{
    mImpl->vkSetLocalDimmingAMD(snapshotTraceBegin, snapshotTraceBytes, pool, device, swapChain, localDimmingEnable);
}
#endif
#ifdef VK_FUCHSIA_imagepipe_surface
void VkDecoderSnapshot::vkCreateImagePipeSurfaceFUCHSIA(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkInstance instance,
    const VkImagePipeSurfaceCreateInfoFUCHSIA* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSurfaceKHR* pSurface)
{
    mImpl->vkCreateImagePipeSurfaceFUCHSIA(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, instance, pCreateInfo, pAllocator, pSurface);
}
#endif
#ifdef VK_EXT_metal_surface
void VkDecoderSnapshot::vkCreateMetalSurfaceEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkInstance instance,
    const VkMetalSurfaceCreateInfoEXT* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSurfaceKHR* pSurface)
{
    mImpl->vkCreateMetalSurfaceEXT(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, instance, pCreateInfo, pAllocator, pSurface);
}
#endif
#ifdef VK_EXT_buffer_device_address
void VkDecoderSnapshot::vkGetBufferDeviceAddressEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDeviceAddress input_result,
    VkDevice device,
    const VkBufferDeviceAddressInfo* pInfo)
{
    mImpl->vkGetBufferDeviceAddressEXT(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, pInfo);
}
#endif
#ifdef VK_EXT_tooling_info
void VkDecoderSnapshot::vkGetPhysicalDeviceToolPropertiesEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    uint32_t* pToolCount,
    VkPhysicalDeviceToolPropertiesEXT* pToolProperties)
{
    mImpl->vkGetPhysicalDeviceToolPropertiesEXT(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, physicalDevice, pToolCount, pToolProperties);
}
#endif
#ifdef VK_NV_cooperative_matrix
void VkDecoderSnapshot::vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    uint32_t* pPropertyCount,
    VkCooperativeMatrixPropertiesNV* pProperties)
{
    mImpl->vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, physicalDevice, pPropertyCount, pProperties);
}
#endif
#ifdef VK_NV_coverage_reduction_mode
void VkDecoderSnapshot::vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    uint32_t* pCombinationCount,
    VkFramebufferMixedSamplesCombinationNV* pCombinations)
{
    mImpl->vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, physicalDevice, pCombinationCount, pCombinations);
}
#endif
#ifdef VK_EXT_full_screen_exclusive
void VkDecoderSnapshot::vkGetPhysicalDeviceSurfacePresentModes2EXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    const VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo,
    uint32_t* pPresentModeCount,
    VkPresentModeKHR* pPresentModes)
{
    mImpl->vkGetPhysicalDeviceSurfacePresentModes2EXT(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, physicalDevice, pSurfaceInfo, pPresentModeCount, pPresentModes);
}
#endif
#ifdef VK_EXT_full_screen_exclusive
void VkDecoderSnapshot::vkAcquireFullScreenExclusiveModeEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkSwapchainKHR swapchain)
{
    mImpl->vkAcquireFullScreenExclusiveModeEXT(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, swapchain);
}
#endif
#ifdef VK_EXT_full_screen_exclusive
void VkDecoderSnapshot::vkReleaseFullScreenExclusiveModeEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkSwapchainKHR swapchain)
{
    mImpl->vkReleaseFullScreenExclusiveModeEXT(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, swapchain);
}
#endif
#ifdef VK_EXT_full_screen_exclusive
void VkDecoderSnapshot::vkGetDeviceGroupSurfacePresentModes2EXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo,
    VkDeviceGroupPresentModeFlagsKHR* pModes)
{
    mImpl->vkGetDeviceGroupSurfacePresentModes2EXT(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, pSurfaceInfo, pModes);
}
#endif
#ifdef VK_EXT_headless_surface
void VkDecoderSnapshot::vkCreateHeadlessSurfaceEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkInstance instance,
    const VkHeadlessSurfaceCreateInfoEXT* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSurfaceKHR* pSurface)
{
    mImpl->vkCreateHeadlessSurfaceEXT(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, instance, pCreateInfo, pAllocator, pSurface);
}
#endif
#ifdef VK_EXT_line_rasterization
void VkDecoderSnapshot::vkCmdSetLineStippleEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    uint32_t lineStippleFactor,
    uint16_t lineStipplePattern)
{
    mImpl->vkCmdSetLineStippleEXT(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, lineStippleFactor, lineStipplePattern);
}
#endif
#ifdef VK_EXT_host_query_reset
void VkDecoderSnapshot::vkResetQueryPoolEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkQueryPool queryPool,
    uint32_t firstQuery,
    uint32_t queryCount)
{
    mImpl->vkResetQueryPoolEXT(snapshotTraceBegin, snapshotTraceBytes, pool, device, queryPool, firstQuery, queryCount);
}
#endif
#ifdef VK_EXT_extended_dynamic_state
void VkDecoderSnapshot::vkCmdSetCullModeEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkCullModeFlags cullMode)
{
    mImpl->vkCmdSetCullModeEXT(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, cullMode);
}
#endif
#ifdef VK_EXT_extended_dynamic_state
void VkDecoderSnapshot::vkCmdSetFrontFaceEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkFrontFace frontFace)
{
    mImpl->vkCmdSetFrontFaceEXT(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, frontFace);
}
#endif
#ifdef VK_EXT_extended_dynamic_state
void VkDecoderSnapshot::vkCmdSetPrimitiveTopologyEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkPrimitiveTopology primitiveTopology)
{
    mImpl->vkCmdSetPrimitiveTopologyEXT(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, primitiveTopology);
}
#endif
#ifdef VK_EXT_extended_dynamic_state
void VkDecoderSnapshot::vkCmdSetViewportWithCountEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    uint32_t viewportCount,
    const VkViewport* pViewports)
{
    mImpl->vkCmdSetViewportWithCountEXT(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, viewportCount, pViewports);
}
#endif
#ifdef VK_EXT_extended_dynamic_state
void VkDecoderSnapshot::vkCmdSetScissorWithCountEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    uint32_t scissorCount,
    const VkRect2D* pScissors)
{
    mImpl->vkCmdSetScissorWithCountEXT(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, scissorCount, pScissors);
}
#endif
#ifdef VK_EXT_extended_dynamic_state
void VkDecoderSnapshot::vkCmdBindVertexBuffers2EXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    uint32_t firstBinding,
    uint32_t bindingCount,
    const VkBuffer* pBuffers,
    const VkDeviceSize* pOffsets,
    const VkDeviceSize* pSizes,
    const VkDeviceSize* pStrides)
{
    mImpl->vkCmdBindVertexBuffers2EXT(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets, pSizes, pStrides);
}
#endif
#ifdef VK_EXT_extended_dynamic_state
void VkDecoderSnapshot::vkCmdSetDepthTestEnableEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkBool32 depthTestEnable)
{
    mImpl->vkCmdSetDepthTestEnableEXT(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, depthTestEnable);
}
#endif
#ifdef VK_EXT_extended_dynamic_state
void VkDecoderSnapshot::vkCmdSetDepthWriteEnableEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkBool32 depthWriteEnable)
{
    mImpl->vkCmdSetDepthWriteEnableEXT(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, depthWriteEnable);
}
#endif
#ifdef VK_EXT_extended_dynamic_state
void VkDecoderSnapshot::vkCmdSetDepthCompareOpEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkCompareOp depthCompareOp)
{
    mImpl->vkCmdSetDepthCompareOpEXT(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, depthCompareOp);
}
#endif
#ifdef VK_EXT_extended_dynamic_state
void VkDecoderSnapshot::vkCmdSetDepthBoundsTestEnableEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkBool32 depthBoundsTestEnable)
{
    mImpl->vkCmdSetDepthBoundsTestEnableEXT(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, depthBoundsTestEnable);
}
#endif
#ifdef VK_EXT_extended_dynamic_state
void VkDecoderSnapshot::vkCmdSetStencilTestEnableEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkBool32 stencilTestEnable)
{
    mImpl->vkCmdSetStencilTestEnableEXT(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, stencilTestEnable);
}
#endif
#ifdef VK_EXT_extended_dynamic_state
void VkDecoderSnapshot::vkCmdSetStencilOpEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkStencilFaceFlags faceMask,
    VkStencilOp failOp,
    VkStencilOp passOp,
    VkStencilOp depthFailOp,
    VkCompareOp compareOp)
{
    mImpl->vkCmdSetStencilOpEXT(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, faceMask, failOp, passOp, depthFailOp, compareOp);
}
#endif
#ifdef VK_NV_device_generated_commands
void VkDecoderSnapshot::vkGetGeneratedCommandsMemoryRequirementsNV(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    const VkGeneratedCommandsMemoryRequirementsInfoNV* pInfo,
    VkMemoryRequirements2* pMemoryRequirements)
{
    mImpl->vkGetGeneratedCommandsMemoryRequirementsNV(snapshotTraceBegin, snapshotTraceBytes, pool, device, pInfo, pMemoryRequirements);
}
#endif
#ifdef VK_NV_device_generated_commands
void VkDecoderSnapshot::vkCmdPreprocessGeneratedCommandsNV(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    const VkGeneratedCommandsInfoNV* pGeneratedCommandsInfo)
{
    mImpl->vkCmdPreprocessGeneratedCommandsNV(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, pGeneratedCommandsInfo);
}
#endif
#ifdef VK_NV_device_generated_commands
void VkDecoderSnapshot::vkCmdExecuteGeneratedCommandsNV(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkBool32 isPreprocessed,
    const VkGeneratedCommandsInfoNV* pGeneratedCommandsInfo)
{
    mImpl->vkCmdExecuteGeneratedCommandsNV(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, isPreprocessed, pGeneratedCommandsInfo);
}
#endif
#ifdef VK_NV_device_generated_commands
void VkDecoderSnapshot::vkCmdBindPipelineShaderGroupNV(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkPipelineBindPoint pipelineBindPoint,
    VkPipeline pipeline,
    uint32_t groupIndex)
{
    mImpl->vkCmdBindPipelineShaderGroupNV(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, pipelineBindPoint, pipeline, groupIndex);
}
#endif
#ifdef VK_NV_device_generated_commands
void VkDecoderSnapshot::vkCreateIndirectCommandsLayoutNV(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkIndirectCommandsLayoutCreateInfoNV* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkIndirectCommandsLayoutNV* pIndirectCommandsLayout)
{
    mImpl->vkCreateIndirectCommandsLayoutNV(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, pCreateInfo, pAllocator, pIndirectCommandsLayout);
}
#endif
#ifdef VK_NV_device_generated_commands
void VkDecoderSnapshot::vkDestroyIndirectCommandsLayoutNV(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkIndirectCommandsLayoutNV indirectCommandsLayout,
    const VkAllocationCallbacks* pAllocator)
{
    mImpl->vkDestroyIndirectCommandsLayoutNV(snapshotTraceBegin, snapshotTraceBytes, pool, device, indirectCommandsLayout, pAllocator);
}
#endif
#ifdef VK_EXT_acquire_drm_display
void VkDecoderSnapshot::vkAcquireDrmDisplayEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    int32_t drmFd,
    VkDisplayKHR display)
{
    mImpl->vkAcquireDrmDisplayEXT(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, physicalDevice, drmFd, display);
}
#endif
#ifdef VK_EXT_acquire_drm_display
void VkDecoderSnapshot::vkGetDrmDisplayEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    int32_t drmFd,
    uint32_t connectorId,
    VkDisplayKHR* display)
{
    mImpl->vkGetDrmDisplayEXT(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, physicalDevice, drmFd, connectorId, display);
}
#endif
#ifdef VK_EXT_private_data
void VkDecoderSnapshot::vkCreatePrivateDataSlotEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkPrivateDataSlotCreateInfoEXT* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkPrivateDataSlotEXT* pPrivateDataSlot)
{
    mImpl->vkCreatePrivateDataSlotEXT(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, pCreateInfo, pAllocator, pPrivateDataSlot);
}
#endif
#ifdef VK_EXT_private_data
void VkDecoderSnapshot::vkDestroyPrivateDataSlotEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkPrivateDataSlotEXT privateDataSlot,
    const VkAllocationCallbacks* pAllocator)
{
    mImpl->vkDestroyPrivateDataSlotEXT(snapshotTraceBegin, snapshotTraceBytes, pool, device, privateDataSlot, pAllocator);
}
#endif
#ifdef VK_EXT_private_data
void VkDecoderSnapshot::vkSetPrivateDataEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkObjectType objectType,
    uint64_t objectHandle,
    VkPrivateDataSlotEXT privateDataSlot,
    uint64_t data)
{
    mImpl->vkSetPrivateDataEXT(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, objectType, objectHandle, privateDataSlot, data);
}
#endif
#ifdef VK_EXT_private_data
void VkDecoderSnapshot::vkGetPrivateDataEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkObjectType objectType,
    uint64_t objectHandle,
    VkPrivateDataSlotEXT privateDataSlot,
    uint64_t* pData)
{
    mImpl->vkGetPrivateDataEXT(snapshotTraceBegin, snapshotTraceBytes, pool, device, objectType, objectHandle, privateDataSlot, pData);
}
#endif
#ifdef VK_NV_fragment_shading_rate_enums
void VkDecoderSnapshot::vkCmdSetFragmentShadingRateEnumNV(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkFragmentShadingRateNV shadingRate,
    const VkFragmentShadingRateCombinerOpKHR combinerOps[2])
{
    mImpl->vkCmdSetFragmentShadingRateEnumNV(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, shadingRate, combinerOps);
}
#endif
#ifdef VK_NV_acquire_winrt_display
void VkDecoderSnapshot::vkAcquireWinrtDisplayNV(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    VkDisplayKHR display)
{
    mImpl->vkAcquireWinrtDisplayNV(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, physicalDevice, display);
}
#endif
#ifdef VK_NV_acquire_winrt_display
void VkDecoderSnapshot::vkGetWinrtDisplayNV(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    uint32_t deviceRelativeId,
    VkDisplayKHR* pDisplay)
{
    mImpl->vkGetWinrtDisplayNV(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, physicalDevice, deviceRelativeId, pDisplay);
}
#endif
#ifdef VK_EXT_directfb_surface
void VkDecoderSnapshot::vkCreateDirectFBSurfaceEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkInstance instance,
    const VkDirectFBSurfaceCreateInfoEXT* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSurfaceKHR* pSurface)
{
    mImpl->vkCreateDirectFBSurfaceEXT(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, instance, pCreateInfo, pAllocator, pSurface);
}
#endif
#ifdef VK_EXT_directfb_surface
void VkDecoderSnapshot::vkGetPhysicalDeviceDirectFBPresentationSupportEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkBool32 input_result,
    VkPhysicalDevice physicalDevice,
    uint32_t queueFamilyIndex,
    IDirectFB* dfb)
{
    mImpl->vkGetPhysicalDeviceDirectFBPresentationSupportEXT(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, physicalDevice, queueFamilyIndex, dfb);
}
#endif
#ifdef VK_EXT_vertex_input_dynamic_state
void VkDecoderSnapshot::vkCmdSetVertexInputEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    uint32_t vertexBindingDescriptionCount,
    const VkVertexInputBindingDescription2EXT* pVertexBindingDescriptions,
    uint32_t vertexAttributeDescriptionCount,
    const VkVertexInputAttributeDescription2EXT* pVertexAttributeDescriptions)
{
    mImpl->vkCmdSetVertexInputEXT(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, vertexBindingDescriptionCount, pVertexBindingDescriptions, vertexAttributeDescriptionCount, pVertexAttributeDescriptions);
}
#endif
#ifdef VK_FUCHSIA_external_memory
void VkDecoderSnapshot::vkGetMemoryZirconHandleFUCHSIA(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkMemoryGetZirconHandleInfoFUCHSIA* pGetZirconHandleInfo,
    zx_handle_t* pZirconHandle)
{
    mImpl->vkGetMemoryZirconHandleFUCHSIA(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, pGetZirconHandleInfo, pZirconHandle);
}
#endif
#ifdef VK_FUCHSIA_external_memory
void VkDecoderSnapshot::vkGetMemoryZirconHandlePropertiesFUCHSIA(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkExternalMemoryHandleTypeFlagBits handleType,
    zx_handle_t zirconHandle,
    VkMemoryZirconHandlePropertiesFUCHSIA* pMemoryZirconHandleProperties)
{
    mImpl->vkGetMemoryZirconHandlePropertiesFUCHSIA(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, handleType, zirconHandle, pMemoryZirconHandleProperties);
}
#endif
#ifdef VK_FUCHSIA_external_semaphore
void VkDecoderSnapshot::vkImportSemaphoreZirconHandleFUCHSIA(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkImportSemaphoreZirconHandleInfoFUCHSIA* pImportSemaphoreZirconHandleInfo)
{
    mImpl->vkImportSemaphoreZirconHandleFUCHSIA(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, pImportSemaphoreZirconHandleInfo);
}
#endif
#ifdef VK_FUCHSIA_external_semaphore
void VkDecoderSnapshot::vkGetSemaphoreZirconHandleFUCHSIA(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkSemaphoreGetZirconHandleInfoFUCHSIA* pGetZirconHandleInfo,
    zx_handle_t* pZirconHandle)
{
    mImpl->vkGetSemaphoreZirconHandleFUCHSIA(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, pGetZirconHandleInfo, pZirconHandle);
}
#endif
#ifdef VK_FUCHSIA_buffer_collection
void VkDecoderSnapshot::vkCreateBufferCollectionFUCHSIA(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkBufferCollectionCreateInfoFUCHSIA* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkBufferCollectionFUCHSIA* pCollection)
{
    mImpl->vkCreateBufferCollectionFUCHSIA(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, pCreateInfo, pAllocator, pCollection);
}
#endif
#ifdef VK_FUCHSIA_buffer_collection
void VkDecoderSnapshot::vkSetBufferCollectionImageConstraintsFUCHSIA(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkBufferCollectionFUCHSIA collection,
    const VkImageConstraintsInfoFUCHSIA* pImageConstraintsInfo)
{
    mImpl->vkSetBufferCollectionImageConstraintsFUCHSIA(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, collection, pImageConstraintsInfo);
}
#endif
#ifdef VK_FUCHSIA_buffer_collection
void VkDecoderSnapshot::vkSetBufferCollectionBufferConstraintsFUCHSIA(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkBufferCollectionFUCHSIA collection,
    const VkBufferConstraintsInfoFUCHSIA* pBufferConstraintsInfo)
{
    mImpl->vkSetBufferCollectionBufferConstraintsFUCHSIA(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, collection, pBufferConstraintsInfo);
}
#endif
#ifdef VK_FUCHSIA_buffer_collection
void VkDecoderSnapshot::vkDestroyBufferCollectionFUCHSIA(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkBufferCollectionFUCHSIA collection,
    const VkAllocationCallbacks* pAllocator)
{
    mImpl->vkDestroyBufferCollectionFUCHSIA(snapshotTraceBegin, snapshotTraceBytes, pool, device, collection, pAllocator);
}
#endif
#ifdef VK_FUCHSIA_buffer_collection
void VkDecoderSnapshot::vkGetBufferCollectionPropertiesFUCHSIA(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkBufferCollectionFUCHSIA collection,
    VkBufferCollectionPropertiesFUCHSIA* pProperties)
{
    mImpl->vkGetBufferCollectionPropertiesFUCHSIA(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, collection, pProperties);
}
#endif
#ifdef VK_HUAWEI_subpass_shading
void VkDecoderSnapshot::vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkRenderPass renderpass,
    VkExtent2D* pMaxWorkgroupSize)
{
    mImpl->vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, renderpass, pMaxWorkgroupSize);
}
#endif
#ifdef VK_HUAWEI_subpass_shading
void VkDecoderSnapshot::vkCmdSubpassShadingHUAWEI(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer)
{
    mImpl->vkCmdSubpassShadingHUAWEI(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer);
}
#endif
#ifdef VK_HUAWEI_invocation_mask
void VkDecoderSnapshot::vkCmdBindInvocationMaskHUAWEI(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkImageView imageView,
    VkImageLayout imageLayout)
{
    mImpl->vkCmdBindInvocationMaskHUAWEI(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, imageView, imageLayout);
}
#endif
#ifdef VK_NV_external_memory_rdma
void VkDecoderSnapshot::vkGetMemoryRemoteAddressNV(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkMemoryGetRemoteAddressInfoNV* pMemoryGetRemoteAddressInfo,
    VkRemoteAddressNV* pAddress)
{
    mImpl->vkGetMemoryRemoteAddressNV(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, pMemoryGetRemoteAddressInfo, pAddress);
}
#endif
#ifdef VK_EXT_extended_dynamic_state2
void VkDecoderSnapshot::vkCmdSetPatchControlPointsEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    uint32_t patchControlPoints)
{
    mImpl->vkCmdSetPatchControlPointsEXT(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, patchControlPoints);
}
#endif
#ifdef VK_EXT_extended_dynamic_state2
void VkDecoderSnapshot::vkCmdSetRasterizerDiscardEnableEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkBool32 rasterizerDiscardEnable)
{
    mImpl->vkCmdSetRasterizerDiscardEnableEXT(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, rasterizerDiscardEnable);
}
#endif
#ifdef VK_EXT_extended_dynamic_state2
void VkDecoderSnapshot::vkCmdSetDepthBiasEnableEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkBool32 depthBiasEnable)
{
    mImpl->vkCmdSetDepthBiasEnableEXT(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, depthBiasEnable);
}
#endif
#ifdef VK_EXT_extended_dynamic_state2
void VkDecoderSnapshot::vkCmdSetLogicOpEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkLogicOp logicOp)
{
    mImpl->vkCmdSetLogicOpEXT(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, logicOp);
}
#endif
#ifdef VK_EXT_extended_dynamic_state2
void VkDecoderSnapshot::vkCmdSetPrimitiveRestartEnableEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkBool32 primitiveRestartEnable)
{
    mImpl->vkCmdSetPrimitiveRestartEnableEXT(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, primitiveRestartEnable);
}
#endif
#ifdef VK_QNX_screen_surface
void VkDecoderSnapshot::vkCreateScreenSurfaceQNX(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkInstance instance,
    const VkScreenSurfaceCreateInfoQNX* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSurfaceKHR* pSurface)
{
    mImpl->vkCreateScreenSurfaceQNX(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, instance, pCreateInfo, pAllocator, pSurface);
}
#endif
#ifdef VK_QNX_screen_surface
void VkDecoderSnapshot::vkGetPhysicalDeviceScreenPresentationSupportQNX(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkBool32 input_result,
    VkPhysicalDevice physicalDevice,
    uint32_t queueFamilyIndex,
    _screen_window* window)
{
    mImpl->vkGetPhysicalDeviceScreenPresentationSupportQNX(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, physicalDevice, queueFamilyIndex, window);
}
#endif
#ifdef VK_EXT_color_write_enable
void VkDecoderSnapshot::vkCmdSetColorWriteEnableEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    uint32_t attachmentCount,
    const VkBool32* pColorWriteEnables)
{
    mImpl->vkCmdSetColorWriteEnableEXT(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, attachmentCount, pColorWriteEnables);
}
#endif
#ifdef VK_GOOGLE_gfxstream
void VkDecoderSnapshot::vkRegisterImageColorBufferGOOGLE(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkImage image,
    uint32_t colorBuffer)
{
    mImpl->vkRegisterImageColorBufferGOOGLE(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, image, colorBuffer);
}
#endif
#ifdef VK_GOOGLE_gfxstream
void VkDecoderSnapshot::vkRegisterBufferColorBufferGOOGLE(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkBuffer buffer,
    uint32_t colorBuffer)
{
    mImpl->vkRegisterBufferColorBufferGOOGLE(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, buffer, colorBuffer);
}
#endif
#ifdef VK_GOOGLE_gfxstream
void VkDecoderSnapshot::vkMapMemoryIntoAddressSpaceGOOGLE(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkDeviceMemory memory,
    uint64_t* pAddress)
{
    mImpl->vkMapMemoryIntoAddressSpaceGOOGLE(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, memory, pAddress);
}
#endif
#ifdef VK_GOOGLE_gfxstream
void VkDecoderSnapshot::vkUpdateDescriptorSetWithTemplateSizedGOOGLE(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkDescriptorSet descriptorSet,
    VkDescriptorUpdateTemplate descriptorUpdateTemplate,
    uint32_t imageInfoCount,
    uint32_t bufferInfoCount,
    uint32_t bufferViewCount,
    const uint32_t* pImageInfoEntryIndices,
    const uint32_t* pBufferInfoEntryIndices,
    const uint32_t* pBufferViewEntryIndices,
    const VkDescriptorImageInfo* pImageInfos,
    const VkDescriptorBufferInfo* pBufferInfos,
    const VkBufferView* pBufferViews)
{
    mImpl->vkUpdateDescriptorSetWithTemplateSizedGOOGLE(snapshotTraceBegin, snapshotTraceBytes, pool, device, descriptorSet, descriptorUpdateTemplate, imageInfoCount, bufferInfoCount, bufferViewCount, pImageInfoEntryIndices, pBufferInfoEntryIndices, pBufferViewEntryIndices, pImageInfos, pBufferInfos, pBufferViews);
}
#endif
#ifdef VK_GOOGLE_gfxstream
void VkDecoderSnapshot::vkBeginCommandBufferAsyncGOOGLE(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    const VkCommandBufferBeginInfo* pBeginInfo)
{
    mImpl->vkBeginCommandBufferAsyncGOOGLE(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, pBeginInfo);
}
#endif
#ifdef VK_GOOGLE_gfxstream
void VkDecoderSnapshot::vkEndCommandBufferAsyncGOOGLE(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer)
{
    mImpl->vkEndCommandBufferAsyncGOOGLE(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer);
}
#endif
#ifdef VK_GOOGLE_gfxstream
void VkDecoderSnapshot::vkResetCommandBufferAsyncGOOGLE(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    VkCommandBufferResetFlags flags)
{
    mImpl->vkResetCommandBufferAsyncGOOGLE(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, flags);
}
#endif
#ifdef VK_GOOGLE_gfxstream
void VkDecoderSnapshot::vkCommandBufferHostSyncGOOGLE(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    uint32_t needHostSync,
    uint32_t sequenceNumber)
{
    mImpl->vkCommandBufferHostSyncGOOGLE(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, needHostSync, sequenceNumber);
}
#endif
#ifdef VK_GOOGLE_gfxstream
void VkDecoderSnapshot::vkCreateImageWithRequirementsGOOGLE(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkImageCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkImage* pImage,
    VkMemoryRequirements* pMemoryRequirements)
{
    mImpl->vkCreateImageWithRequirementsGOOGLE(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, pCreateInfo, pAllocator, pImage, pMemoryRequirements);
}
#endif
#ifdef VK_GOOGLE_gfxstream
void VkDecoderSnapshot::vkCreateBufferWithRequirementsGOOGLE(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkBufferCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkBuffer* pBuffer,
    VkMemoryRequirements* pMemoryRequirements)
{
    mImpl->vkCreateBufferWithRequirementsGOOGLE(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, pCreateInfo, pAllocator, pBuffer, pMemoryRequirements);
}
#endif
#ifdef VK_GOOGLE_gfxstream
void VkDecoderSnapshot::vkGetMemoryHostAddressInfoGOOGLE(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkDeviceMemory memory,
    uint64_t* pAddress,
    uint64_t* pSize,
    uint64_t* pHostmemId)
{
    mImpl->vkGetMemoryHostAddressInfoGOOGLE(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, memory, pAddress, pSize, pHostmemId);
}
#endif
#ifdef VK_GOOGLE_gfxstream
void VkDecoderSnapshot::vkFreeMemorySyncGOOGLE(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkDeviceMemory memory,
    const VkAllocationCallbacks* pAllocator)
{
    mImpl->vkFreeMemorySyncGOOGLE(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, memory, pAllocator);
}
#endif
#ifdef VK_GOOGLE_gfxstream
void VkDecoderSnapshot::vkQueueHostSyncGOOGLE(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkQueue queue,
    uint32_t needHostSync,
    uint32_t sequenceNumber)
{
    mImpl->vkQueueHostSyncGOOGLE(snapshotTraceBegin, snapshotTraceBytes, pool, queue, needHostSync, sequenceNumber);
}
#endif
#ifdef VK_GOOGLE_gfxstream
void VkDecoderSnapshot::vkQueueSubmitAsyncGOOGLE(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkQueue queue,
    uint32_t submitCount,
    const VkSubmitInfo* pSubmits,
    VkFence fence)
{
    mImpl->vkQueueSubmitAsyncGOOGLE(snapshotTraceBegin, snapshotTraceBytes, pool, queue, submitCount, pSubmits, fence);
}
#endif
#ifdef VK_GOOGLE_gfxstream
void VkDecoderSnapshot::vkQueueWaitIdleAsyncGOOGLE(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkQueue queue)
{
    mImpl->vkQueueWaitIdleAsyncGOOGLE(snapshotTraceBegin, snapshotTraceBytes, pool, queue);
}
#endif
#ifdef VK_GOOGLE_gfxstream
void VkDecoderSnapshot::vkQueueBindSparseAsyncGOOGLE(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkQueue queue,
    uint32_t bindInfoCount,
    const VkBindSparseInfo* pBindInfo,
    VkFence fence)
{
    mImpl->vkQueueBindSparseAsyncGOOGLE(snapshotTraceBegin, snapshotTraceBytes, pool, queue, bindInfoCount, pBindInfo, fence);
}
#endif
#ifdef VK_GOOGLE_gfxstream
void VkDecoderSnapshot::vkGetLinearImageLayoutGOOGLE(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkFormat format,
    VkDeviceSize* pOffset,
    VkDeviceSize* pRowPitchAlignment)
{
    mImpl->vkGetLinearImageLayoutGOOGLE(snapshotTraceBegin, snapshotTraceBytes, pool, device, format, pOffset, pRowPitchAlignment);
}
#endif
#ifdef VK_GOOGLE_gfxstream
void VkDecoderSnapshot::vkGetLinearImageLayout2GOOGLE(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    const VkImageCreateInfo* pCreateInfo,
    VkDeviceSize* pOffset,
    VkDeviceSize* pRowPitchAlignment)
{
    mImpl->vkGetLinearImageLayout2GOOGLE(snapshotTraceBegin, snapshotTraceBytes, pool, device, pCreateInfo, pOffset, pRowPitchAlignment);
}
#endif
#ifdef VK_GOOGLE_gfxstream
void VkDecoderSnapshot::vkQueueFlushCommandsGOOGLE(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkQueue queue,
    VkCommandBuffer commandBuffer,
    VkDeviceSize dataSize,
    const void* pData)
{
    mImpl->vkQueueFlushCommandsGOOGLE(snapshotTraceBegin, snapshotTraceBytes, pool, queue, commandBuffer, dataSize, pData);
}
#endif
#ifdef VK_GOOGLE_gfxstream
void VkDecoderSnapshot::vkQueueCommitDescriptorSetUpdatesGOOGLE(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkQueue queue,
    uint32_t descriptorPoolCount,
    const VkDescriptorPool* pDescriptorPools,
    uint32_t descriptorSetCount,
    const VkDescriptorSetLayout* pSetLayouts,
    const uint64_t* pDescriptorSetPoolIds,
    const uint32_t* pDescriptorSetWhichPool,
    const uint32_t* pDescriptorSetPendingAllocation,
    const uint32_t* pDescriptorWriteStartingIndices,
    uint32_t pendingDescriptorWriteCount,
    const VkWriteDescriptorSet* pPendingDescriptorWrites)
{
    mImpl->vkQueueCommitDescriptorSetUpdatesGOOGLE(snapshotTraceBegin, snapshotTraceBytes, pool, queue, descriptorPoolCount, pDescriptorPools, descriptorSetCount, pSetLayouts, pDescriptorSetPoolIds, pDescriptorSetWhichPool, pDescriptorSetPendingAllocation, pDescriptorWriteStartingIndices, pendingDescriptorWriteCount, pPendingDescriptorWrites);
}
#endif
#ifdef VK_GOOGLE_gfxstream
void VkDecoderSnapshot::vkCollectDescriptorPoolIdsGOOGLE(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkDescriptorPool descriptorPool,
    uint32_t* pPoolIdCount,
    uint64_t* pPoolIds)
{
    mImpl->vkCollectDescriptorPoolIdsGOOGLE(snapshotTraceBegin, snapshotTraceBytes, pool, device, descriptorPool, pPoolIdCount, pPoolIds);
}
#endif
#ifdef VK_GOOGLE_gfxstream
void VkDecoderSnapshot::vkQueueSignalReleaseImageANDROIDAsyncGOOGLE(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkQueue queue,
    uint32_t waitSemaphoreCount,
    const VkSemaphore* pWaitSemaphores,
    VkImage image)
{
    mImpl->vkQueueSignalReleaseImageANDROIDAsyncGOOGLE(snapshotTraceBegin, snapshotTraceBytes, pool, queue, waitSemaphoreCount, pWaitSemaphores, image);
}
#endif
#ifdef VK_EXT_multi_draw
void VkDecoderSnapshot::vkCmdDrawMultiEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    uint32_t drawCount,
    const VkMultiDrawInfoEXT* pVertexInfo,
    uint32_t instanceCount,
    uint32_t firstInstance,
    uint32_t stride)
{
    mImpl->vkCmdDrawMultiEXT(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, drawCount, pVertexInfo, instanceCount, firstInstance, stride);
}
#endif
#ifdef VK_EXT_multi_draw
void VkDecoderSnapshot::vkCmdDrawMultiIndexedEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    uint32_t drawCount,
    const VkMultiDrawIndexedInfoEXT* pIndexInfo,
    uint32_t instanceCount,
    uint32_t firstInstance,
    uint32_t stride,
    const int32_t* pVertexOffset)
{
    mImpl->vkCmdDrawMultiIndexedEXT(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, drawCount, pIndexInfo, instanceCount, firstInstance, stride, pVertexOffset);
}
#endif
#ifdef VK_EXT_pageable_device_local_memory
void VkDecoderSnapshot::vkSetDeviceMemoryPriorityEXT(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkDeviceMemory memory,
    float priority)
{
    mImpl->vkSetDeviceMemoryPriorityEXT(snapshotTraceBegin, snapshotTraceBytes, pool, device, memory, priority);
}
#endif
#ifdef VK_KHR_acceleration_structure
void VkDecoderSnapshot::vkCreateAccelerationStructureKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    const VkAccelerationStructureCreateInfoKHR* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkAccelerationStructureKHR* pAccelerationStructure)
{
    mImpl->vkCreateAccelerationStructureKHR(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, pCreateInfo, pAllocator, pAccelerationStructure);
}
#endif
#ifdef VK_KHR_acceleration_structure
void VkDecoderSnapshot::vkDestroyAccelerationStructureKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkAccelerationStructureKHR accelerationStructure,
    const VkAllocationCallbacks* pAllocator)
{
    mImpl->vkDestroyAccelerationStructureKHR(snapshotTraceBegin, snapshotTraceBytes, pool, device, accelerationStructure, pAllocator);
}
#endif
#ifdef VK_KHR_acceleration_structure
void VkDecoderSnapshot::vkCmdBuildAccelerationStructuresKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    uint32_t infoCount,
    const VkAccelerationStructureBuildGeometryInfoKHR* pInfos,
    const VkAccelerationStructureBuildRangeInfoKHR* const* ppBuildRangeInfos)
{
    mImpl->vkCmdBuildAccelerationStructuresKHR(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, infoCount, pInfos, ppBuildRangeInfos);
}
#endif
#ifdef VK_KHR_acceleration_structure
void VkDecoderSnapshot::vkCmdBuildAccelerationStructuresIndirectKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    uint32_t infoCount,
    const VkAccelerationStructureBuildGeometryInfoKHR* pInfos,
    const VkDeviceAddress* pIndirectDeviceAddresses,
    const uint32_t* pIndirectStrides,
    const uint32_t* const* ppMaxPrimitiveCounts)
{
    mImpl->vkCmdBuildAccelerationStructuresIndirectKHR(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, infoCount, pInfos, pIndirectDeviceAddresses, pIndirectStrides, ppMaxPrimitiveCounts);
}
#endif
#ifdef VK_KHR_acceleration_structure
void VkDecoderSnapshot::vkBuildAccelerationStructuresKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkDeferredOperationKHR deferredOperation,
    uint32_t infoCount,
    const VkAccelerationStructureBuildGeometryInfoKHR* pInfos,
    const VkAccelerationStructureBuildRangeInfoKHR* const* ppBuildRangeInfos)
{
    mImpl->vkBuildAccelerationStructuresKHR(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, deferredOperation, infoCount, pInfos, ppBuildRangeInfos);
}
#endif
#ifdef VK_KHR_acceleration_structure
void VkDecoderSnapshot::vkCopyAccelerationStructureKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkDeferredOperationKHR deferredOperation,
    const VkCopyAccelerationStructureInfoKHR* pInfo)
{
    mImpl->vkCopyAccelerationStructureKHR(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, deferredOperation, pInfo);
}
#endif
#ifdef VK_KHR_acceleration_structure
void VkDecoderSnapshot::vkCopyAccelerationStructureToMemoryKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkDeferredOperationKHR deferredOperation,
    const VkCopyAccelerationStructureToMemoryInfoKHR* pInfo)
{
    mImpl->vkCopyAccelerationStructureToMemoryKHR(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, deferredOperation, pInfo);
}
#endif
#ifdef VK_KHR_acceleration_structure
void VkDecoderSnapshot::vkCopyMemoryToAccelerationStructureKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkDeferredOperationKHR deferredOperation,
    const VkCopyMemoryToAccelerationStructureInfoKHR* pInfo)
{
    mImpl->vkCopyMemoryToAccelerationStructureKHR(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, deferredOperation, pInfo);
}
#endif
#ifdef VK_KHR_acceleration_structure
void VkDecoderSnapshot::vkWriteAccelerationStructuresPropertiesKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    uint32_t accelerationStructureCount,
    const VkAccelerationStructureKHR* pAccelerationStructures,
    VkQueryType queryType,
    size_t dataSize,
    void* pData,
    size_t stride)
{
    mImpl->vkWriteAccelerationStructuresPropertiesKHR(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, accelerationStructureCount, pAccelerationStructures, queryType, dataSize, pData, stride);
}
#endif
#ifdef VK_KHR_acceleration_structure
void VkDecoderSnapshot::vkCmdCopyAccelerationStructureKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    const VkCopyAccelerationStructureInfoKHR* pInfo)
{
    mImpl->vkCmdCopyAccelerationStructureKHR(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, pInfo);
}
#endif
#ifdef VK_KHR_acceleration_structure
void VkDecoderSnapshot::vkCmdCopyAccelerationStructureToMemoryKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    const VkCopyAccelerationStructureToMemoryInfoKHR* pInfo)
{
    mImpl->vkCmdCopyAccelerationStructureToMemoryKHR(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, pInfo);
}
#endif
#ifdef VK_KHR_acceleration_structure
void VkDecoderSnapshot::vkCmdCopyMemoryToAccelerationStructureKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    const VkCopyMemoryToAccelerationStructureInfoKHR* pInfo)
{
    mImpl->vkCmdCopyMemoryToAccelerationStructureKHR(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, pInfo);
}
#endif
#ifdef VK_KHR_acceleration_structure
void VkDecoderSnapshot::vkGetAccelerationStructureDeviceAddressKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDeviceAddress input_result,
    VkDevice device,
    const VkAccelerationStructureDeviceAddressInfoKHR* pInfo)
{
    mImpl->vkGetAccelerationStructureDeviceAddressKHR(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, pInfo);
}
#endif
#ifdef VK_KHR_acceleration_structure
void VkDecoderSnapshot::vkCmdWriteAccelerationStructuresPropertiesKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    uint32_t accelerationStructureCount,
    const VkAccelerationStructureKHR* pAccelerationStructures,
    VkQueryType queryType,
    VkQueryPool queryPool,
    uint32_t firstQuery)
{
    mImpl->vkCmdWriteAccelerationStructuresPropertiesKHR(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, accelerationStructureCount, pAccelerationStructures, queryType, queryPool, firstQuery);
}
#endif
#ifdef VK_KHR_acceleration_structure
void VkDecoderSnapshot::vkGetDeviceAccelerationStructureCompatibilityKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    const VkAccelerationStructureVersionInfoKHR* pVersionInfo,
    VkAccelerationStructureCompatibilityKHR* pCompatibility)
{
    mImpl->vkGetDeviceAccelerationStructureCompatibilityKHR(snapshotTraceBegin, snapshotTraceBytes, pool, device, pVersionInfo, pCompatibility);
}
#endif
#ifdef VK_KHR_acceleration_structure
void VkDecoderSnapshot::vkGetAccelerationStructureBuildSizesKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDevice device,
    VkAccelerationStructureBuildTypeKHR buildType,
    const VkAccelerationStructureBuildGeometryInfoKHR* pBuildInfo,
    const uint32_t* pMaxPrimitiveCounts,
    VkAccelerationStructureBuildSizesInfoKHR* pSizeInfo)
{
    mImpl->vkGetAccelerationStructureBuildSizesKHR(snapshotTraceBegin, snapshotTraceBytes, pool, device, buildType, pBuildInfo, pMaxPrimitiveCounts, pSizeInfo);
}
#endif
#ifdef VK_KHR_ray_tracing_pipeline
void VkDecoderSnapshot::vkCmdTraceRaysKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    const VkStridedDeviceAddressRegionKHR* pRaygenShaderBindingTable,
    const VkStridedDeviceAddressRegionKHR* pMissShaderBindingTable,
    const VkStridedDeviceAddressRegionKHR* pHitShaderBindingTable,
    const VkStridedDeviceAddressRegionKHR* pCallableShaderBindingTable,
    uint32_t width,
    uint32_t height,
    uint32_t depth)
{
    mImpl->vkCmdTraceRaysKHR(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, pRaygenShaderBindingTable, pMissShaderBindingTable, pHitShaderBindingTable, pCallableShaderBindingTable, width, height, depth);
}
#endif
#ifdef VK_KHR_ray_tracing_pipeline
void VkDecoderSnapshot::vkCreateRayTracingPipelinesKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkDeferredOperationKHR deferredOperation,
    VkPipelineCache pipelineCache,
    uint32_t createInfoCount,
    const VkRayTracingPipelineCreateInfoKHR* pCreateInfos,
    const VkAllocationCallbacks* pAllocator,
    VkPipeline* pPipelines)
{
    mImpl->vkCreateRayTracingPipelinesKHR(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, deferredOperation, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);
}
#endif
#ifdef VK_KHR_ray_tracing_pipeline
void VkDecoderSnapshot::vkGetRayTracingCaptureReplayShaderGroupHandlesKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkResult input_result,
    VkDevice device,
    VkPipeline pipeline,
    uint32_t firstGroup,
    uint32_t groupCount,
    size_t dataSize,
    void* pData)
{
    mImpl->vkGetRayTracingCaptureReplayShaderGroupHandlesKHR(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, pipeline, firstGroup, groupCount, dataSize, pData);
}
#endif
#ifdef VK_KHR_ray_tracing_pipeline
void VkDecoderSnapshot::vkCmdTraceRaysIndirectKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    const VkStridedDeviceAddressRegionKHR* pRaygenShaderBindingTable,
    const VkStridedDeviceAddressRegionKHR* pMissShaderBindingTable,
    const VkStridedDeviceAddressRegionKHR* pHitShaderBindingTable,
    const VkStridedDeviceAddressRegionKHR* pCallableShaderBindingTable,
    VkDeviceAddress indirectDeviceAddress)
{
    mImpl->vkCmdTraceRaysIndirectKHR(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, pRaygenShaderBindingTable, pMissShaderBindingTable, pHitShaderBindingTable, pCallableShaderBindingTable, indirectDeviceAddress);
}
#endif
#ifdef VK_KHR_ray_tracing_pipeline
void VkDecoderSnapshot::vkGetRayTracingShaderGroupStackSizeKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkDeviceSize input_result,
    VkDevice device,
    VkPipeline pipeline,
    uint32_t group,
    VkShaderGroupShaderKHR groupShader)
{
    mImpl->vkGetRayTracingShaderGroupStackSizeKHR(snapshotTraceBegin, snapshotTraceBytes, pool, input_result, device, pipeline, group, groupShader);
}
#endif
#ifdef VK_KHR_ray_tracing_pipeline
void VkDecoderSnapshot::vkCmdSetRayTracingPipelineStackSizeKHR(
    const uint8_t* snapshotTraceBegin,
    size_t snapshotTraceBytes,
    android::base::BumpPool* pool,
    VkCommandBuffer commandBuffer,
    uint32_t pipelineStackSize)
{
    mImpl->vkCmdSetRayTracingPipelineStackSizeKHR(snapshotTraceBegin, snapshotTraceBytes, pool, commandBuffer, pipelineStackSize);
}
#endif


