// Copyright (C) 2022 The Android Open Source Project
//
// Licensed under the Apache License= ; Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing= ; software
// distributed under the License is distributed on an "AS IS" BASIS= ;
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND= ; either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Note that if you add/remove methods in this file you must update
// the metrics sql as well ./android/scripts/gen-grpc-sql.py
//
// Please group deleted methods in a block including the date (MM/DD/YY)
// it was removed. This enables us to easily keep metrics around after removal
//
// List of deleted methods
// rpc iWasDeleted (03/12/12)
// ...
syntax = "proto3";

option java_multiple_files = true;
option java_package = "com.android.emulation.control.incubating";

package android.emulation.control.incubating;
import "google/protobuf/empty.proto";

// The AvdService can be used to inspect and retrieve general
// information about the running avd
service AvdService {
    // Get general information about the running avd.
    rpc getAvdInfo(google.protobuf.Empty) returns (AvdInfo);
}

enum AvdFlavor {
    AVD_FLAVOR_UNSPECIFIED = 0;
    AVD_FLAVOR_PHONE = 1;
    AVD_FLAVOR_TV = 2;
    AVD_FLAVOR_WEAR = 3;
    AVD_FLAVOR_ANDROID_AUTO = 4;
    AVD_FLAVOR_DESKTOP = 5;
    AVD_FLAVOR_OTHER = 255;
}

enum ImageState {
    IMAGE_STATE_UNSPECIFIED = 0;
    IMAGE_STATE_READONLY = 1;     /* unlocked */
    IMAGE_STATE_MUSTLOCK = 2;     /* must be locked */
    IMAGE_STATE_LOCKED = 3;       /* locked */
    IMAGE_STATE_LOCKED_EMPTY = 4; /* locked and empty */
    IMAGE_STATE_TEMPORARY = 5;    /* copied to temp file (no lock needed) */
}

message AvdInfo {
    // for the Android build system case
    bool in_android_build = 1;
    string android_out = 2;
    string android_build_root = 3;
    string target_arch = 4;
    string target_abi = 5;
    string acpi_ini_path = 6;
    string target = 7;  // The target string in rootIni.

    // for the normal virtual device case
    string device_name = 8;
    string device_id = 9;
    string sdk_root_path = 10;
    repeated string search_paths = 11;
    string content_path = 12;

    // These two might not be needed.
    string root_ini_path = 13;          // UNUSED?
    map<string, string> root_ini = 14;  // UNUSED?

    // virtual device's config.ini, NULL if missing
    map<string, string> config_ini = 15;
    map<string, string> skin_hardware_ini = 16;  // skin-specific hardware.ini

    // for both
    int32 api_level = 17;
    int32 incremental_version = 18;

    // For preview releases where we don't know the exact API level this flag
    // indicates that at least we know it's M+ (for some code that needs to
    // select either legacy or modern operation mode.
    bool is_marshmallow_or_higher = 19;
    bool is_google_apis = 20;
    bool is_user_build = 21;
    bool is_atd = 22;
    AvdFlavor flavor = 23;
    string skin_name = 24;               // skin name
    string skin_dir_path = 25;           // skin directory
    string core_hardware_ini_path = 26;  // core hardware.ini path
    string snapshot_lock_path = 27;      // core snapshot.lock path
    string multi_instance_lock_path = 28;

    string build_properties = 29;  // build.prop file
    string boot_properties = 30;   // boot.prop file

    // image files
    repeated string image_paths = 31;
    repeated ImageState image_states = 32;

    // skip checks
    bool no_checks = 33;
    string sysdir = 34;
}