// Copyright (C) 2022 The Android Open Source Project
//
// Licensed under the Apache License= ; Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing= ; software
// distributed under the License is distributed on an "AS IS" BASIS= ;
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND= ; either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Note that if you add/remove methods in this file you must update
// the metrics sql as well ./android/scripts/gen-grpc-sql.py
//
// Please group deleted methods in a block including the date (MM/DD/YY)
// it was removed. This enables us to easily keep metrics around after removal
//
// List of deleted methods
// rpc iWasDeleted (03/12/12)
// ...
syntax = "proto3";

option java_multiple_files = true;
option java_package = "com.android.emulation.control.incubating";

package android.emulation.control.incubating;
import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";

service ScreenRecording {
    rpc StartRecording(RecordingInfo) returns (RecordingInfo);

    rpc StopRecording(RecordingInfo) returns (RecordingInfo);

    rpc ListRecordings(RecordingInfo) returns (RecordingInfoList);

    rpc ReceiveRecordingEvents(google.protobuf.Empty) returns (stream RecordingInfo);
};


message RecordingInfo {
    enum RecorderState {
        RECORDER_STATE_UNKOWN = 0;
        RECORDER_STATE_STARTING = 1;
        RECORDER_STATE_START_FAILED = 2;
        RECORDER_STATE_RECORDING = 4;
        RECORDER_STATE_STOPPING = 5;
        RECORDER_STATE_STOPPED = 6;
        RECORDER_STOP_FAILED = 7;
    };

    // The current state of the recorder
    RecorderState state = 1;

    // The file_name where the recording should be written to
    // Note: This currently needs to have the .webm extension
    string file_name = 2;

    // Width of the recording, or default if not present
    uint32 width = 3;

    // Height of the recording, or default if not present
    uint32 height = 4;

    // Bit rate of the recording in bits per second, or default if not present.
    // The bit rate should be between 100,000 - 25,000,000
    uint32 bit_rate = 5;

    // The time limit in seconds. Defaults to 180 seconds.
    uint32 time_limit = 6;

    // The desired frame rate. Defaults to 24.
    uint32 fps = 7;

    // The (desired) display id of the device. Setting this to 0 (or omitting)
    // indicates the main display.
    uint32 display = 8;
}

message RecordingInfoList {
    repeated RecordingInfo recordings = 1;
}