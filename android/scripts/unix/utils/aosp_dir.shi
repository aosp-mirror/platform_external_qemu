# Copyright 2015 The Android Open Source Project
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Functions used to auto-detect and manage the AOSP prebuilts directories
# for other scripts.
#
# Usage:
#
#  1) Call |aosp_dir_register_option| before calling |option_parse| to
#     add the --aosp-dir=<path> option to the current script's command-line.
#
#  2) Call |aosp_dir_parse_option| after calling |option_parse| in order to
#     parse and validate the option or the environment.
#
#     On success, this defines AOSP_DIR and AOSP_PREBUILTS_GCC_DIR

shell_import utils/option_parser.shi
OPT_AOSP_CLANG_VERSION=clang-r450784e

aosp_dir_register_option () {

    OPT_AOSP_DIR=
    option_register_var "--aosp-dir=<dir>" OPT_AOSP_DIR \
            "Specify AOSP root directory. [autodetect]"
}

aosp_register_clang_option() {
    option_register_var "--aosp-clang_ver=<clang_version_dir>" OPT_AOSP_CLANG_VERSION \
           "Clang compiler to use from AOSP_DIR/prebuilts/clang/host/$(get_build_os)-x86/$CLANG_VERSION_DIR"
}


aosp_dir_parse_option () {
    if [ "$OPT_AOSP_DIR" ]; then
        if [ ! -d "$OPT_AOSP_DIR" ]; then
            panic "Not a directory: $OPT_AOSP_DIR"
        fi
        AOSP_DIR=$OPT_AOSP_DIR
        log "Using AOSP dir: $AOSP_DIR"
    elif [ "$ANDROID_EMULATOR_AOSP_DIR" ]; then
        AOSP_DIR=$ANDROID_EMULATOR_AOSP_DIR
        log "Auto-config: --aosp-dir=$AOSP_DIR  [environment]"
    else
        # Assume that the current script is under external/qemu/android/scripts
        local PROBE_DIR="$(program_directory)/.."
        while [ "$PROBE_DIR" != "/" ]; do
            PROBE_DIR=$(cd "$PROBE_DIR" 2>/dev/null && pwd -P || true)
            if [ -z "$PROBE_DIR" -o "$PROBE_DIR" = "/" ]; then
                dump "Please define ANDROID_EMULATOR_AOSP_DIR in your environment,"
                dump "or use --aosp-dir=<path> on the command-line to specify the"
                dump "root of a valid AOSP source tree."
                panic "Can't find AOSP root."
            fi
            if [ -d "$PROBE_DIR/prebuilts" ]; then
                AOSP_DIR=$PROBE_DIR
                break
            fi
            PROBE_DIR=$PROBE_DIR/..
        done
        log "Auto-config: --aosp-dir=$AOSP_DIR  [auto-detect]"
    fi

    AOSP_DIR=$(cd "$AOSP_DIR" && pwd -P 2>/dev/null)
    AOSP_PREBUILTS_CLANG_DIR=$AOSP_DIR/prebuilts/clang
    if [ ! -d "$AOSP_PREBUILTS_CLANG_DIR" ]; then
        panic "Not a valid AOSP tree: missing directory: $AOSP_PREBUILTS_CLANG_DIR"
    fi
}

# Returns the linux glibc version
aosp_linux_glibc_version () {
   printf "glibc2.17-4.8"
}


# Returns the version of Clang to use.
aosp_clang_version () {
  printf "${OPT_AOSP_CLANG_VERSION}" # Make sure that libc++ links against glibc2.15 or lower
}

# Returns the version of the Windows SDK we are using
aosp_winsdk_version () {
  printf "10.0.16299.0"
}

aosp_clang_libcplusplus () {
    local CLANG_BINDIR=$AOSP_DIR/$(aosp_prebuilt_clang_dir_for linux)
    local CLANG_DIR=$(realpath $CLANG_BINDIR/..)
    printf "%s" "$CLANG_DIR/lib64/libc++.so"
}

# Returns the directory where we can find the clang compiler.
aosp_prebuilt_clang_dir_for () {
    case $1 in
        linux*)
            local CLANG_VERSION="$(aosp_clang_version)"
            printf "prebuilts/clang/host/linux-x86/$CLANG_VERSION/bin"
            ;;
        linux-aarch64)
            echo "No clang support for linux-aarch64 yet"
            exit 1
            ;;
        darwin*)
            local CLANG_VERSION="$(aosp_clang_version)"
            printf "prebuilts/clang/host/darwin-x86/$CLANG_VERSION/bin"
            ;;
        windows*)
            echo "No clang support for windows yet"
            exit 1;
            ;;
    esac

}

# Return the AOSP subdirectory that contains the prebuilt toolchain to be
# used for a given host system.
# $1: System name (e.g. 'linux' or 'linux-x86_64')
aosp_prebuilt_toolchain_subdir_for () {
    case $1 in
        linux-x86_64)
            local GLIBC="$(aosp_linux_glibc_version)"
            printf "prebuilts/gcc/linux-x86/host/x86_64-linux-$GLIBC"
            ;;
        linux-aarch64)
            # we use native toolchain for linux-aarch64
            printf ""
            ;;
        darwin*)
            local CLANG_VERSION="$(aosp_clang_version)"
            printf "prebuilts/clang/host/darwin-x86/$CLANG_VERSION"
            ;;
    esac
}

# Return the subdirectory that contains the breakpad prebuilts to be
# used for a given host system.
# $1: System name (e.g. 'linux-x86' or 'linux-x86_64')
aosp_prebuilt_breakpad_subdir_for () {
    printf "prebuilts/android-emulator-build/common/breakpad/$1"
}

# Return the AOSP subdirectory corresponding to the toolchain's sysroot.
# $1: System name (e.g. 'linux-x86' or 'linux-x86_64')
aosp_prebuilt_toolchain_sysroot_subdir_for () {
    case $1 in
        linux-x86_64)
            local GLIBC="$(aosp_linux_glibc_version)"
            printf "prebuilts/gcc/linux-x86/host/x86_64-linux-$GLIBC/x86_64-linux"
            ;;
        linux-aarch64)
            # we use native toolchain for linux-aarch64
            printf ""
            ;;
        darwin*)
            # We use the developer machine's system SDK.
            printf ""
            ;;
    esac
}

aosp_prebuilt_toolchain_prefix_for () {
    case $1 in
        linux-x86_64)
            printf "x86_64-linux-"
            ;;
        linux-aarch64)
            # we use native toolchain for linux-aarch64
            printf ""
            ;;
        darwin*)
            printf ""
            ;;
    esac
}


aosp_depot_tools_dir () {
    echo ${AOSP_DIR}/external/qemu/android/third_party/chromium/depot_tools
}

aosp_msvc_hash () {
  # This is the hash of the msvc version we are using (VS 2019)
  echo "20d5f2553f"
}

# Find the AOSP top-level directory, starting from a given sub-directory.
# $1: Starting directory, must be a sub-directory of the AOSP checkout.
# Out: AOSP directory path on success, empty string on failure.
aosp_find_top_dir_from () {
    local PROBE_DIR
    PROBE_DIR=$1
    while true; do
        if [ -z "$PROBE_DIR" -o "$PROBE_DIR" = "/" -o ! -d "$PROBE_DIR" ]; then
            # Could not find anything, weird.
            return
        fi
        # Use prebuilts/clang, as the test sub-directory, given that
        # it should be part of all interesting AOSP checkouts (platform and
        # SDK ones).
        if [ -d "$PROBE_DIR"/prebuilts/clang ]; then
            printf "%s" "$PROBE_DIR"
            return
        fi
        PROBE_DIR=$(cd "$PROBE_DIR"/.. && pwd -P || true)
    done
}
