# -*- coding: utf-8 -*-
# Copyright 2023 - The Android Open Source Project
#
# Licensed under the Apache License, Version 2.0 (the',  help='License');
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an',  help='AS IS' BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
import json
import logging
from pathlib import Path
from typing import Dict
import subprocess

from toolchain_generator import ToolchainGenerator


class PkgConfigFromBazel(ToolchainGenerator):
    """Can be used to create a 'fake" pkgconfig file based on bazel build package.

    This allows you to create a set of pc files that can be consumed by other build
    system.

    This is mainly needed to make sure the meson configure script will discover
    our internal generated dependencies.
    """

    AOSP_ROOT = Path(__file__).resolve().parents[6]

    def __init__(self, dest) -> None:
        super().__init__(dest, "")

    def get_archive(self, bazel_target: str) -> Path:
        archives = subprocess.check_output(
            [
                self.bazel.exe,
                "cquery",
                "--output=starlark",
                "--starlark:expr='\\n'.join([f.path for f in target.files.to_list()])",
                bazel_target,
            ],
            text=True,
        ).splitlines()

        archives = [
            x.strip().replace("bazel-out", self.bazel.bazel_out)
            for x in archives
            if x.endswith(".a")
        ]
        return Path(archives[0])

    def get_includes(self, bazel_target: str, shim: Dict[str, str], libdir: str):
        query_script = self.AOSP_ROOT / "build" / "bazel" / "utils" / "cmake.cquery.bzl"
        starlark = self.run(
            [
                self.bazel.exe,
                "cquery",
                "-c",
                "opt",
                bazel_target,
                f"--starlark:file={query_script}",
                "--output=starlark",
            ],
            cwd=self.AOSP_ROOT,
        )
        info = json.loads(starlark)
        includes = (
            (info.get("includes") + ";" + shim.get("includes", ""))
            .replace("${output_base}", self.bazel.output_base)
            .replace("${workspace}", self.bazel.workspace)
            .replace("${libdir}", libdir)
        )
        return includes

    def gen_pkg_config(self, bazel_target: str, version: str, shim: Dict[str, str]):
        self.build_target(bazel_target)
        archive = self.get_archive(bazel_target)
        libdir = str(archive.parent)
        includes = self.get_includes(bazel_target, shim, libdir)
        includes = [str(Path(x).absolute()) for x in includes.split(";")]
        pkglib_name = bazel_target[bazel_target.rfind(":") + 1 :]
        self.write_pc_static_file(pkglib_name, archive, includes, version, shim)

    def _gen_pc_contents(
        self,
        pkglib_name: str,
        archive: Path,
        includes: [str],
        version: str,
        shim: Dict[str, str],
    ):
        me = Path(__file__).resolve()
        cflags = "-I" + " -I".join(includes)
        libdir = archive.parent
        lib = archive.with_suffix("").name.replace("lib", "", 1)
        pkgconfig = f"""prefix=/usr/local
includedir={includes[0]}
libdir={libdir}

Name: {pkglib_name}
Description: Auto generated by {me}, DO NOT EDIT
Version: {version}

Requires: {shim.get('Requires', '')}
Cflags: {cflags}
#Libs: -L{libdir} -l{lib}
Libs: {archive}
"""
        return pkgconfig

    def write_pc_static_file(
        self,
        pkglib_name: str,
        archive: Path,
        includes: [Path],
        version: str,
        shim: Dict[str, str],
    ):
        contents = self._gen_pc_contents(pkglib_name, archive, includes, version, shim)
        location = self.dest / "pkgconfig"
        location.mkdir(exist_ok=True)
        location = location / f"{pkglib_name}.pc"
        logging.info("Generating %s", location)

        with open(location, "w", encoding="utf-8") as f:
            f.write(contents)
