{
  "bazel_prefix": "cc_library(name='libqemuutilstubs',srcs=['stubs/error-printf.c','stubs/is-daemonized.c','stubs/monitor-core.c',],hdrs=['config-poison.h','include/block/aio.h','include/block/aio-wait.h','include/block/block.h','include/block/block-common.h','include/block/block-global-state.h','include/block/block-io.h','include/block/blockjob.h','include/block/graph-lock.h','include/exec/hwaddr.h','include/exec/poison.h','include/glib-compat.h','include/hw/hotplug.h','include/hw/qdev-core.h','include/hw/resettable.h','include/monitor/monitor.h','include/qapi/util.h','include/qemu/atomic.h','include/qemu/bitmap.h','include/qemu/bitops.h','include/qemu/bswap.h','include/qemu/clang-tsa.h','include/qemu/compiler.h','include/qemu/coroutine.h','include/qemu/coroutine-core.h','include/qemu/coroutine-tls.h','include/qemu/error-report.h','include/qemu/event_notifier.h','include/qemu/host-utils.h','include/qemu/int128.h','include/qemu/iov.h','include/qemu/job.h','include/qemu/lockable.h','include/qemu/main-loop.h','include/qemu/module.h','include/qemu/notify.h','include/qemu/osdep.h','include/qemu/processor.h','include/qemu/progress_meter.h','include/qemu/qsp.h','include/qemu/queue.h','include/qemu/ratelimit.h','include/qemu/rcu.h','include/qemu/rcu_queue.h','include/qemu/readline.h','include/qemu/sys_membarrier.h','include/qemu/thread.h','include/qemu/thread-posix.h','include/qemu/timer.h','include/qemu/transactions.h','include/qemu/typedefs.h','include/qom/object.h','include/sysemu/event-loop-base.h','include/sysemu/os-posix.h','platform/darwin-arm64/config-host.h','qapi/qapi-builtin-types.h','qapi/qapi-commands-block.h','qapi/qapi-commands-block-core.h','qapi/qapi-commands-common.h','qapi/qapi-commands-crypto.h','qapi/qapi-commands-job.h','qapi/qapi-commands-machine.h','qapi/qapi-commands-machine-common.h','qapi/qapi-commands-misc.h','qapi/qapi-commands-run-state.h','qapi/qapi-commands-sockets.h','qapi/qapi-emit-events.h','qapi/qapi-types-audio.h','qapi/qapi-types-block.h','qapi/qapi-types-block-core.h','qapi/qapi-types-common.h','qapi/qapi-types-crypto.h','qapi/qapi-types-error.h','qapi/qapi-types-job.h','qapi/qapi-types-machine.h','qapi/qapi-types-machine-common.h','qapi/qapi-types-misc.h','qapi/qapi-types-net.h','qapi/qapi-types-run-state.h','qapi/qapi-types-sockets.h','qapi/qapi-types-ui.h',],copts=['-fwrapv', '-Wno-implicit-function-declaration',],defines=['_GNU_SOURCE','_FILE_OFFSET_BITS=64','_LARGEFILE_SOURCE',],includes=['.','host/include/aarch64','include','platform/darwin-arm64','qapi','trace',],visibility=['//visibility:public'],deps=['@glib//:glib-static','@glib//:gmodule-static','@pixman//:pixman-1','@pixman//:pixman_simd','@zlib',],)",
  // These are shims we should apply to the various targets
  "shims": [
    {
      "target": "generate_shared_QAPI_source_files",
      "shims": {
        "cmd": "$(location :qapi-gen) -o $(RULEDIR)/qapi -b $(location qapi/qapi-schema.json)",
        "cmd_bat": "$(location :qapi-gen) -o $(RULEDIR)/qapi -b $(location qapi/qapi-schema.json)"
      }
    },
    {
      "target": "generate_config-poison_h",
      "shims": {
        // TODO: It would be nice if we could generalize this in the generator
        "cmd": "$(location :make-config-poison) $(SRCS) > $(location config-poison.h)",
        "cmd_bat": "$(location :make-config-poison) $(SRCS) > $(location config-poison.h)"
      }
    },
    {
      "target": "keymap-gen",
      "shims": {
        "srcs": [
          "subprojects/keycodemapdb/tools/keymap-gen.py"
        ]
      }
    },
    // Rename the macos targets. Note these do not have
    // any entitlements set.
    {
      "target": "qemu-system-aarch64-unsigned",
      "shims": {
        "name": "qemu-system-aarch64",
        "_bzl_type": "cc_interface_binary",
        "-deps": [
          "libmodinfo-aarch64-softmmu_c"
        ],
        "+deps": [
          "libqemu-aarch64-softmmu",
          "//hardware/generic/goldfish/emulator/plugin:registration"
        ],
        "visibility": [
          "//visibility:public"
        ]
      }
    },
    {
      "target": "qemu-system-riscv64-unsigned",
      "shims": {
        "name": "qemu-system-riscv64",
        "_bzl_type": "cc_interface_binary",
        "-deps": [
          "libmodinfo-riscv64-softmmu_c"
        ],
        // TODO: Figure out why these are not
        // derived.
        "+deps": [
          "libqemu-riscv64-softmmu",
          "//hardware/generic/goldfish/emulator/plugin:registration"
        ],
        "visibility": [
          "//visibility:public"
        ]
      }
    },
    {
      "target": "qemu-system-x86_64-unsigned",
      "shims": {
        "name": "qemu-system-x86_64",
        "_bzl_type": "cc_interface_binary",
        "-deps": [
          "libmodinfo-x86_64-softmmu_c"
        ],
        "+deps": [
          "libqemu-x86_64-softmmu",
          "//hardware/generic/goldfish/emulator/plugin:registration"
        ],
        "visibility": [
          "//visibility:public"
        ]
      }
    },
    {
      "target": "qemu-img",
      "shims": {
        "+deps": [
          "libqemuutilstubs"
        ]
      }
    },
    {
      "target": ".*",
      "shims": {
        "restrict_to": "cc_shared_library",
        // xs4all!
        "visibility": [
          "//visibility:public"
        ]
      }
    },
    {
      "target": ".*",
      "shims": {
        "restrict_to": "cc_library|cc_binary",
        // xs4all!
        "visibility": [
          "//visibility:public"
        ],
        "-srcs": [
          // TODO: Another qemu stub linker order issue. This should likely be
          // addressed in the meson build.
          "stubs/blk-exp-close-all.c",
          "stubs/blk-commit-all.c",
          "stubs/monitor-core.c",
          "stubs/error-printf.c"
        ],
        // Remove our compat libs if present
        "-hdrs": [
          ".*subprojects.*"
        ],
        "+copts": [
          "-fwrapv",
          "-Wno-implicit-function-declaration"
        ],
        // Not yet clear how to handle object includes,
        // so let's strip them.
        "-deps": [
          "libcommon_.*",
          "libmodule-common",
          // We will bring our own version of libmodinfo, so strip it!
          "libmodinfo-.*"
        ]
      }
    },
    {
      "target": "libqemu-.*-softmmu|libqemu-.*-softmmu_common|libcommon",
      // TODO: Figure out why we are not setting
      // this to alwayslink..
      "shims": {
        "restrict_to": "cc_library",
        "alwayslink": 1
      }
    }
    // Sample shim that show cases how you can
    // add and remove dependencies to all cc_ like
    // rules.
    // {
    //     "target" : ".*",
    //     "shims" :{
    //    Use restrict_to to limit this shim to rules
    //    of the given type. For example cc_library, cc_binary
    //         "restrict_to" : "cc_.*",
    //    Add the following to the "deps" set
    //         "+deps": "to_be_added",
    //    remove this from the "deps" set
    //         "-deps": "block"
    //    replace the "deps" completely:
    //        "deps": ["a", "b"]
    //     }
    // }
  ],
  // These are the bazel mappings we are going to use for
  // external dependencies. For every pkg config dependency
  // you will need to provide a bazel target
  "external_deps": {
    "glib-2.0": [
      "@glib//:glib-static"
    ],
    "gmodule-export-2.0": [
      "@glib//:gmodule-static"
    ],
    "zlib": [
      "@zlib//:zlib"
    ],
    "pixman-1": [
      "@pixman//:pixman-1",
      "@pixman//:pixman_simd"
    ],
    "libfdt": [
      "//external/dtc:libfdt"
    ],
    "rutabaga_gfx_ffi": [
      "//external/crosvm/rutabaga_gfx/ffi:c_ffi"
    ]
  },
  // The actual set of targets you wish to generate bazel targets for.
  // These are the targets that will be exported.
  "export": [
    "qemu-system-x86_64-unsigned",
    "qemu-system-aarch64-unsigned",
    "qemu-system-riscv64-unsigned",
    "qemu-img",
    // Note that our modules need to be explicitly exported, as they
    // are not actual dependencies
    "hw-display-virtio-gpu",
    "hw-display-virtio-vga",
    "hw-display-virtio-vga-gl",
    "hw-display-virtio-gpu-pci",
    "hw-display-virtio-gpu-rutabaga",
    "hw-display-virtio-gpu-pci-rutabaga"
  ],
  "exclude": [
    "vhost-user",
    "vhost-user-glib",
    // We will provide our own module info that will be build into qemu
    // This will allow us to provide our own custom drivers.
    "modinfo-*"
  ]
}