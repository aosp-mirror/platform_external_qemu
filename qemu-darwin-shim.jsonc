{
    // These are shims we should apply to the various targets
    "shims": [
        {
            "target": "generate_shared_QAPI_source_files",
            "shims": {
                "cmd": "$(location :qapi-gen) -o $(RULEDIR)/qapi -b $(location qapi/qapi-schema.json)",
                "cmd_bat": "$(location :qapi-gen) -o $(RULEDIR)/qapi -b $(location qapi/qapi-schema.json)"
            }
        },
        {
            "target": "generate_config-poison_h",
            "shims": {
                // TODO: It would be nice if we could generalize this in the generator
                "cmd": "$(location :make-config-poison) $(SRCS) > $(location config-poison.h)",
                "cmd_bat": "$(location :make-config-poison) $(SRCS) > $(location config-poison.h)"
            }
        },
        {
            "target": "keymap-gen",
            "shims": {
                "srcs": [
                    "subprojects/keycodemapdb/tools/keymap-gen.py"
                ]
            }
        },
        // Rename the macos targets. Note these do not have
        // any entitlements set.
        {
            "target": "qemu-system-riscv64-unsigned",
            "shims": {
                "name": "qemu-system-riscv64",
                "-deps": [
                    "libmodinfo-riscv64-softmmu_c"
                ],
                // TODO: Figure out why these are not
                // derived.
                "+deps": [
                    "libqemu-riscv64-softmmu",
                    "//hardware/generic/goldfish/emulator/plugin:registration"
                ]
            }
        },
        {
            "target": "qemu-system-aarch64-unsigned",
            "shims": {
                "name": "qemu-system-aarch64",
                "-deps": [
                    "libmodinfo-aarch64-softmmu_c"
                ],
                "+deps": [
                    "libqemu-aarch64-softmmu",
                    "//hardware/generic/goldfish/emulator/plugin:registration"
                ]
            }
        },
        {
            "target": "qemu-system-x86_64-unsigned",
            "shims": {
                "name": "qemu-system-x86_64",
                "-deps": [
                    "libmodinfo-x86_64-softmmu_c"
                ],
                "+deps": [
                    "libqemu-x86_64-softmmu",
                    "//hardware/generic/goldfish/emulator/plugin:registration"
                ]
            }
        },
        {
            "target": ".*",
            "shims": {
                "restrict_to": "cc_shared_library",
                // xs4all!
                "visibility": [
                    "//visibility:public"
                ]
            }
        },
        {
            "target": ".*",
            "shims": {
                "restrict_to": "cc_library|cc_binary",
                // xs4all!
                "visibility": [
                    "//visibility:public"
                ],
                "-srcs": [
                    "google.*",
                    // TODO: Another qemu stub linker order issue. This should likely be
                    // addressed in the meson build.
                    "stubs/blk-exp-close-all.c",
                    "stubs/blk-commit-all.c",
                    "stubs/monitor-core.c",
                    "stubs/error-printf.c"
                ],
                // Remove our compat libs if present
                "-hdrs": [
                    "google.*",
                    ".*subprojects.*"
                ],
                "+copts": [
                    "-Wno-implicit-function-declaration"
                ],
                // Not yet clear how to handle object includes,
                // so let's strip them.
                "-deps": [
                    "libcommon_.*",
                    "libmodule-common",
                    // We will bring our own version of libmodinfo, so strip it!
                    "libmodinfo-.*"
                ]
            }
        },
        {
            "target": "libqemu-.*-softmmu|libqemu-.*-softmmu_common|libcommon",
            // TODO: Figure out why we are not setting
            // this to alwayslink..
            "shims": {
                "restrict_to": "cc_library",
                "alwayslink": 1
            }
        }
        // Sample shim that show cases how you can
        // add and remove dependencies to all cc_ like
        // rules.
        // {
        //     "target" : ".*",
        //     "shims" :{
        //    Use restrict_to to limit this shim to rules
        //    of the given type. For example cc_library, cc_binary
        //         "restrict_to" : "cc_.*",
        //    Add the following to the "deps" set
        //         "+deps": "to_be_added",
        //    remove this from the "deps" set
        //         "-deps": "block"
        //    replace the "deps" completely:
        //        "deps": ["a", "b"]
        //     }
        // }
    ],
    // These are the bazel mappings we are going to use for
    // external dependencies. For every pkg config dependency
    // you will need to provide a bazel target
    "external_deps": {
        "glib-2.0": [
            "@glib//:glib-static"
        ],
        "gmodule-export-2.0": [
            "@glib//:gmodule-static"
        ],
        "zlib": [
            "@zlib//:zlib"
        ],
        "pixman-1": [
            "@pixman//:pixman-1",
            "@pixman//:pixman_simd"
        ],
        "libfdt": [
            "//external/dtc:libfdt"
        ],
        "rutabaga_gfx_ffi": []
    },
    // The actual set of targets you wish to generate bazel targets for.
    // These are the targets that will be exported.
    "export": [
        "qemu-system-x86_64-unsigned",
        "qemu-system-aarch64-unsigned",
        "qemu-system-riscv64-unsigned",
        "qemu-img",
        // Note that our modules need to be explicitly exported, as they
        // are not actual dependencies
        "hw-display-virtio-gpu",
        "hw-display-virtio-vga",
        "hw-display-virtio-vga-gl",
        "hw-display-virtio-gpu-pci"
    ],
    "exclude": [
        "vhost-user",
        "vhost-user-glib",
        // We will provide our own module info that will be build into qemu
        // This will allow us to provide our own custom drivers.
        "modinfo-*"
    ]
}